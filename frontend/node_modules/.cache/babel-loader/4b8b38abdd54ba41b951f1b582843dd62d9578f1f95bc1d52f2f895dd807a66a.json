{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport useAppState from './useAppState';\nconst useDragDrop = (graphData, setGraphData, showNotification) => {\n  _s();\n  const [draggedItem, setDraggedItem] = useState(null);\n  const {\n    showConfirmDialog\n  } = useAppState();\n\n  // Define the drag handlers that were missing\n  const handleDragStart = (event, key, category) => {\n    event.dataTransfer.setData(\"text/plain\", key);\n    event.dataTransfer.setData(\"category\", category);\n    setDraggedItem(key);\n    if (event.target.classList) {\n      event.target.classList.add(\"dragging\");\n    }\n  };\n  const handleDragEnd = event => {\n    if (event.target.classList) {\n      event.target.classList.remove(\"dragging\");\n    }\n    setDraggedItem(null);\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n    if (event.currentTarget.classList) {\n      event.currentTarget.classList.add(\"drop-target\");\n    }\n  };\n  const handleDragLeave = event => {\n    if (event.currentTarget.classList) {\n      event.currentTarget.classList.remove(\"drop-target\");\n    }\n  };\n\n  // Process drag drop - update to add confirmation\n  const processDragDrop = async (event, targetKey, targetCategory) => {\n    event.preventDefault();\n    if (event.currentTarget.classList) {\n      event.currentTarget.classList.remove(\"drop-target\");\n    }\n    const sourceKey = event.dataTransfer.getData(\"text/plain\");\n    const sourceCategory = event.dataTransfer.getData(\"category\");\n    if (sourceKey && sourceKey !== targetKey) {\n      const sourceNode = graphData.nodeDataArray.find(node => node.key === sourceKey);\n      const targetNode = graphData.nodeDataArray.find(node => node.key === targetKey);\n      if (sourceNode && targetNode) {\n        showConfirmDialog({\n          title: \"Change Relationship?\",\n          message: `Are you sure you want to move this ${sourceNode.category} to ${targetNode.category} \"${targetNode.label}\"?`,\n          confirmText: \"Move\",\n          onConfirm: async () => {\n            // Update local state\n            setGraphData(prev => {\n              let updatedNodeDataArray = [...prev.nodeDataArray];\n              let updatedLinkDataArray = [...prev.linkDataArray];\n\n              // Existing link removal and creation logic\n              updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\n              if (sourceNode.category === \"attribute\" && targetNode.category === \"object\") {\n                updatedLinkDataArray.push({\n                  from: targetKey,\n                  to: sourceKey\n                });\n              } else if (sourceNode.category === \"object\" && targetNode.category === \"system\") {\n                updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\n                updatedLinkDataArray.push({\n                  from: targetKey,\n                  to: sourceKey\n                });\n              }\n              return {\n                ...prev,\n                nodeDataArray: updatedNodeDataArray,\n                linkDataArray: updatedLinkDataArray\n              };\n            });\n\n            // Send drag-drop changes to backend\n            try {\n              const response = await axios.post(\"http://localhost:8000/apply-drag-drop/\", {\n                source: sourceKey,\n                target: targetKey,\n                sourceType: sourceNode.category,\n                targetType: targetNode.category\n              });\n              if (response.data.message === \"Drag-and-drop operation completed successfully\") {\n                if (showNotification) {\n                  showNotification(\"Item moved successfully\", \"success\");\n                }\n              }\n            } catch (error) {\n              console.error(\"Error applying drag and drop:\", error);\n              let errorMessage = \"Error moving item.\";\n              if (error.response && error.response.data) {\n                errorMessage += ` ${error.response.data.detail || ''}`;\n              }\n              if (showNotification) {\n                showNotification(errorMessage, \"error\");\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  return {\n    draggedItem,\n    handleDragStart,\n    handleDragEnd,\n    handleDragOver,\n    handleDragLeave,\n    processDragDrop\n  };\n};\n_s(useDragDrop, \"dwb+QrkKIYB9ZtOmF1WppS3Z8oU=\", false, function () {\n  return [useAppState];\n});\nexport default useDragDrop;","map":{"version":3,"names":["useState","axios","useAppState","useDragDrop","graphData","setGraphData","showNotification","_s","draggedItem","setDraggedItem","showConfirmDialog","handleDragStart","event","key","category","dataTransfer","setData","target","classList","add","handleDragEnd","remove","handleDragOver","preventDefault","currentTarget","handleDragLeave","processDragDrop","targetKey","targetCategory","sourceKey","getData","sourceCategory","sourceNode","nodeDataArray","find","node","targetNode","title","message","label","confirmText","onConfirm","prev","updatedNodeDataArray","updatedLinkDataArray","linkDataArray","filter","link","to","push","from","response","post","source","sourceType","targetType","data","error","console","errorMessage","detail"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useDragDrop.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport useAppState from './useAppState';\r\n\r\nconst useDragDrop = (graphData, setGraphData, showNotification) => {\r\n    const [draggedItem, setDraggedItem] = useState(null);\r\n    const { showConfirmDialog } = useAppState();\r\n\r\n    // Define the drag handlers that were missing\r\n    const handleDragStart = (event, key, category) => {\r\n        event.dataTransfer.setData(\"text/plain\", key);\r\n        event.dataTransfer.setData(\"category\", category);\r\n        setDraggedItem(key);\r\n        \r\n        if (event.target.classList) {\r\n            event.target.classList.add(\"dragging\");\r\n        }\r\n    };\r\n\r\n    const handleDragEnd = (event) => {\r\n        if (event.target.classList) {\r\n            event.target.classList.remove(\"dragging\");\r\n        }\r\n        setDraggedItem(null);\r\n    };\r\n\r\n    const handleDragOver = (event) => {\r\n        event.preventDefault();\r\n        if (event.currentTarget.classList) {\r\n            event.currentTarget.classList.add(\"drop-target\");\r\n        }\r\n    };\r\n\r\n    const handleDragLeave = (event) => {\r\n        if (event.currentTarget.classList) {\r\n            event.currentTarget.classList.remove(\"drop-target\");\r\n        }\r\n    };\r\n    \r\n    // Process drag drop - update to add confirmation\r\n    const processDragDrop = async (event, targetKey, targetCategory) => {\r\n        event.preventDefault();\r\n        \r\n        if (event.currentTarget.classList) {\r\n            event.currentTarget.classList.remove(\"drop-target\");\r\n        }\r\n        \r\n        const sourceKey = event.dataTransfer.getData(\"text/plain\");\r\n        const sourceCategory = event.dataTransfer.getData(\"category\");\r\n\r\n        if (sourceKey && sourceKey !== targetKey) {\r\n            const sourceNode = graphData.nodeDataArray.find(node => node.key === sourceKey);\r\n            const targetNode = graphData.nodeDataArray.find(node => node.key === targetKey);\r\n            \r\n            if (sourceNode && targetNode) {\r\n                showConfirmDialog({\r\n                    title: \"Change Relationship?\",\r\n                    message: `Are you sure you want to move this ${sourceNode.category} to ${targetNode.category} \"${targetNode.label}\"?`,\r\n                    confirmText: \"Move\",\r\n                    onConfirm: async () => {\r\n                        // Update local state\r\n                        setGraphData((prev) => {\r\n                            let updatedNodeDataArray = [...prev.nodeDataArray];\r\n                            let updatedLinkDataArray = [...prev.linkDataArray];\r\n                            \r\n                            // Existing link removal and creation logic\r\n                            updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\r\n\r\n                            if (sourceNode.category === \"attribute\" && targetNode.category === \"object\") {\r\n                                updatedLinkDataArray.push({ from: targetKey, to: sourceKey });\r\n                            }\r\n                            else if (sourceNode.category === \"object\" && targetNode.category === \"system\") {\r\n                                updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\r\n                                updatedLinkDataArray.push({ from: targetKey, to: sourceKey });\r\n                            }\r\n\r\n                            return {\r\n                                ...prev,\r\n                                nodeDataArray: updatedNodeDataArray,\r\n                                linkDataArray: updatedLinkDataArray,\r\n                            };\r\n                        });\r\n\r\n                        // Send drag-drop changes to backend\r\n                        try {\r\n                            const response = await axios.post(\"http://localhost:8000/apply-drag-drop/\", {\r\n                                source: sourceKey,\r\n                                target: targetKey,\r\n                                sourceType: sourceNode.category,\r\n                                targetType: targetNode.category\r\n                            });\r\n                            \r\n                            if (response.data.message === \"Drag-and-drop operation completed successfully\") {\r\n                                if (showNotification) {\r\n                                    showNotification(\"Item moved successfully\", \"success\");\r\n                                }\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(\"Error applying drag and drop:\", error);\r\n                            let errorMessage = \"Error moving item.\";\r\n                            if (error.response && error.response.data) {\r\n                                errorMessage += ` ${error.response.data.detail || ''}`;\r\n                            }\r\n                            if (showNotification) {\r\n                                showNotification(errorMessage, \"error\");\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        draggedItem,\r\n        handleDragStart,\r\n        handleDragEnd,\r\n        handleDragOver,\r\n        handleDragLeave,\r\n        processDragDrop\r\n    };\r\n};\r\n\r\nexport default useDragDrop;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AAEvC,MAAMC,WAAW,GAAGA,CAACC,SAAS,EAAEC,YAAY,EAAEC,gBAAgB,KAAK;EAAAC,EAAA;EAC/D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM;IAAEU;EAAkB,CAAC,GAAGR,WAAW,CAAC,CAAC;;EAE3C;EACA,MAAMS,eAAe,GAAGA,CAACC,KAAK,EAAEC,GAAG,EAAEC,QAAQ,KAAK;IAC9CF,KAAK,CAACG,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEH,GAAG,CAAC;IAC7CD,KAAK,CAACG,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,QAAQ,CAAC;IAChDL,cAAc,CAACI,GAAG,CAAC;IAEnB,IAAID,KAAK,CAACK,MAAM,CAACC,SAAS,EAAE;MACxBN,KAAK,CAACK,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC;IAC1C;EACJ,CAAC;EAED,MAAMC,aAAa,GAAIR,KAAK,IAAK;IAC7B,IAAIA,KAAK,CAACK,MAAM,CAACC,SAAS,EAAE;MACxBN,KAAK,CAACK,MAAM,CAACC,SAAS,CAACG,MAAM,CAAC,UAAU,CAAC;IAC7C;IACAZ,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAMa,cAAc,GAAIV,KAAK,IAAK;IAC9BA,KAAK,CAACW,cAAc,CAAC,CAAC;IACtB,IAAIX,KAAK,CAACY,aAAa,CAACN,SAAS,EAAE;MAC/BN,KAAK,CAACY,aAAa,CAACN,SAAS,CAACC,GAAG,CAAC,aAAa,CAAC;IACpD;EACJ,CAAC;EAED,MAAMM,eAAe,GAAIb,KAAK,IAAK;IAC/B,IAAIA,KAAK,CAACY,aAAa,CAACN,SAAS,EAAE;MAC/BN,KAAK,CAACY,aAAa,CAACN,SAAS,CAACG,MAAM,CAAC,aAAa,CAAC;IACvD;EACJ,CAAC;;EAED;EACA,MAAMK,eAAe,GAAG,MAAAA,CAAOd,KAAK,EAAEe,SAAS,EAAEC,cAAc,KAAK;IAChEhB,KAAK,CAACW,cAAc,CAAC,CAAC;IAEtB,IAAIX,KAAK,CAACY,aAAa,CAACN,SAAS,EAAE;MAC/BN,KAAK,CAACY,aAAa,CAACN,SAAS,CAACG,MAAM,CAAC,aAAa,CAAC;IACvD;IAEA,MAAMQ,SAAS,GAAGjB,KAAK,CAACG,YAAY,CAACe,OAAO,CAAC,YAAY,CAAC;IAC1D,MAAMC,cAAc,GAAGnB,KAAK,CAACG,YAAY,CAACe,OAAO,CAAC,UAAU,CAAC;IAE7D,IAAID,SAAS,IAAIA,SAAS,KAAKF,SAAS,EAAE;MACtC,MAAMK,UAAU,GAAG5B,SAAS,CAAC6B,aAAa,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACtB,GAAG,KAAKgB,SAAS,CAAC;MAC/E,MAAMO,UAAU,GAAGhC,SAAS,CAAC6B,aAAa,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACtB,GAAG,KAAKc,SAAS,CAAC;MAE/E,IAAIK,UAAU,IAAII,UAAU,EAAE;QAC1B1B,iBAAiB,CAAC;UACd2B,KAAK,EAAE,sBAAsB;UAC7BC,OAAO,EAAE,sCAAsCN,UAAU,CAAClB,QAAQ,OAAOsB,UAAU,CAACtB,QAAQ,KAAKsB,UAAU,CAACG,KAAK,IAAI;UACrHC,WAAW,EAAE,MAAM;UACnBC,SAAS,EAAE,MAAAA,CAAA,KAAY;YACnB;YACApC,YAAY,CAAEqC,IAAI,IAAK;cACnB,IAAIC,oBAAoB,GAAG,CAAC,GAAGD,IAAI,CAACT,aAAa,CAAC;cAClD,IAAIW,oBAAoB,GAAG,CAAC,GAAGF,IAAI,CAACG,aAAa,CAAC;;cAElD;cACAD,oBAAoB,GAAGA,oBAAoB,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKnB,SAAS,CAAC;cAEjF,IAAIG,UAAU,CAAClB,QAAQ,KAAK,WAAW,IAAIsB,UAAU,CAACtB,QAAQ,KAAK,QAAQ,EAAE;gBACzE8B,oBAAoB,CAACK,IAAI,CAAC;kBAAEC,IAAI,EAAEvB,SAAS;kBAAEqB,EAAE,EAAEnB;gBAAU,CAAC,CAAC;cACjE,CAAC,MACI,IAAIG,UAAU,CAAClB,QAAQ,KAAK,QAAQ,IAAIsB,UAAU,CAACtB,QAAQ,KAAK,QAAQ,EAAE;gBAC3E8B,oBAAoB,GAAGA,oBAAoB,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKnB,SAAS,CAAC;gBACjFe,oBAAoB,CAACK,IAAI,CAAC;kBAAEC,IAAI,EAAEvB,SAAS;kBAAEqB,EAAE,EAAEnB;gBAAU,CAAC,CAAC;cACjE;cAEA,OAAO;gBACH,GAAGa,IAAI;gBACPT,aAAa,EAAEU,oBAAoB;gBACnCE,aAAa,EAAED;cACnB,CAAC;YACL,CAAC,CAAC;;YAEF;YACA,IAAI;cACA,MAAMO,QAAQ,GAAG,MAAMlD,KAAK,CAACmD,IAAI,CAAC,wCAAwC,EAAE;gBACxEC,MAAM,EAAExB,SAAS;gBACjBZ,MAAM,EAAEU,SAAS;gBACjB2B,UAAU,EAAEtB,UAAU,CAAClB,QAAQ;gBAC/ByC,UAAU,EAAEnB,UAAU,CAACtB;cAC3B,CAAC,CAAC;cAEF,IAAIqC,QAAQ,CAACK,IAAI,CAAClB,OAAO,KAAK,gDAAgD,EAAE;gBAC5E,IAAIhC,gBAAgB,EAAE;kBAClBA,gBAAgB,CAAC,yBAAyB,EAAE,SAAS,CAAC;gBAC1D;cACJ;YACJ,CAAC,CAAC,OAAOmD,KAAK,EAAE;cACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;cACrD,IAAIE,YAAY,GAAG,oBAAoB;cACvC,IAAIF,KAAK,CAACN,QAAQ,IAAIM,KAAK,CAACN,QAAQ,CAACK,IAAI,EAAE;gBACvCG,YAAY,IAAI,IAAIF,KAAK,CAACN,QAAQ,CAACK,IAAI,CAACI,MAAM,IAAI,EAAE,EAAE;cAC1D;cACA,IAAItD,gBAAgB,EAAE;gBAClBA,gBAAgB,CAACqD,YAAY,EAAE,OAAO,CAAC;cAC3C;YACJ;UACJ;QACJ,CAAC,CAAC;MACN;IACJ;EACJ,CAAC;EAED,OAAO;IACHnD,WAAW;IACXG,eAAe;IACfS,aAAa;IACbE,cAAc;IACdG,eAAe;IACfC;EACJ,CAAC;AACL,CAAC;AAACnB,EAAA,CArHIJ,WAAW;EAAA,QAEiBD,WAAW;AAAA;AAqH7C,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}