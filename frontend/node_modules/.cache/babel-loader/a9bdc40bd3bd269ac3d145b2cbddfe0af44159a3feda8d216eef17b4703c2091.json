{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useMemo } from 'react';\nimport { organizeDataForVisualization, organizeDataForAIRearrangement } from '../utils/dataOrganizer';\n\n/**\r\n * Custom hook to manage graph visualization state and data processing\r\n */\nexport const useGraphVisualization = graphData => {\n  _s();\n  // State for view modes and data\n  const [processedData, setProcessedData] = useState([]);\n  const [aiProcessedData, setAIProcessedData] = useState([]);\n  const [show3NFStatus, setShow3NFStatus] = useState(false);\n  const [showAIRearrangement, setShowAIRearrangement] = useState(false);\n  const [expandedAttributes, setExpandedAttributes] = useState({});\n\n  // Process graph data when it changes\n  useEffect(() => {\n    if (graphData && graphData.nodeDataArray && graphData.linkDataArray) {\n      try {\n        // Process original data organization\n        const organized = organizeDataForVisualization(graphData);\n        setProcessedData(organized);\n\n        // Process AI-rearranged data\n        const aiOrganized = organizeDataForAIRearrangement(graphData);\n        setAIProcessedData(aiOrganized);\n\n        // Reset expanded state when data changes\n        setExpandedAttributes({});\n      } catch (error) {\n        console.error('Error processing graph data:', error);\n        setProcessedData([]);\n        setAIProcessedData([]);\n      }\n    }\n  }, [graphData]);\n\n  // Toggle 3NF compliance check display\n  const toggle3NFCheck = () => {\n    setShow3NFStatus(prev => !prev);\n  };\n\n  // Toggle AI rearrangement display\n  const toggleAIRearrangement = () => {\n    setShowAIRearrangement(prev => !prev);\n\n    // Reset expanded state when switching views\n    if (!showAIRearrangement) {\n      setExpandedAttributes({});\n    }\n  };\n\n  // Toggle expand/collapse for an attribute\n  const toggleExpand = (objectKey, attrName) => {\n    setExpandedAttributes(prev => {\n      const key = `${objectKey}-${attrName}`;\n      return {\n        ...prev,\n        [key]: !prev[key]\n      };\n    });\n  };\n\n  // Check if an attribute is expanded\n  const isExpanded = (objectKey, attrName) => {\n    const key = `${objectKey}-${attrName}`;\n    return !!expandedAttributes[key];\n  };\n  return {\n    processedData,\n    aiProcessedData,\n    show3NFStatus,\n    showAIRearrangement,\n    toggleAIRearrangement,\n    toggle3NFCheck,\n    isExpanded,\n    toggleExpand\n  };\n};\n_s(useGraphVisualization, \"kcRejX1KY7W5XV6mIIngdsODOxE=\");","map":{"version":3,"names":["useState","useEffect","useMemo","organizeDataForVisualization","organizeDataForAIRearrangement","useGraphVisualization","graphData","_s","processedData","setProcessedData","aiProcessedData","setAIProcessedData","show3NFStatus","setShow3NFStatus","showAIRearrangement","setShowAIRearrangement","expandedAttributes","setExpandedAttributes","nodeDataArray","linkDataArray","organized","aiOrganized","error","console","toggle3NFCheck","prev","toggleAIRearrangement","toggleExpand","objectKey","attrName","key","isExpanded"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/TableGraphVisualization/hooks/useGraphVisualization.js"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\r\nimport { \r\n  organizeDataForVisualization, \r\n  organizeDataForAIRearrangement \r\n} from '../utils/dataOrganizer';\r\n\r\n/**\r\n * Custom hook to manage graph visualization state and data processing\r\n */\r\nexport const useGraphVisualization = (graphData) => {\r\n  // State for view modes and data\r\n  const [processedData, setProcessedData] = useState([]);\r\n  const [aiProcessedData, setAIProcessedData] = useState([]);\r\n  const [show3NFStatus, setShow3NFStatus] = useState(false);\r\n  const [showAIRearrangement, setShowAIRearrangement] = useState(false);\r\n  const [expandedAttributes, setExpandedAttributes] = useState({});\r\n\r\n  // Process graph data when it changes\r\n  useEffect(() => {\r\n    if (graphData && graphData.nodeDataArray && graphData.linkDataArray) {\r\n      try {\r\n        // Process original data organization\r\n        const organized = organizeDataForVisualization(graphData);\r\n        setProcessedData(organized);\r\n        \r\n        // Process AI-rearranged data\r\n        const aiOrganized = organizeDataForAIRearrangement(graphData);\r\n        setAIProcessedData(aiOrganized);\r\n        \r\n        // Reset expanded state when data changes\r\n        setExpandedAttributes({});\r\n      } catch (error) {\r\n        console.error('Error processing graph data:', error);\r\n        setProcessedData([]);\r\n        setAIProcessedData([]);\r\n      }\r\n    }\r\n  }, [graphData]);\r\n\r\n  // Toggle 3NF compliance check display\r\n  const toggle3NFCheck = () => {\r\n    setShow3NFStatus(prev => !prev);\r\n  };\r\n  \r\n  // Toggle AI rearrangement display\r\n  const toggleAIRearrangement = () => {\r\n    setShowAIRearrangement(prev => !prev);\r\n    \r\n    // Reset expanded state when switching views\r\n    if (!showAIRearrangement) {\r\n      setExpandedAttributes({});\r\n    }\r\n  };\r\n\r\n  // Toggle expand/collapse for an attribute\r\n  const toggleExpand = (objectKey, attrName) => {\r\n    setExpandedAttributes(prev => {\r\n      const key = `${objectKey}-${attrName}`;\r\n      return {\r\n        ...prev,\r\n        [key]: !prev[key]\r\n      };\r\n    });\r\n  };\r\n\r\n  // Check if an attribute is expanded\r\n  const isExpanded = (objectKey, attrName) => {\r\n    const key = `${objectKey}-${attrName}`;\r\n    return !!expandedAttributes[key];\r\n  };\r\n\r\n  return {\r\n    processedData,\r\n    aiProcessedData,\r\n    show3NFStatus,\r\n    showAIRearrangement,\r\n    toggleAIRearrangement,\r\n    toggle3NFCheck,\r\n    isExpanded,\r\n    toggleExpand\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACpD,SACEC,4BAA4B,EAC5BC,8BAA8B,QACzB,wBAAwB;;AAE/B;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAIC,SAAS,IAAK;EAAAC,EAAA;EAClD;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACc,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACgB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhE;EACAC,SAAS,CAAC,MAAM;IACd,IAAIK,SAAS,IAAIA,SAAS,CAACY,aAAa,IAAIZ,SAAS,CAACa,aAAa,EAAE;MACnE,IAAI;QACF;QACA,MAAMC,SAAS,GAAGjB,4BAA4B,CAACG,SAAS,CAAC;QACzDG,gBAAgB,CAACW,SAAS,CAAC;;QAE3B;QACA,MAAMC,WAAW,GAAGjB,8BAA8B,CAACE,SAAS,CAAC;QAC7DK,kBAAkB,CAACU,WAAW,CAAC;;QAE/B;QACAJ,qBAAqB,CAAC,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDb,gBAAgB,CAAC,EAAE,CAAC;QACpBE,kBAAkB,CAAC,EAAE,CAAC;MACxB;IACF;EACF,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMkB,cAAc,GAAGA,CAAA,KAAM;IAC3BX,gBAAgB,CAACY,IAAI,IAAI,CAACA,IAAI,CAAC;EACjC,CAAC;;EAED;EACA,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClCX,sBAAsB,CAACU,IAAI,IAAI,CAACA,IAAI,CAAC;;IAErC;IACA,IAAI,CAACX,mBAAmB,EAAE;MACxBG,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC;;EAED;EACA,MAAMU,YAAY,GAAGA,CAACC,SAAS,EAAEC,QAAQ,KAAK;IAC5CZ,qBAAqB,CAACQ,IAAI,IAAI;MAC5B,MAAMK,GAAG,GAAG,GAAGF,SAAS,IAAIC,QAAQ,EAAE;MACtC,OAAO;QACL,GAAGJ,IAAI;QACP,CAACK,GAAG,GAAG,CAACL,IAAI,CAACK,GAAG;MAClB,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGA,CAACH,SAAS,EAAEC,QAAQ,KAAK;IAC1C,MAAMC,GAAG,GAAG,GAAGF,SAAS,IAAIC,QAAQ,EAAE;IACtC,OAAO,CAAC,CAACb,kBAAkB,CAACc,GAAG,CAAC;EAClC,CAAC;EAED,OAAO;IACLtB,aAAa;IACbE,eAAe;IACfE,aAAa;IACbE,mBAAmB;IACnBY,qBAAqB;IACrBF,cAAc;IACdO,UAAU;IACVJ;EACF,CAAC;AACH,CAAC;AAACpB,EAAA,CAxEWF,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}