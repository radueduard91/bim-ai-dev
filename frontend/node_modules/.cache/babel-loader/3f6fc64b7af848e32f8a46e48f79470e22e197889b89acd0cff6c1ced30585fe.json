{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R40008\\\\Asset Model Server\\\\python\\\\bim-ai-poc\\\\frontend\\\\src\\\\components\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, Position } from 'reactflow';\nimport 'reactflow/dist/style.css';\n\n// Define custom node types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  cluster: ClusterNode,\n  object: ObjectNode,\n  harmonised: HarmonisedNode\n};\n\n// Cluster Node Component\nfunction ClusterNode({\n  data\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cluster-node\",\n    style: {\n      padding: '10px',\n      borderRadius: '5px',\n      background: 'linear-gradient(to bottom, #1E40AF, #3B82F6)',\n      color: 'white',\n      width: '180px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      border: '2px solid #1E3A8A'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '16px',\n          height: '16px',\n          borderRadius: '50%',\n          backgroundColor: 'white'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold',\n          fontSize: '14px',\n          textAlign: 'center'\n        },\n        children: data.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), data.hoverLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '8px',\n        fontSize: '12px',\n        backgroundColor: 'rgba(255, 255, 255, 0.2)',\n        padding: '4px',\n        borderRadius: '3px'\n      },\n      children: data.hoverLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n// Object Node Component\n_c = ClusterNode;\nfunction ObjectNode({\n  data\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"object-node\",\n    style: {\n      padding: '10px',\n      borderRadius: '8px',\n      background: 'linear-gradient(to bottom, #065F46, #10B981)',\n      color: 'white',\n      width: '160px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      border: '2px solid #064E3B'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '8px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '0',\n          height: '0',\n          borderLeft: '7px solid transparent',\n          borderRight: '7px solid transparent',\n          borderBottom: '14px solid white'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 'bold',\n          fontSize: '13px'\n        },\n        children: data.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), data.hoverLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '8px',\n        fontSize: '12px',\n        backgroundColor: 'rgba(255, 255, 255, 0.2)',\n        padding: '4px',\n        borderRadius: '3px'\n      },\n      children: data.hoverLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n// Harmonised Attribute Node Component\n_c2 = ObjectNode;\nfunction HarmonisedNode({\n  data\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"harmonised-node\",\n    style: {\n      padding: '8px',\n      borderRadius: '8px',\n      background: 'linear-gradient(to bottom, #581C87, #8B5CF6)',\n      color: 'white',\n      width: '140px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      border: '2px solid #4C1D95'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '6px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '12px',\n          height: '12px',\n          transform: 'rotate(45deg)',\n          backgroundColor: 'white'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '12px'\n        },\n        children: data.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), data.hoverLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '6px',\n        fontSize: '11px',\n        backgroundColor: 'rgba(255, 255, 255, 0.2)',\n        padding: '3px',\n        borderRadius: '3px'\n      },\n      children: data.hoverLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_c3 = HarmonisedNode;\nconst GraphVisualization = ({\n  graphData,\n  dimensions,\n  setDimensions\n}) => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [rfInstance, setRfInstance] = useState(null);\n\n  // Process graph data to create React Flow nodes and edges\n  useEffect(() => {\n    if (graphData && graphData.nodeDataArray && graphData.linkDataArray) {\n      const processedData = processGraphData(graphData);\n      setNodes(processedData.nodes);\n      setEdges(processedData.edges);\n    }\n  }, [graphData, setNodes, setEdges]);\n\n  // Process graph data to deduplicate harmonised attributes WITHIN each object\n  const processGraphData = data => {\n    if (!data || !data.nodeDataArray || !data.linkDataArray) {\n      return {\n        nodes: [],\n        edges: []\n      };\n    }\n\n    // Copy the original arrays to avoid mutation\n    const originalNodes = [...data.nodeDataArray];\n    const originalLinks = [...data.linkDataArray];\n\n    // Get clusters and objects\n    const clusters = originalNodes.filter(node => node.category === \"system\");\n    const objects = originalNodes.filter(node => node.category === \"object\");\n\n    // Get attributes\n    const attributes = originalNodes.filter(node => node.category === \"attribute\");\n\n    // Create arrays for React Flow nodes and edges\n    const flowNodes = [];\n    const flowEdges = [];\n\n    // Initialize node positions\n    let yPosition = 0;\n    const LEVEL_HEIGHT = 150;\n    const NODE_WIDTH = 180;\n\n    // Add cluster nodes (top level)\n    let clusterPositions = {};\n    clusters.forEach((cluster, index) => {\n      const xPosition = index * NODE_WIDTH * 1.5 - (clusters.length - 1) * NODE_WIDTH * 0.75;\n      const nodeId = cluster.key;\n      flowNodes.push({\n        id: nodeId,\n        type: 'cluster',\n        position: {\n          x: xPosition,\n          y: yPosition\n        },\n        data: {\n          label: cluster.label,\n          hoverLabel: cluster.hoverLabel || ''\n        },\n        sourcePosition: Position.Bottom,\n        targetPosition: Position.Top\n      });\n      clusterPositions[nodeId] = xPosition;\n    });\n\n    // Move to next level for objects\n    yPosition += LEVEL_HEIGHT;\n\n    // First, organize objects by their parent cluster\n    const objectsByCluster = {};\n    originalLinks.forEach(link => {\n      const sourceNode = originalNodes.find(node => node.key === link.from);\n      const targetNode = originalNodes.find(node => node.key === link.to);\n      if (sourceNode && targetNode && sourceNode.category === \"system\" && targetNode.category === \"object\") {\n        if (!objectsByCluster[sourceNode.key]) {\n          objectsByCluster[sourceNode.key] = [];\n        }\n        objectsByCluster[sourceNode.key].push(targetNode);\n      }\n    });\n\n    // Add object nodes (middle level)\n    let objectPositions = {};\n    Object.entries(objectsByCluster).forEach(([clusterId, clusterObjects]) => {\n      const clusterXPosition = clusterPositions[clusterId];\n      const objectCount = clusterObjects.length;\n      clusterObjects.forEach((object, index) => {\n        // Position objects below their parent cluster, with spacing\n        const xOffset = (index - (objectCount - 1) / 2) * NODE_WIDTH * 0.8;\n        const xPosition = clusterXPosition + xOffset;\n        const nodeId = object.key;\n        flowNodes.push({\n          id: nodeId,\n          type: 'object',\n          position: {\n            x: xPosition,\n            y: yPosition\n          },\n          data: {\n            label: object.label,\n            hoverLabel: object.hoverLabel || ''\n          },\n          sourcePosition: Position.Bottom,\n          targetPosition: Position.Top\n        });\n\n        // Add edge from cluster to object\n        flowEdges.push({\n          id: `${clusterId}-${nodeId}`,\n          source: clusterId,\n          target: nodeId,\n          animated: false,\n          style: {\n            stroke: '#555',\n            strokeWidth: 2\n          },\n          type: 'smoothstep'\n        });\n        objectPositions[nodeId] = xPosition;\n      });\n    });\n\n    // Move to next level for harmonised attributes\n    yPosition += LEVEL_HEIGHT;\n\n    // Process each object to find its attributes and create harmonised versions\n    objects.forEach(object => {\n      // Find attributes linked to this object\n      const objectAttributes = [];\n      originalLinks.forEach(link => {\n        const sourceNode = originalNodes.find(node => node.key === link.from);\n        const targetNode = originalNodes.find(node => node.key === link.to);\n        if (sourceNode && targetNode && sourceNode.key === object.key && targetNode.category === \"attribute\") {\n          objectAttributes.push(targetNode);\n        }\n      });\n\n      // Group by harmonised attribute name within this object\n      const harmonisedGroups = new Map();\n      objectAttributes.forEach(attr => {\n        const harmonisedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\n        if (!harmonisedGroups.has(harmonisedName)) {\n          harmonisedGroups.set(harmonisedName, []);\n        }\n        harmonisedGroups.get(harmonisedName).push(attr);\n      });\n\n      // Position the harmonised attributes below their parent object\n      const harmonisedCount = harmonisedGroups.size;\n      const objectXPosition = objectPositions[object.key];\n\n      // Add harmonised nodes (bottom level)\n      Array.from(harmonisedGroups.entries()).forEach(([harmonisedName, attributeGroup], index) => {\n        // Create a unique ID for this harmonised node\n        const harmonisedNodeId = `harmonised-${object.key}-${harmonisedName}`;\n\n        // Position harmonised attributes below their parent object, with spacing\n        const xOffset = (index - (harmonisedCount - 1) / 2) * NODE_WIDTH * 0.7;\n        const xPosition = objectXPosition + xOffset;\n        flowNodes.push({\n          id: harmonisedNodeId,\n          type: 'harmonised',\n          position: {\n            x: xPosition,\n            y: yPosition\n          },\n          data: {\n            label: harmonisedName,\n            hoverLabel: `Harmonised attribute for: ${attributeGroup.map(a => a.label).join(\", \")}`\n          },\n          sourcePosition: Position.Bottom,\n          targetPosition: Position.Top\n        });\n\n        // Add edge from object to harmonised attribute\n        flowEdges.push({\n          id: `${object.key}-${harmonisedNodeId}`,\n          source: object.key,\n          target: harmonisedNodeId,\n          animated: false,\n          style: {\n            stroke: '#555',\n            strokeWidth: 2\n          },\n          type: 'smoothstep'\n        });\n      });\n    });\n    return {\n      nodes: flowNodes,\n      edges: flowEdges\n    };\n  };\n\n  // Save reference to the React Flow instance\n  const onInit = useCallback(instance => {\n    setRfInstance(instance);\n\n    // After rendering, fit the view to see all nodes\n    setTimeout(() => {\n      instance.fitView({\n        padding: 0.2\n      });\n\n      // Update dimensions to match the rendered graph\n      const {\n        width,\n        height\n      } = instance.getViewportHelperFunctions().getTransformForBounds(instance.getNodes(), {\n        width: dimensions.width,\n        height: dimensions.height,\n        minZoom: 0.8,\n        maxZoom: 1.2,\n        padding: 20\n      });\n      setDimensions({\n        width: width,\n        height: height\n      });\n    }, 100);\n  }, [dimensions, setDimensions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: dimensions.height\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onInit: onInit,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      attributionPosition: \"bottom-left\",\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeStrokeWidth: 3,\n        zoomable: true,\n        pannable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100%\",\n        color: \"#64748b\",\n        fontSize: \"16px\",\n        fontStyle: \"italic\",\n        border: \"1px solid #e2e8f0\",\n        borderRadius: \"8px\",\n        background: \"#f8fafc\"\n      },\n      children: \"Graph will be displayed here after uploading a file.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"JLfdrTKmxgfuy8N/MJiJ8d3rPrg=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c4 = GraphVisualization;\nexport default GraphVisualization;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ClusterNode\");\n$RefreshReg$(_c2, \"ObjectNode\");\n$RefreshReg$(_c3, \"HarmonisedNode\");\n$RefreshReg$(_c4, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","Position","jsxDEV","_jsxDEV","nodeTypes","cluster","ClusterNode","object","ObjectNode","harmonised","HarmonisedNode","data","className","style","padding","borderRadius","background","color","width","boxShadow","border","children","display","alignItems","gap","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","fontSize","textAlign","label","hoverLabel","marginTop","_c","borderLeft","borderRight","borderBottom","_c2","transform","_c3","GraphVisualization","graphData","dimensions","setDimensions","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","rfInstance","setRfInstance","nodeDataArray","linkDataArray","processedData","processGraphData","originalNodes","originalLinks","clusters","filter","node","category","objects","attributes","flowNodes","flowEdges","yPosition","LEVEL_HEIGHT","NODE_WIDTH","clusterPositions","forEach","index","xPosition","length","nodeId","key","push","id","type","position","x","y","sourcePosition","Bottom","targetPosition","Top","objectsByCluster","link","sourceNode","find","from","targetNode","to","objectPositions","Object","entries","clusterId","clusterObjects","clusterXPosition","objectCount","xOffset","source","target","animated","stroke","strokeWidth","objectAttributes","harmonisedGroups","Map","attr","harmonisedName","harmonisedAttribute","has","set","get","harmonisedCount","size","objectXPosition","Array","attributeGroup","harmonisedNodeId","map","a","join","onInit","instance","setTimeout","fitView","getViewportHelperFunctions","getTransformForBounds","getNodes","minZoom","maxZoom","attributionPosition","nodeStrokeWidth","zoomable","pannable","variant","justifyContent","fontStyle","_c4","$RefreshReg$"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/GraphVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport ReactFlow, {\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  Position\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\n// Define custom node types\r\nconst nodeTypes = {\r\n  cluster: ClusterNode,\r\n  object: ObjectNode,\r\n  harmonised: HarmonisedNode\r\n};\r\n\r\n// Cluster Node Component\r\nfunction ClusterNode({ data }) {\r\n  return (\r\n    <div className=\"cluster-node\" \r\n      style={{\r\n        padding: '10px',\r\n        borderRadius: '5px',\r\n        background: 'linear-gradient(to bottom, #1E40AF, #3B82F6)',\r\n        color: 'white',\r\n        width: '180px',\r\n        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n        border: '2px solid #1E3A8A'\r\n      }}>\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n        <div style={{ \r\n          width: '16px', \r\n          height: '16px', \r\n          borderRadius: '50%', \r\n          backgroundColor: 'white' \r\n        }}></div>\r\n        <div style={{\r\n          fontWeight: 'bold',\r\n          fontSize: '14px',\r\n          textAlign: 'center'\r\n        }}>{data.label}</div>\r\n      </div>\r\n      {data.hoverLabel && (\r\n        <div style={{\r\n          marginTop: '8px',\r\n          fontSize: '12px',\r\n          backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n          padding: '4px',\r\n          borderRadius: '3px'\r\n        }}>{data.hoverLabel}</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Object Node Component\r\nfunction ObjectNode({ data }) {\r\n  return (\r\n    <div className=\"object-node\"\r\n      style={{\r\n        padding: '10px',\r\n        borderRadius: '8px',\r\n        background: 'linear-gradient(to bottom, #065F46, #10B981)',\r\n        color: 'white',\r\n        width: '160px',\r\n        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n        border: '2px solid #064E3B'\r\n      }}>\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n        <div style={{\r\n          width: '0',\r\n          height: '0',\r\n          borderLeft: '7px solid transparent',\r\n          borderRight: '7px solid transparent',\r\n          borderBottom: '14px solid white'\r\n        }}></div>\r\n        <div style={{\r\n          fontWeight: 'bold',\r\n          fontSize: '13px'\r\n        }}>{data.label}</div>\r\n      </div>\r\n      {data.hoverLabel && (\r\n        <div style={{\r\n          marginTop: '8px',\r\n          fontSize: '12px',\r\n          backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n          padding: '4px',\r\n          borderRadius: '3px'\r\n        }}>{data.hoverLabel}</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Harmonised Attribute Node Component\r\nfunction HarmonisedNode({ data }) {\r\n  return (\r\n    <div className=\"harmonised-node\"\r\n      style={{\r\n        padding: '8px',\r\n        borderRadius: '8px',\r\n        background: 'linear-gradient(to bottom, #581C87, #8B5CF6)',\r\n        color: 'white',\r\n        width: '140px',\r\n        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n        border: '2px solid #4C1D95'\r\n      }}>\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>\r\n        <div style={{\r\n          width: '12px',\r\n          height: '12px',\r\n          transform: 'rotate(45deg)',\r\n          backgroundColor: 'white'\r\n        }}></div>\r\n        <div style={{\r\n          fontSize: '12px'\r\n        }}>{data.label}</div>\r\n      </div>\r\n      {data.hoverLabel && (\r\n        <div style={{\r\n          marginTop: '6px',\r\n          fontSize: '11px',\r\n          backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n          padding: '3px',\r\n          borderRadius: '3px'\r\n        }}>{data.hoverLabel}</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst GraphVisualization = ({ graphData, dimensions, setDimensions }) => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [rfInstance, setRfInstance] = useState(null);\r\n\r\n  // Process graph data to create React Flow nodes and edges\r\n  useEffect(() => {\r\n    if (graphData && graphData.nodeDataArray && graphData.linkDataArray) {\r\n      const processedData = processGraphData(graphData);\r\n      setNodes(processedData.nodes);\r\n      setEdges(processedData.edges);\r\n    }\r\n  }, [graphData, setNodes, setEdges]);\r\n\r\n  // Process graph data to deduplicate harmonised attributes WITHIN each object\r\n  const processGraphData = (data) => {\r\n    if (!data || !data.nodeDataArray || !data.linkDataArray) {\r\n      return { nodes: [], edges: [] };\r\n    }\r\n\r\n    // Copy the original arrays to avoid mutation\r\n    const originalNodes = [...data.nodeDataArray];\r\n    const originalLinks = [...data.linkDataArray];\r\n    \r\n    // Get clusters and objects\r\n    const clusters = originalNodes.filter(node => node.category === \"system\");\r\n    const objects = originalNodes.filter(node => node.category === \"object\");\r\n    \r\n    // Get attributes\r\n    const attributes = originalNodes.filter(node => node.category === \"attribute\");\r\n    \r\n    // Create arrays for React Flow nodes and edges\r\n    const flowNodes = [];\r\n    const flowEdges = [];\r\n    \r\n    // Initialize node positions\r\n    let yPosition = 0;\r\n    const LEVEL_HEIGHT = 150;\r\n    const NODE_WIDTH = 180;\r\n    \r\n    // Add cluster nodes (top level)\r\n    let clusterPositions = {};\r\n    clusters.forEach((cluster, index) => {\r\n      const xPosition = (index * NODE_WIDTH * 1.5) - ((clusters.length - 1) * NODE_WIDTH * 0.75);\r\n      const nodeId = cluster.key;\r\n      \r\n      flowNodes.push({\r\n        id: nodeId,\r\n        type: 'cluster',\r\n        position: { x: xPosition, y: yPosition },\r\n        data: { \r\n          label: cluster.label,\r\n          hoverLabel: cluster.hoverLabel || ''\r\n        },\r\n        sourcePosition: Position.Bottom,\r\n        targetPosition: Position.Top\r\n      });\r\n      \r\n      clusterPositions[nodeId] = xPosition;\r\n    });\r\n    \r\n    // Move to next level for objects\r\n    yPosition += LEVEL_HEIGHT;\r\n    \r\n    // First, organize objects by their parent cluster\r\n    const objectsByCluster = {};\r\n    originalLinks.forEach(link => {\r\n      const sourceNode = originalNodes.find(node => node.key === link.from);\r\n      const targetNode = originalNodes.find(node => node.key === link.to);\r\n      \r\n      if (sourceNode && targetNode && \r\n          sourceNode.category === \"system\" && \r\n          targetNode.category === \"object\") {\r\n        if (!objectsByCluster[sourceNode.key]) {\r\n          objectsByCluster[sourceNode.key] = [];\r\n        }\r\n        objectsByCluster[sourceNode.key].push(targetNode);\r\n      }\r\n    });\r\n    \r\n    // Add object nodes (middle level)\r\n    let objectPositions = {};\r\n    Object.entries(objectsByCluster).forEach(([clusterId, clusterObjects]) => {\r\n      const clusterXPosition = clusterPositions[clusterId];\r\n      const objectCount = clusterObjects.length;\r\n      \r\n      clusterObjects.forEach((object, index) => {\r\n        // Position objects below their parent cluster, with spacing\r\n        const xOffset = ((index - (objectCount - 1) / 2) * NODE_WIDTH * 0.8);\r\n        const xPosition = clusterXPosition + xOffset;\r\n        const nodeId = object.key;\r\n        \r\n        flowNodes.push({\r\n          id: nodeId,\r\n          type: 'object',\r\n          position: { x: xPosition, y: yPosition },\r\n          data: { \r\n            label: object.label,\r\n            hoverLabel: object.hoverLabel || ''\r\n          },\r\n          sourcePosition: Position.Bottom,\r\n          targetPosition: Position.Top\r\n        });\r\n        \r\n        // Add edge from cluster to object\r\n        flowEdges.push({\r\n          id: `${clusterId}-${nodeId}`,\r\n          source: clusterId,\r\n          target: nodeId,\r\n          animated: false,\r\n          style: { stroke: '#555', strokeWidth: 2 },\r\n          type: 'smoothstep'\r\n        });\r\n        \r\n        objectPositions[nodeId] = xPosition;\r\n      });\r\n    });\r\n    \r\n    // Move to next level for harmonised attributes\r\n    yPosition += LEVEL_HEIGHT;\r\n    \r\n    // Process each object to find its attributes and create harmonised versions\r\n    objects.forEach(object => {\r\n      // Find attributes linked to this object\r\n      const objectAttributes = [];\r\n      \r\n      originalLinks.forEach(link => {\r\n        const sourceNode = originalNodes.find(node => node.key === link.from);\r\n        const targetNode = originalNodes.find(node => node.key === link.to);\r\n        \r\n        if (sourceNode && targetNode && \r\n            sourceNode.key === object.key && \r\n            targetNode.category === \"attribute\") {\r\n          objectAttributes.push(targetNode);\r\n        }\r\n      });\r\n      \r\n      // Group by harmonised attribute name within this object\r\n      const harmonisedGroups = new Map();\r\n      \r\n      objectAttributes.forEach(attr => {\r\n        const harmonisedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\r\n        \r\n        if (!harmonisedGroups.has(harmonisedName)) {\r\n          harmonisedGroups.set(harmonisedName, []);\r\n        }\r\n        \r\n        harmonisedGroups.get(harmonisedName).push(attr);\r\n      });\r\n      \r\n      // Position the harmonised attributes below their parent object\r\n      const harmonisedCount = harmonisedGroups.size;\r\n      const objectXPosition = objectPositions[object.key];\r\n      \r\n      // Add harmonised nodes (bottom level)\r\n      Array.from(harmonisedGroups.entries()).forEach(([harmonisedName, attributeGroup], index) => {\r\n        // Create a unique ID for this harmonised node\r\n        const harmonisedNodeId = `harmonised-${object.key}-${harmonisedName}`;\r\n        \r\n        // Position harmonised attributes below their parent object, with spacing\r\n        const xOffset = ((index - (harmonisedCount - 1) / 2) * NODE_WIDTH * 0.7);\r\n        const xPosition = objectXPosition + xOffset;\r\n        \r\n        flowNodes.push({\r\n          id: harmonisedNodeId,\r\n          type: 'harmonised',\r\n          position: { x: xPosition, y: yPosition },\r\n          data: { \r\n            label: harmonisedName,\r\n            hoverLabel: `Harmonised attribute for: ${attributeGroup.map(a => a.label).join(\", \")}`\r\n          },\r\n          sourcePosition: Position.Bottom,\r\n          targetPosition: Position.Top\r\n        });\r\n        \r\n        // Add edge from object to harmonised attribute\r\n        flowEdges.push({\r\n          id: `${object.key}-${harmonisedNodeId}`,\r\n          source: object.key,\r\n          target: harmonisedNodeId,\r\n          animated: false,\r\n          style: { stroke: '#555', strokeWidth: 2 },\r\n          type: 'smoothstep'\r\n        });\r\n      });\r\n    });\r\n    \r\n    return { nodes: flowNodes, edges: flowEdges };\r\n  };\r\n\r\n  // Save reference to the React Flow instance\r\n  const onInit = useCallback(instance => {\r\n    setRfInstance(instance);\r\n    \r\n    // After rendering, fit the view to see all nodes\r\n    setTimeout(() => {\r\n      instance.fitView({ padding: 0.2 });\r\n      \r\n      // Update dimensions to match the rendered graph\r\n      const { width, height } = instance.getViewportHelperFunctions().getTransformForBounds(\r\n        instance.getNodes(),\r\n        { width: dimensions.width, height: dimensions.height, \r\n          minZoom: 0.8, maxZoom: 1.2, padding: 20 }\r\n      );\r\n      \r\n      setDimensions({\r\n        width: width,\r\n        height: height\r\n      });\r\n    }, 100);\r\n  }, [dimensions, setDimensions]);\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: dimensions.height }}>\r\n      {graphData ? (\r\n        <ReactFlow\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onInit={onInit}\r\n          nodeTypes={nodeTypes}\r\n          fitView\r\n          attributionPosition=\"bottom-left\"\r\n        >\r\n          <Controls />\r\n          <MiniMap\r\n            nodeStrokeWidth={3}\r\n            zoomable\r\n            pannable\r\n          />\r\n          <Background variant=\"dots\" gap={12} size={1} />\r\n        </ReactFlow>\r\n      ) : (\r\n        <div style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          height: \"100%\",\r\n          color: \"#64748b\",\r\n          fontSize: \"16px\",\r\n          fontStyle: \"italic\",\r\n          border: \"1px solid #e2e8f0\",\r\n          borderRadius: \"8px\",\r\n          background: \"#f8fafc\"\r\n        }}>\r\n          Graph will be displayed here after uploading a file.\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}