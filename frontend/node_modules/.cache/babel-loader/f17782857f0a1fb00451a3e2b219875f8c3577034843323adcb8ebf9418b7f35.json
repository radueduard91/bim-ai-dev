{"ast":null,"code":"/**\r\n * Organizes graph data into a hierarchical structure for visualization\r\n * @param {Object} data - The raw graph data\r\n * @returns {Array} - Array of organized cluster objects\r\n */\nexport function organizeDataForVisualization(data) {\n  if (!data || !data.nodeDataArray || !data.linkDataArray) {\n    return [];\n  }\n  const {\n    nodeDataArray: nodes,\n    linkDataArray: links\n  } = data;\n\n  // Extract nodes by category\n  const clusters = nodes.filter(node => node.category === \"system\");\n  const objects = nodes.filter(node => node.category === \"object\");\n  const attributes = nodes.filter(node => node.category === \"attribute\");\n\n  // Build the cluster hierarchy\n  return clusters.map(cluster => {\n    // Find objects linked to this cluster\n    const linkedObjectKeys = links.filter(link => link.from === cluster.key).map(link => link.to);\n    const clusterObjects = objects.filter(obj => linkedObjectKeys.includes(obj.key)).map(obj => {\n      // Find attributes linked to this object\n      const linkedAttrKeys = links.filter(link => link.from === obj.key).map(link => link.to);\n      const objectAttributes = attributes.filter(attr => linkedAttrKeys.includes(attr.key));\n\n      // Get harmonized attributes and check 3NF compliance\n      const harmonizedAttributeMap = processHarmonizedAttributes(objectAttributes);\n\n      // Convert map to array and sort alphabetically\n      const harmonizedAttributes = Object.values(harmonizedAttributeMap).sort((a, b) => a.name.localeCompare(b.name));\n      return {\n        ...obj,\n        attributes: objectAttributes,\n        harmonizedAttributes: harmonizedAttributes\n      };\n    }).sort((a, b) => (a.label || '').localeCompare(b.label || ''));\n    return {\n      ...cluster,\n      objects: clusterObjects\n    };\n  }).sort((a, b) => (a.label || '').localeCompare(b.label || ''));\n}\n\n/**\r\n * Process harmonized attributes with 3NF compliance check\r\n * @param {Array} objectAttributes - Attributes to process\r\n * @returns {Object} Mapped harmonized attributes\r\n */\nfunction processHarmonizedAttributes(objectAttributes) {\n  const harmonizedAttributeMap = {};\n  objectAttributes.forEach(attr => {\n    // Get the harmonized attribute name\n    const harmonizedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\n\n    // Check if this attribute is 3NF compliant (from the 3nf_marker field)\n    const is3NFCompliant = attr.hasOwnProperty('3nf_marker') ? attr['3nf_marker'] === 'yes' : Math.random() > 0.5; // Simulate for demo if field is missing\n\n    if (!harmonizedAttributeMap[harmonizedName]) {\n      harmonizedAttributeMap[harmonizedName] = {\n        name: harmonizedName,\n        count: 1,\n        originalAttributes: [attr.label || 'Unknown'],\n        is3NF: is3NFCompliant\n      };\n    } else {\n      const existingEntry = harmonizedAttributeMap[harmonizedName];\n      existingEntry.count += 1;\n\n      // Add unique original attributes\n      if (!existingEntry.originalAttributes.includes(attr.label || 'Unknown')) {\n        existingEntry.originalAttributes.push(attr.label || 'Unknown');\n      }\n\n      // Update 3NF status if any attribute is not compliant\n      if (!is3NFCompliant) {\n        existingEntry.is3NF = false;\n      }\n    }\n  });\n  return harmonizedAttributeMap;\n}\n\n/**\r\n * Reorganizes the graph data based on hardcoded mappings\r\n * @param {Object} data - The raw graph data\r\n * @returns {Array} - Array of reorganized objects\r\n */\nexport function organizeDataForAIRearrangement(data) {\n  if (!data || !data.nodeDataArray || !data.linkDataArray) {\n    console.log(\"No data available for AI rearrangement\");\n    return [];\n  }\n  const {\n    nodeDataArray: nodes,\n    linkDataArray: links\n  } = data;\n  const attributes = nodes.filter(node => node.category === \"attribute\");\n  console.log(`Total number of attributes: ${attributes.length}`);\n\n  // For debugging - check what properties are available in the first attribute\n  if (attributes.length > 0) {\n    const sampleAttr = attributes[0];\n    const keys = Object.keys(sampleAttr);\n    console.log(\"First attribute properties:\", keys);\n\n    // Show the actual properties and values\n    console.log(\"Property details:\");\n    keys.forEach(key => {\n      console.log(`  \"${key}\": \"${sampleAttr[key]}\"`);\n    });\n  }\n\n  // Create a map of new objects for our AI rearrangement\n  const newObjectsMap = {\n    \"Transformator\": {\n      key: \"new-object-1\",\n      label: \"Transformator\",\n      hoverLabel: \"AI-organized attributes for transformators\",\n      category: \"object\",\n      harmonizedAttributes: []\n    },\n    \"Trafostation\": {\n      key: \"new-object-2\",\n      label: \"Trafostation\",\n      hoverLabel: \"AI-organized attributes for trafostations\",\n      category: \"object\",\n      harmonizedAttributes: []\n    },\n    \"Abspanner\": {\n      key: \"new-object-3\",\n      label: \"Abspanner\",\n      hoverLabel: \"AI-organized attributes for abspanners\",\n      category: \"object\",\n      harmonizedAttributes: []\n    }\n  };\n\n  // Map attribute name patterns to target objects\n  const attributeMapping = {\n    // Transformator-specific attributes\n    \"D_ANSCHLUSS\": \"Transformator\",\n    \"D_BETRIEBSART\": \"Transformator\",\n    \"D_DREHRICHTUNG\": \"Transformator\",\n    \"D_EINBAUART\": \"Transformator\",\n    \"D_KUEHLUNG\": \"Transformator\",\n    \"D_WICKLUNG\": \"Transformator\",\n    \"D_SCHALTGRUPPE\": \"Transformator\",\n    \"D_TRANSFORMATOR\": \"Transformator\",\n    // Trafostation-specific attributes\n    \"D_TRAFOSTATION\": \"Trafostation\",\n    \"D_STATION\": \"Trafostation\",\n    \"D_GEBAEUDE\": \"Trafostation\",\n    // General attributes that could belong to any - defaulting to Transformator\n    \"D_ABSTURZSICHERUNGSART\": \"Transformator\",\n    \"D_FABRIKAT\": \"Transformator\",\n    \"D_HERSTELLER\": \"Transformator\",\n    \"D_KLASSE\": \"Transformator\",\n    \"D_LEISTUNG\": \"Transformator\",\n    \"D_MATERIAL\": \"Transformator\",\n    \"D_NENNFREQUENZ\": \"Transformator\",\n    \"D_NENNLEISTUNG\": \"Transformator\",\n    \"D_NENNSPANNUNG\": \"Transformator\",\n    \"D_NORM\": \"Transformator\",\n    \"D_SPANNUNG\": \"Transformator\",\n    \"D_STATUS\": \"Transformator\",\n    \"D_TYP\": \"Transformator\"\n  };\n\n  // Process each attribute using our mapping rules\n  attributes.forEach(attr => {\n    const harmonizedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\n\n    // Find original object the attribute belonged to\n    const originalObjectKey = links.filter(link => link.to === attr.key).map(link => link.from)[0];\n    const originalObjects = nodes.filter(node => node.category === \"object\");\n    const originalObject = originalObjectKey ? originalObjects.find(obj => obj.key === originalObjectKey) : null;\n\n    // Determine the target object based on the attribute name\n    let targetObjectName = \"Transformator\"; // Default\n\n    // First check for exact matches\n    if (attributeMapping[attr.label]) {\n      targetObjectName = attributeMapping[attr.label];\n    } else {\n      // Then check for prefix matches\n      for (const [prefix, objectName] of Object.entries(attributeMapping)) {\n        if (attr.label.startsWith(prefix)) {\n          targetObjectName = objectName;\n          break;\n        }\n      }\n    }\n\n    // Add to appropriate new object\n    const targetObject = newObjectsMap[targetObjectName];\n    if (targetObject) {\n      addAttributeToNewObject(targetObject, attr, harmonizedName, (originalObject === null || originalObject === void 0 ? void 0 : originalObject.label) || \"Unknown\");\n    }\n  });\n\n  // Convert objects map to array and filter out empty objects\n  const objectsArray = Object.values(newObjectsMap).filter(obj => obj.harmonizedAttributes.length > 0);\n\n  // Sort objects and their attributes\n  objectsArray.sort((a, b) => a.label.localeCompare(b.label));\n  objectsArray.forEach(obj => {\n    obj.harmonizedAttributes.sort((a, b) => a.name.localeCompare(b.name));\n  });\n\n  // Create a single cluster containing all new objects\n  const aiGeneratedCluster = {\n    key: \"ai-generated-cluster\",\n    label: \"AI-Generated Structure\",\n    category: \"system\",\n    hoverLabel: \"Objects reorganized based on attribute relationships\",\n    objects: objectsArray\n  };\n  return objectsArray.length > 0 ? [aiGeneratedCluster] : [];\n}\n\n/**\r\n * Helper function to add an attribute to a new object\r\n * @param {Object} targetObject - The object to add the attribute to\r\n * @param {Object} attribute - The attribute to add\r\n * @param {string} harmonizedName - The harmonized name of the attribute\r\n * @param {string} originalObjectName - The name of the original object\r\n */\nfunction addAttributeToNewObject(targetObject, attribute, harmonizedName, originalObjectName) {\n  // Check if this harmonized attribute is already in the target object\n  const existingAttr = targetObject.harmonizedAttributes.find(attr => attr.name === harmonizedName);\n\n  // Check if this attribute is 3NF compliant\n  const is3NFCompliant = attribute.hasOwnProperty('3nf_marker') ? attribute['3nf_marker'] === 'yes' : Math.random() > 0.5; // Simulate for demo if field is missing\n\n  if (existingAttr) {\n    // Add the original attribute name if not already present\n    if (!existingAttr.originalAttributes.includes(attribute.label)) {\n      existingAttr.originalAttributes.push(attribute.label);\n    }\n\n    // If any attribute is not 3NF compliant, mark the harmonized attribute as not 3NF\n    if (!is3NFCompliant) {\n      existingAttr.is3NF = false;\n    }\n\n    // Make sure we track that this was moved from its original object\n    existingAttr.moved = true;\n\n    // Keep track of original object if not already set\n    if (!existingAttr.originalObject) {\n      existingAttr.originalObject = originalObjectName;\n    }\n  } else {\n    // Create a new harmonized attribute entry\n    targetObject.harmonizedAttributes.push({\n      name: harmonizedName,\n      count: 1,\n      originalAttributes: [attribute.label],\n      is3NF: is3NFCompliant,\n      moved: true,\n      originalObject: originalObjectName\n    });\n  }\n}","map":{"version":3,"names":["organizeDataForVisualization","data","nodeDataArray","linkDataArray","nodes","links","clusters","filter","node","category","objects","attributes","map","cluster","linkedObjectKeys","link","from","key","to","clusterObjects","obj","includes","linkedAttrKeys","objectAttributes","attr","harmonizedAttributeMap","processHarmonizedAttributes","harmonizedAttributes","Object","values","sort","a","b","name","localeCompare","label","forEach","harmonizedName","harmonisedAttribute","is3NFCompliant","hasOwnProperty","Math","random","count","originalAttributes","is3NF","existingEntry","push","organizeDataForAIRearrangement","console","log","length","sampleAttr","keys","newObjectsMap","hoverLabel","attributeMapping","originalObjectKey","originalObjects","originalObject","find","targetObjectName","prefix","objectName","entries","startsWith","targetObject","addAttributeToNewObject","objectsArray","aiGeneratedCluster","attribute","originalObjectName","existingAttr","moved"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/TableGraphVisualization/utils/dataOrganizer.js"],"sourcesContent":["/**\r\n * Organizes graph data into a hierarchical structure for visualization\r\n * @param {Object} data - The raw graph data\r\n * @returns {Array} - Array of organized cluster objects\r\n */\r\nexport function organizeDataForVisualization(data) {\r\n  if (!data || !data.nodeDataArray || !data.linkDataArray) {\r\n    return [];\r\n  }\r\n  \r\n  const { nodeDataArray: nodes, linkDataArray: links } = data;\r\n  \r\n  // Extract nodes by category\r\n  const clusters = nodes.filter(node => node.category === \"system\");\r\n  const objects = nodes.filter(node => node.category === \"object\");\r\n  const attributes = nodes.filter(node => node.category === \"attribute\");\r\n  \r\n  // Build the cluster hierarchy\r\n  return clusters\r\n    .map(cluster => {\r\n      // Find objects linked to this cluster\r\n      const linkedObjectKeys = links\r\n        .filter(link => link.from === cluster.key)\r\n        .map(link => link.to);\r\n        \r\n      const clusterObjects = objects\r\n        .filter(obj => linkedObjectKeys.includes(obj.key))\r\n        .map(obj => {\r\n          // Find attributes linked to this object\r\n          const linkedAttrKeys = links\r\n            .filter(link => link.from === obj.key)\r\n            .map(link => link.to);\r\n            \r\n          const objectAttributes = attributes\r\n            .filter(attr => linkedAttrKeys.includes(attr.key));\r\n          \r\n          // Get harmonized attributes and check 3NF compliance\r\n          const harmonizedAttributeMap = processHarmonizedAttributes(objectAttributes);\r\n          \r\n          // Convert map to array and sort alphabetically\r\n          const harmonizedAttributes = Object.values(harmonizedAttributeMap)\r\n            .sort((a, b) => a.name.localeCompare(b.name));\r\n          \r\n          return {\r\n            ...obj,\r\n            attributes: objectAttributes,\r\n            harmonizedAttributes: harmonizedAttributes\r\n          };\r\n        })\r\n        .sort((a, b) => (a.label || '').localeCompare(b.label || ''));\r\n      \r\n      return {\r\n        ...cluster,\r\n        objects: clusterObjects\r\n      };\r\n    })\r\n    .sort((a, b) => (a.label || '').localeCompare(b.label || ''));\r\n}\r\n\r\n/**\r\n * Process harmonized attributes with 3NF compliance check\r\n * @param {Array} objectAttributes - Attributes to process\r\n * @returns {Object} Mapped harmonized attributes\r\n */\r\nfunction processHarmonizedAttributes(objectAttributes) {\r\n  const harmonizedAttributeMap = {};\r\n  \r\n  objectAttributes.forEach(attr => {\r\n    // Get the harmonized attribute name\r\n    const harmonizedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\r\n    \r\n    // Check if this attribute is 3NF compliant (from the 3nf_marker field)\r\n    const is3NFCompliant = attr.hasOwnProperty('3nf_marker') \r\n      ? attr['3nf_marker'] === 'yes'\r\n      : Math.random() > 0.5; // Simulate for demo if field is missing\r\n    \r\n    if (!harmonizedAttributeMap[harmonizedName]) {\r\n      harmonizedAttributeMap[harmonizedName] = {\r\n        name: harmonizedName,\r\n        count: 1,\r\n        originalAttributes: [attr.label || 'Unknown'],\r\n        is3NF: is3NFCompliant\r\n      };\r\n    } else {\r\n      const existingEntry = harmonizedAttributeMap[harmonizedName];\r\n      \r\n      existingEntry.count += 1;\r\n      \r\n      // Add unique original attributes\r\n      if (!existingEntry.originalAttributes.includes(attr.label || 'Unknown')) {\r\n        existingEntry.originalAttributes.push(attr.label || 'Unknown');\r\n      }\r\n      \r\n      // Update 3NF status if any attribute is not compliant\r\n      if (!is3NFCompliant) {\r\n        existingEntry.is3NF = false;\r\n      }\r\n    }\r\n  });\r\n  \r\n  return harmonizedAttributeMap;\r\n}\r\n\r\n/**\r\n * Reorganizes the graph data based on hardcoded mappings\r\n * @param {Object} data - The raw graph data\r\n * @returns {Array} - Array of reorganized objects\r\n */\r\nexport function organizeDataForAIRearrangement(data) {\r\n  if (!data || !data.nodeDataArray || !data.linkDataArray) {\r\n    console.log(\"No data available for AI rearrangement\");\r\n    return [];\r\n  }\r\n  \r\n  const { nodeDataArray: nodes, linkDataArray: links } = data;\r\n  const attributes = nodes.filter(node => node.category === \"attribute\");\r\n  \r\n  console.log(`Total number of attributes: ${attributes.length}`);\r\n\r\n  // For debugging - check what properties are available in the first attribute\r\n  if (attributes.length > 0) {\r\n    const sampleAttr = attributes[0];\r\n    const keys = Object.keys(sampleAttr);\r\n    console.log(\"First attribute properties:\", keys);\r\n    \r\n    // Show the actual properties and values\r\n    console.log(\"Property details:\");\r\n    keys.forEach(key => {\r\n      console.log(`  \"${key}\": \"${sampleAttr[key]}\"`);\r\n    });\r\n  }\r\n  \r\n  // Create a map of new objects for our AI rearrangement\r\n  const newObjectsMap = {\r\n    \"Transformator\": {\r\n      key: \"new-object-1\",\r\n      label: \"Transformator\",\r\n      hoverLabel: \"AI-organized attributes for transformators\",\r\n      category: \"object\",\r\n      harmonizedAttributes: []\r\n    },\r\n    \"Trafostation\": {\r\n      key: \"new-object-2\",\r\n      label: \"Trafostation\",\r\n      hoverLabel: \"AI-organized attributes for trafostations\",\r\n      category: \"object\",\r\n      harmonizedAttributes: []\r\n    },\r\n    \"Abspanner\": {\r\n      key: \"new-object-3\",\r\n      label: \"Abspanner\",\r\n      hoverLabel: \"AI-organized attributes for abspanners\",\r\n      category: \"object\",\r\n      harmonizedAttributes: []\r\n    }\r\n  };\r\n\r\n  // Map attribute name patterns to target objects\r\n  const attributeMapping = {\r\n    // Transformator-specific attributes\r\n    \"D_ANSCHLUSS\": \"Transformator\",\r\n    \"D_BETRIEBSART\": \"Transformator\",\r\n    \"D_DREHRICHTUNG\": \"Transformator\",\r\n    \"D_EINBAUART\": \"Transformator\",\r\n    \"D_KUEHLUNG\": \"Transformator\",\r\n    \"D_WICKLUNG\": \"Transformator\",\r\n    \"D_SCHALTGRUPPE\": \"Transformator\",\r\n    \"D_TRANSFORMATOR\": \"Transformator\",\r\n    \r\n    // Trafostation-specific attributes\r\n    \"D_TRAFOSTATION\": \"Trafostation\",\r\n    \"D_STATION\": \"Trafostation\",\r\n    \"D_GEBAEUDE\": \"Trafostation\",\r\n    \r\n    // General attributes that could belong to any - defaulting to Transformator\r\n    \"D_ABSTURZSICHERUNGSART\": \"Transformator\",\r\n    \"D_FABRIKAT\": \"Transformator\",\r\n    \"D_HERSTELLER\": \"Transformator\",\r\n    \"D_KLASSE\": \"Transformator\",\r\n    \"D_LEISTUNG\": \"Transformator\",\r\n    \"D_MATERIAL\": \"Transformator\",\r\n    \"D_NENNFREQUENZ\": \"Transformator\",\r\n    \"D_NENNLEISTUNG\": \"Transformator\",\r\n    \"D_NENNSPANNUNG\": \"Transformator\",\r\n    \"D_NORM\": \"Transformator\",\r\n    \"D_SPANNUNG\": \"Transformator\",\r\n    \"D_STATUS\": \"Transformator\",\r\n    \"D_TYP\": \"Transformator\"\r\n  };\r\n  \r\n  // Process each attribute using our mapping rules\r\n  attributes.forEach(attr => {\r\n    const harmonizedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\r\n    \r\n    // Find original object the attribute belonged to\r\n    const originalObjectKey = links\r\n      .filter(link => link.to === attr.key)\r\n      .map(link => link.from)[0];\r\n    \r\n    const originalObjects = nodes.filter(node => node.category === \"object\");\r\n    const originalObject = originalObjectKey ? \r\n      originalObjects.find(obj => obj.key === originalObjectKey) : null;\r\n    \r\n    // Determine the target object based on the attribute name\r\n    let targetObjectName = \"Transformator\"; // Default\r\n    \r\n    // First check for exact matches\r\n    if (attributeMapping[attr.label]) {\r\n      targetObjectName = attributeMapping[attr.label];\r\n    } else {\r\n      // Then check for prefix matches\r\n      for (const [prefix, objectName] of Object.entries(attributeMapping)) {\r\n        if (attr.label.startsWith(prefix)) {\r\n          targetObjectName = objectName;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Add to appropriate new object\r\n    const targetObject = newObjectsMap[targetObjectName];\r\n    \r\n    if (targetObject) {\r\n      addAttributeToNewObject(\r\n        targetObject,\r\n        attr,\r\n        harmonizedName,\r\n        originalObject?.label || \"Unknown\"\r\n      );\r\n    }\r\n  });\r\n  \r\n  // Convert objects map to array and filter out empty objects\r\n  const objectsArray = Object.values(newObjectsMap)\r\n    .filter(obj => obj.harmonizedAttributes.length > 0);\r\n  \r\n  // Sort objects and their attributes\r\n  objectsArray.sort((a, b) => a.label.localeCompare(b.label));\r\n  objectsArray.forEach(obj => {\r\n    obj.harmonizedAttributes.sort((a, b) => a.name.localeCompare(b.name));\r\n  });\r\n  \r\n  // Create a single cluster containing all new objects\r\n  const aiGeneratedCluster = {\r\n    key: \"ai-generated-cluster\",\r\n    label: \"AI-Generated Structure\",\r\n    category: \"system\",\r\n    hoverLabel: \"Objects reorganized based on attribute relationships\",\r\n    objects: objectsArray\r\n  };\r\n  \r\n  return objectsArray.length > 0 ? [aiGeneratedCluster] : [];\r\n}\r\n\r\n/**\r\n * Helper function to add an attribute to a new object\r\n * @param {Object} targetObject - The object to add the attribute to\r\n * @param {Object} attribute - The attribute to add\r\n * @param {string} harmonizedName - The harmonized name of the attribute\r\n * @param {string} originalObjectName - The name of the original object\r\n */\r\nfunction addAttributeToNewObject(targetObject, attribute, harmonizedName, originalObjectName) {\r\n  // Check if this harmonized attribute is already in the target object\r\n  const existingAttr = targetObject.harmonizedAttributes.find(attr => \r\n    attr.name === harmonizedName\r\n  );\r\n  \r\n  // Check if this attribute is 3NF compliant\r\n  const is3NFCompliant = attribute.hasOwnProperty('3nf_marker') \r\n    ? attribute['3nf_marker'] === 'yes'\r\n    : Math.random() > 0.5; // Simulate for demo if field is missing\r\n  \r\n  if (existingAttr) {\r\n    // Add the original attribute name if not already present\r\n    if (!existingAttr.originalAttributes.includes(attribute.label)) {\r\n      existingAttr.originalAttributes.push(attribute.label);\r\n    }\r\n    \r\n    // If any attribute is not 3NF compliant, mark the harmonized attribute as not 3NF\r\n    if (!is3NFCompliant) {\r\n      existingAttr.is3NF = false;\r\n    }\r\n    \r\n    // Make sure we track that this was moved from its original object\r\n    existingAttr.moved = true;\r\n    \r\n    // Keep track of original object if not already set\r\n    if (!existingAttr.originalObject) {\r\n      existingAttr.originalObject = originalObjectName;\r\n    }\r\n  } else {\r\n    // Create a new harmonized attribute entry\r\n    targetObject.harmonizedAttributes.push({\r\n      name: harmonizedName,\r\n      count: 1,\r\n      originalAttributes: [attribute.label],\r\n      is3NF: is3NFCompliant,\r\n      moved: true,\r\n      originalObject: originalObjectName\r\n    });\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}