{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\n\n/**\r\n * Custom hook to manage the state for the TableVisualization component\r\n */\nexport const useTableState = showHarmonisedColumnProp => {\n  _s();\n  // Pagination and sorting state\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterCategory, setFilterCategory] = useState(\"all\");\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: 'asc'\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const ROWS_PER_PAGE = 50;\n\n  // UI interaction state\n  const [draggedItem, setDraggedItem] = useState(null);\n  const [confirmPopup, setConfirmPopup] = useState({\n    isOpen: false\n  });\n  const [hoveredRow, setHoveredRow] = useState(null);\n  const [hoveredCell, setHoveredCell] = useState(null);\n\n  // Internal state for harmonised column (used if prop is not provided)\n  const [showHarmonisedColumnInternal, setShowHarmonisedColumnInternal] = useState(false);\n\n  // Refs for inputs\n  const inputRefs = useRef({});\n\n  // Reset page when filter/search changes\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchTerm, filterCategory]);\n\n  // Handle sorting\n  const handleSort = key => {\n    let direction = 'asc';\n    if (sortConfig.key === key && sortConfig.direction === 'asc') {\n      direction = 'desc';\n    }\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n\n  // Pagination handlers\n  const handleNextPage = () => {\n    setCurrentPage(prev => prev + 1);\n  };\n  const handlePrevPage = () => {\n    setCurrentPage(prev => Math.max(prev - 1, 1));\n  };\n\n  // Toggle harmonised column visibility (internal state)\n  const toggleHarmonisedColumn = () => {\n    setShowHarmonisedColumnInternal(prev => !prev);\n  };\n  return {\n    // State\n    searchTerm,\n    setSearchTerm,\n    filterCategory,\n    setFilterCategory,\n    sortConfig,\n    setSortConfig,\n    currentPage,\n    setCurrentPage,\n    draggedItem,\n    setDraggedItem,\n    confirmPopup,\n    setConfirmPopup,\n    hoveredRow,\n    setHoveredRow,\n    hoveredCell,\n    setHoveredCell,\n    inputRefs,\n    showHarmonisedColumnInternal,\n    setShowHarmonisedColumnInternal,\n    // Handlers\n    handleSort,\n    handleNextPage,\n    handlePrevPage,\n    toggleHarmonisedColumn,\n    // Constants\n    ROWS_PER_PAGE\n  };\n};\n_s(useTableState, \"UXpVCN9vwWD3NfSTjlwk0NYkSj0=\");","map":{"version":3,"names":["useState","useRef","useEffect","useTableState","showHarmonisedColumnProp","_s","searchTerm","setSearchTerm","filterCategory","setFilterCategory","sortConfig","setSortConfig","key","direction","currentPage","setCurrentPage","ROWS_PER_PAGE","draggedItem","setDraggedItem","confirmPopup","setConfirmPopup","isOpen","hoveredRow","setHoveredRow","hoveredCell","setHoveredCell","showHarmonisedColumnInternal","setShowHarmonisedColumnInternal","inputRefs","handleSort","handleNextPage","prev","handlePrevPage","Math","max","toggleHarmonisedColumn"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/TableVisualization/hooks/useTableState.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\r\n\r\n/**\r\n * Custom hook to manage the state for the TableVisualization component\r\n */\r\nexport const useTableState = (showHarmonisedColumnProp) => {\r\n    // Pagination and sorting state\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [filterCategory, setFilterCategory] = useState(\"all\");\r\n    const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const ROWS_PER_PAGE = 50;\r\n\r\n    // UI interaction state\r\n    const [draggedItem, setDraggedItem] = useState(null);\r\n    const [confirmPopup, setConfirmPopup] = useState({ isOpen: false });\r\n    const [hoveredRow, setHoveredRow] = useState(null);\r\n    const [hoveredCell, setHoveredCell] = useState(null);\r\n    \r\n    // Internal state for harmonised column (used if prop is not provided)\r\n    const [showHarmonisedColumnInternal, setShowHarmonisedColumnInternal] = useState(false);\r\n    \r\n    // Refs for inputs\r\n    const inputRefs = useRef({});\r\n\r\n    // Reset page when filter/search changes\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n    }, [searchTerm, filterCategory]);\r\n\r\n    // Handle sorting\r\n    const handleSort = (key) => {\r\n        let direction = 'asc';\r\n        if (sortConfig.key === key && sortConfig.direction === 'asc') {\r\n            direction = 'desc';\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    // Pagination handlers\r\n    const handleNextPage = () => {\r\n        setCurrentPage(prev => prev + 1);\r\n    };\r\n\r\n    const handlePrevPage = () => {\r\n        setCurrentPage(prev => Math.max(prev - 1, 1));\r\n    };\r\n\r\n    // Toggle harmonised column visibility (internal state)\r\n    const toggleHarmonisedColumn = () => {\r\n        setShowHarmonisedColumnInternal(prev => !prev);\r\n    };\r\n\r\n    return {\r\n        // State\r\n        searchTerm, \r\n        setSearchTerm,\r\n        filterCategory, \r\n        setFilterCategory,\r\n        sortConfig, \r\n        setSortConfig,\r\n        currentPage, \r\n        setCurrentPage,\r\n        draggedItem, \r\n        setDraggedItem,\r\n        confirmPopup, \r\n        setConfirmPopup,\r\n        hoveredRow, \r\n        setHoveredRow,\r\n        hoveredCell, \r\n        setHoveredCell,\r\n        inputRefs,\r\n        showHarmonisedColumnInternal,\r\n        setShowHarmonisedColumnInternal,\r\n        \r\n        // Handlers\r\n        handleSort,\r\n        handleNextPage,\r\n        handlePrevPage,\r\n        toggleHarmonisedColumn,\r\n        \r\n        // Constants\r\n        ROWS_PER_PAGE\r\n    };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;;AAEnD;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAIC,wBAAwB,IAAK;EAAAC,EAAA;EACvD;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC;IAAEY,GAAG,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAM,CAAC,CAAC;EAC7E,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMgB,aAAa,GAAG,EAAE;;EAExB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC;IAAEqB,MAAM,EAAE;EAAM,CAAC,CAAC;EACnE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAM,CAAC0B,4BAA4B,EAAEC,+BAA+B,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;;EAEvF;EACA,MAAM4B,SAAS,GAAG3B,MAAM,CAAC,CAAC,CAAC,CAAC;;EAE5B;EACAC,SAAS,CAAC,MAAM;IACZa,cAAc,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,CAACT,UAAU,EAAEE,cAAc,CAAC,CAAC;;EAEhC;EACA,MAAMqB,UAAU,GAAIjB,GAAG,IAAK;IACxB,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAIH,UAAU,CAACE,GAAG,KAAKA,GAAG,IAAIF,UAAU,CAACG,SAAS,KAAK,KAAK,EAAE;MAC1DA,SAAS,GAAG,MAAM;IACtB;IACAF,aAAa,CAAC;MAAEC,GAAG;MAAEC;IAAU,CAAC,CAAC;EACrC,CAAC;;EAED;EACA,MAAMiB,cAAc,GAAGA,CAAA,KAAM;IACzBf,cAAc,CAACgB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;EACpC,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzBjB,cAAc,CAACgB,IAAI,IAAIE,IAAI,CAACC,GAAG,CAACH,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;EACjD,CAAC;;EAED;EACA,MAAMI,sBAAsB,GAAGA,CAAA,KAAM;IACjCR,+BAA+B,CAACI,IAAI,IAAI,CAACA,IAAI,CAAC;EAClD,CAAC;EAED,OAAO;IACH;IACAzB,UAAU;IACVC,aAAa;IACbC,cAAc;IACdC,iBAAiB;IACjBC,UAAU;IACVC,aAAa;IACbG,WAAW;IACXC,cAAc;IACdE,WAAW;IACXC,cAAc;IACdC,YAAY;IACZC,eAAe;IACfE,UAAU;IACVC,aAAa;IACbC,WAAW;IACXC,cAAc;IACdG,SAAS;IACTF,4BAA4B;IAC5BC,+BAA+B;IAE/B;IACAE,UAAU;IACVC,cAAc;IACdE,cAAc;IACdG,sBAAsB;IAEtB;IACAnB;EACJ,CAAC;AACL,CAAC;AAACX,EAAA,CA/EWF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}