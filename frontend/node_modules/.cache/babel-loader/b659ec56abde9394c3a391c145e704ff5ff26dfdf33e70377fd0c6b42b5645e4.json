{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R40008\\\\Asset Model Server\\\\python\\\\bim-ai-poc\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport FileUpload from \"./components/FileUpload\"; // Importing the new component\nimport TableVisualization from \"./components/TableVisualization\";\nimport GraphVisualization from \"./components/GraphVisualization\"; // NEW LINE\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [graphData, setGraphData] = useState(null);\n  const [popup, setPopup] = useState({\n    isOpen: false,\n    key: null,\n    value: \"\"\n  });\n  const [dimensions, setDimensions] = useState({\n    width: \"100%\",\n    height: \"600px\"\n  });\n  // const diagramRef = useRef(); // COMMENTED OUT\n\n  // Handle file change\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n\n  // Handle file upload\n  const handleFileUpload = async () => {\n    if (!file) {\n      alert(\"Please select a file before uploading.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      alert(response.data.message);\n      fetchGraphData();\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      alert(\"Error uploading file. Please check the console for more details.\");\n    }\n  };\n  const fetchGraphData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\n      setGraphData(response.data);\n    } catch (error) {\n      console.error(\"Error fetching graph data:\", error);\n      alert(\"Error fetching graph data. Please check the console for more details.\");\n    }\n  };\n\n  // useEffect(() => { // COMMENTED OUT\n  //   if (graphData) {\n  //     const $ = go.GraphObject.make;\n\n  //     // Dispose of the old diagram if it exists\n  //     if (diagramRef.current) {\n  //       const existingDiagram = go.Diagram.fromDiv(diagramRef.current);\n  //       if (existingDiagram) {\n  //         existingDiagram.div = null; // Clears the previous diagram instance\n  //       }\n  //     }\n\n  //     const myDiagram = $(go.Diagram, diagramRef.current, {\n  //       \"undoManager.isEnabled\": true,\n  //       layout: $(go.TreeLayout, { angle: 0, layerSpacing: 35 }),\n  //     });\n\n  //     // Node template with hover functionality\n  //     myDiagram.nodeTemplate = $(\n  //       go.Node,\n  //       \"Auto\",\n  //       $(go.Shape, \"RoundedRectangle\", { fill: \"lightblue\" }, new go.Binding(\"fill\", \"color\")),\n  //       $(go.TextBlock, { margin: 5 }, new go.Binding(\"text\", \"label\")), // Always show the node label\n  //       $(\n  //         go.TextBlock,\n  //         {\n  //           margin: 5,\n  //           visible: false, // HoverLabel hidden by default\n  //           font: \"italic 10pt sans-serif\",\n  //           stroke: \"gray\",\n  //           name: \"HOVER_LABEL\",\n  //           background: \"lightyellow\",\n  //         },\n  //         new go.Binding(\"text\", \"hoverLabel\")\n  //       ),\n  //       {\n  //         // Mouse enter: show hover label\n  //         mouseEnter: (e, obj) => {\n  //           const hoverLabel = obj.findObject(\"HOVER_LABEL\");\n  //           if (hoverLabel) hoverLabel.visible = true;\n  //         },\n  //         // Mouse leave: hide hover label\n  //         mouseLeave: (e, obj) => {\n  //           const hoverLabel = obj.findObject(\"HOVER_LABEL\");\n  //           if (hoverLabel) hoverLabel.visible = false;\n  //         },\n  //       }\n  //     );\n\n  //     myDiagram.model = new go.GraphLinksModel(graphData.nodeDataArray, graphData.linkDataArray);\n\n  //     myDiagram.addDiagramListener(\"InitialLayoutCompleted\", () => {\n  //       const bounds = myDiagram.documentBounds;\n  //       setDimensions({\n  //         width: `${Math.ceil(bounds.width)}px`,\n  //         height: `${Math.ceil(bounds.height)}px`,\n  //       });\n  //     });\n  //   }\n  // }, [graphData]);\n\n  const openPopup = (key, currentValue) => {\n    setPopup({\n      isOpen: true,\n      key,\n      value: currentValue\n    });\n  };\n  const closePopup = () => {\n    setPopup({\n      isOpen: false,\n      key: null,\n      value: \"\"\n    });\n  };\n  const savePopupChanges = () => {\n    const updatedValue = popup.value;\n    setGraphData(prev => ({\n      ...prev,\n      nodeDataArray: prev.nodeDataArray.map(node => node.key === popup.key ? {\n        ...node,\n        hoverLabel: updatedValue\n      } : node)\n    }));\n    closePopup();\n  };\n  const handleLabelChange = (event, key) => {\n    const updatedValue = event.target.value;\n    setGraphData(prev => ({\n      ...prev,\n      nodeDataArray: prev.nodeDataArray.map(node => node.key === key ? {\n        ...node,\n        hoverLabel: updatedValue\n      } : node)\n    }));\n  };\n\n  // const renderTable = () => { // COMMENTED OUT\n  //   if (!graphData) return <p>Table will be displayed here after uploading a file.</p>;\n\n  //   const clusters = graphData.nodeDataArray.filter((node) => node.category === \"system\");\n  //   const objects = graphData.nodeDataArray.filter((node) => node.category === \"object\");\n  //   const attributes = graphData.nodeDataArray.filter((node) => node.category === \"attribute\");\n\n  //   const rows = attributes.map((attr) => {\n  //     const parentObject = objects.find((obj) =>\n  //       graphData.linkDataArray.some((link) => link.from === obj.key && link.to === attr.key)\n  //     );\n\n  //     const parentCluster = parentObject\n  //       ? clusters.find((sys) =>\n  //           graphData.linkDataArray.some((link) => link.from === sys.key && link.to === parentObject.key)\n  //         )\n  //       : null;\n\n  //     return (\n  //       <tr key={attr.key}>\n  //         <td style={{ border: \"1px solid black\", padding: \"5px\" }}>\n  //           {parentCluster?.label || \"Unlinked\"}\n  //           <br />\n  //           <input\n  //             type=\"text\"\n  //             value={parentCluster?.hoverLabel || \"\"}\n  //             onChange={(e) => handleLabelChange(e, parentCluster?.key)}\n  //           />\n  //           <button onClick={() => openPopup(parentCluster?.key, parentCluster?.hoverLabel || \"\")}>+</button>\n  //         </td>\n  //         <td style={{ border: \"1px solid black\", padding: \"5px\" }}>\n  //           {parentObject?.label || \"Unlinked\"}\n  //           <br />\n  //           <input\n  //             type=\"text\"\n  //             value={parentObject?.hoverLabel || \"\"}\n  //             onChange={(e) => handleLabelChange(e, parentObject?.key)}\n  //           />\n  //           <button onClick={() => openPopup(parentObject?.key, parentObject?.hoverLabel || \"\")}>+</button>\n  //         </td>\n  //         <td style={{ border: \"1px solid black\", padding: \"5px\" }}>\n  //           {attr.label}\n  //           <br />\n  //           <input\n  //             type=\"text\"\n  //             value={attr.hoverLabel || \"\"}\n  //             onChange={(e) => handleLabelChange(e, attr.key)}\n  //           />\n  //           <button onClick={() => openPopup(attr.key, attr.hoverLabel || \"\")}>+</button>\n  //         </td>\n  //       </tr>\n  //     );\n  //   });\n\n  //   return (\n  //     <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n  //       <thead>\n  //         <tr>\n  //           <th style={{ border: \"1px solid black\", padding: \"5px\" }}>Cluster</th>\n  //           <th style={{ border: \"1px solid black\", padding: \"5px\" }}>Object</th>\n  //           <th style={{ border: \"1px solid black\", padding: \"5px\" }}>Attribute</th>\n  //         </tr>\n  //       </thead>\n  //       <tbody>{rows}</tbody>\n  //     </table>\n  //   );\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"50%\",\n        borderRight: \"1px solid black\",\n        padding: \"10px\",\n        overflowY: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Node Table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableVisualization, {\n        graphData: graphData,\n        handleLabelChange: handleLabelChange,\n        openPopup: openPopup,\n        setGraphData: setGraphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        style: {\n          marginTop: \"10px\"\n        },\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"50%\",\n        padding: \"10px\",\n        overflow: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Graph Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GraphVisualization // NEW LINE\n      , {\n        graphData: graphData // NEW LINE\n        ,\n        dimensions: dimensions // NEW LINE\n        ,\n        setDimensions: setDimensions // NEW LINE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 10\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), popup.isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        background: \"white\",\n        border: \"1px solid black\",\n        padding: \"20px\",\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Label\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"5\",\n        cols: \"40\",\n        value: popup.value,\n        onChange: e => setPopup({\n          ...popup,\n          value: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: savePopupChanges,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closePopup,\n        style: {\n          marginLeft: \"10px\"\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"5IKpePQxvJh5/k/KEqJHMgMWRzM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","FileUpload","TableVisualization","GraphVisualization","jsxDEV","_jsxDEV","App","_s","file","setFile","graphData","setGraphData","popup","setPopup","isOpen","key","value","dimensions","setDimensions","width","height","handleFileChange","event","target","files","handleFileUpload","alert","formData","FormData","append","response","post","headers","data","message","fetchGraphData","error","console","get","openPopup","currentValue","closePopup","savePopupChanges","updatedValue","prev","nodeDataArray","map","node","hoverLabel","handleLabelChange","style","display","children","borderRight","padding","overflowY","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginTop","overflow","type","onChange","position","top","left","transform","background","border","zIndex","rows","cols","e","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport FileUpload from \"./components/FileUpload\"; // Importing the new component\r\nimport TableVisualization from \"./components/TableVisualization\";\r\nimport GraphVisualization from \"./components/GraphVisualization\"; // NEW LINE\r\n\r\nconst App = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [graphData, setGraphData] = useState(null);\r\n  const [popup, setPopup] = useState({ isOpen: false, key: null, value: \"\" });\r\n  const [dimensions, setDimensions] = useState({ width: \"100%\", height: \"600px\" });\r\n  // const diagramRef = useRef(); // COMMENTED OUT\r\n\r\n  // Handle file change\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  // Handle file upload\r\n  const handleFileUpload = async () => {\r\n    if (!file) {\r\n      alert(\"Please select a file before uploading.\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n      alert(response.data.message);\r\n      fetchGraphData();\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      alert(\"Error uploading file. Please check the console for more details.\");\r\n    }\r\n  };\r\n\r\n  const fetchGraphData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\r\n      setGraphData(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching graph data:\", error);\r\n      alert(\"Error fetching graph data. Please check the console for more details.\");\r\n    }\r\n  };\r\n\r\n  // useEffect(() => { // COMMENTED OUT\r\n  //   if (graphData) {\r\n  //     const $ = go.GraphObject.make;\r\n\r\n  //     // Dispose of the old diagram if it exists\r\n  //     if (diagramRef.current) {\r\n  //       const existingDiagram = go.Diagram.fromDiv(diagramRef.current);\r\n  //       if (existingDiagram) {\r\n  //         existingDiagram.div = null; // Clears the previous diagram instance\r\n  //       }\r\n  //     }\r\n\r\n  //     const myDiagram = $(go.Diagram, diagramRef.current, {\r\n  //       \"undoManager.isEnabled\": true,\r\n  //       layout: $(go.TreeLayout, { angle: 0, layerSpacing: 35 }),\r\n  //     });\r\n\r\n  //     // Node template with hover functionality\r\n  //     myDiagram.nodeTemplate = $(\r\n  //       go.Node,\r\n  //       \"Auto\",\r\n  //       $(go.Shape, \"RoundedRectangle\", { fill: \"lightblue\" }, new go.Binding(\"fill\", \"color\")),\r\n  //       $(go.TextBlock, { margin: 5 }, new go.Binding(\"text\", \"label\")), // Always show the node label\r\n  //       $(\r\n  //         go.TextBlock,\r\n  //         {\r\n  //           margin: 5,\r\n  //           visible: false, // HoverLabel hidden by default\r\n  //           font: \"italic 10pt sans-serif\",\r\n  //           stroke: \"gray\",\r\n  //           name: \"HOVER_LABEL\",\r\n  //           background: \"lightyellow\",\r\n  //         },\r\n  //         new go.Binding(\"text\", \"hoverLabel\")\r\n  //       ),\r\n  //       {\r\n  //         // Mouse enter: show hover label\r\n  //         mouseEnter: (e, obj) => {\r\n  //           const hoverLabel = obj.findObject(\"HOVER_LABEL\");\r\n  //           if (hoverLabel) hoverLabel.visible = true;\r\n  //         },\r\n  //         // Mouse leave: hide hover label\r\n  //         mouseLeave: (e, obj) => {\r\n  //           const hoverLabel = obj.findObject(\"HOVER_LABEL\");\r\n  //           if (hoverLabel) hoverLabel.visible = false;\r\n  //         },\r\n  //       }\r\n  //     );\r\n\r\n  //     myDiagram.model = new go.GraphLinksModel(graphData.nodeDataArray, graphData.linkDataArray);\r\n\r\n  //     myDiagram.addDiagramListener(\"InitialLayoutCompleted\", () => {\r\n  //       const bounds = myDiagram.documentBounds;\r\n  //       setDimensions({\r\n  //         width: `${Math.ceil(bounds.width)}px`,\r\n  //         height: `${Math.ceil(bounds.height)}px`,\r\n  //       });\r\n  //     });\r\n  //   }\r\n  // }, [graphData]);\r\n\r\n  const openPopup = (key, currentValue) => {\r\n    setPopup({ isOpen: true, key, value: currentValue });\r\n  };\r\n\r\n  const closePopup = () => {\r\n    setPopup({ isOpen: false, key: null, value: \"\" });\r\n  };\r\n\r\n  const savePopupChanges = () => {\r\n    const updatedValue = popup.value;\r\n    setGraphData((prev) => ({\r\n      ...prev,\r\n      nodeDataArray: prev.nodeDataArray.map((node) =>\r\n        node.key === popup.key ? { ...node, hoverLabel: updatedValue } : node\r\n      ),\r\n    }));\r\n    closePopup();\r\n  };\r\n\r\n  const handleLabelChange = (event, key) => {\r\n    const updatedValue = event.target.value;\r\n    setGraphData((prev) => ({\r\n      ...prev,\r\n      nodeDataArray: prev.nodeDataArray.map((node) =>\r\n        node.key === key ? { ...node, hoverLabel: updatedValue } : node\r\n      ),\r\n    }));\r\n  };\r\n\r\n  // const renderTable = () => { // COMMENTED OUT\r\n  //   if (!graphData) return <p>Table will be displayed here after uploading a file.</p>;\r\n\r\n  //   const clusters = graphData.nodeDataArray.filter((node) => node.category === \"system\");\r\n  //   const objects = graphData.nodeDataArray.filter((node) => node.category === \"object\");\r\n  //   const attributes = graphData.nodeDataArray.filter((node) => node.category === \"attribute\");\r\n\r\n  //   const rows = attributes.map((attr) => {\r\n  //     const parentObject = objects.find((obj) =>\r\n  //       graphData.linkDataArray.some((link) => link.from === obj.key && link.to === attr.key)\r\n  //     );\r\n\r\n  //     const parentCluster = parentObject\r\n  //       ? clusters.find((sys) =>\r\n  //           graphData.linkDataArray.some((link) => link.from === sys.key && link.to === parentObject.key)\r\n  //         )\r\n  //       : null;\r\n\r\n  //     return (\r\n  //       <tr key={attr.key}>\r\n  //         <td style={{ border: \"1px solid black\", padding: \"5px\" }}>\r\n  //           {parentCluster?.label || \"Unlinked\"}\r\n  //           <br />\r\n  //           <input\r\n  //             type=\"text\"\r\n  //             value={parentCluster?.hoverLabel || \"\"}\r\n  //             onChange={(e) => handleLabelChange(e, parentCluster?.key)}\r\n  //           />\r\n  //           <button onClick={() => openPopup(parentCluster?.key, parentCluster?.hoverLabel || \"\")}>+</button>\r\n  //         </td>\r\n  //         <td style={{ border: \"1px solid black\", padding: \"5px\" }}>\r\n  //           {parentObject?.label || \"Unlinked\"}\r\n  //           <br />\r\n  //           <input\r\n  //             type=\"text\"\r\n  //             value={parentObject?.hoverLabel || \"\"}\r\n  //             onChange={(e) => handleLabelChange(e, parentObject?.key)}\r\n  //           />\r\n  //           <button onClick={() => openPopup(parentObject?.key, parentObject?.hoverLabel || \"\")}>+</button>\r\n  //         </td>\r\n  //         <td style={{ border: \"1px solid black\", padding: \"5px\" }}>\r\n  //           {attr.label}\r\n  //           <br />\r\n  //           <input\r\n  //             type=\"text\"\r\n  //             value={attr.hoverLabel || \"\"}\r\n  //             onChange={(e) => handleLabelChange(e, attr.key)}\r\n  //           />\r\n  //           <button onClick={() => openPopup(attr.key, attr.hoverLabel || \"\")}>+</button>\r\n  //         </td>\r\n  //       </tr>\r\n  //     );\r\n  //   });\r\n\r\n  //   return (\r\n  //     <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\r\n  //       <thead>\r\n  //         <tr>\r\n  //           <th style={{ border: \"1px solid black\", padding: \"5px\" }}>Cluster</th>\r\n  //           <th style={{ border: \"1px solid black\", padding: \"5px\" }}>Object</th>\r\n  //           <th style={{ border: \"1px solid black\", padding: \"5px\" }}>Attribute</th>\r\n  //         </tr>\r\n  //       </thead>\r\n  //       <tbody>{rows}</tbody>\r\n  //     </table>\r\n  //   );\r\n  // };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", width: \"100%\", height: \"100%\" }}>\r\n      <div style={{ width: \"50%\", borderRight: \"1px solid black\", padding: \"10px\", overflowY: \"auto\" }}>\r\n        <h2>Node Table</h2>\r\n        <TableVisualization\r\n          graphData={graphData}\r\n          handleLabelChange={handleLabelChange}\r\n          openPopup={openPopup}\r\n          setGraphData={setGraphData}\r\n        />\r\n        <button onClick={handleFileUpload} style={{ marginTop: \"10px\" }}>\r\n          Save Changes\r\n        </button>\r\n      </div>\r\n      <div style={{ width: \"50%\", padding: \"10px\", overflow: \"auto\" }}>\r\n        <h2>Graph Visualization</h2>\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <button onClick={handleFileUpload}>Upload File</button>\r\n        {/* <div // COMMENTED OUT\r\n          ref={diagramRef}\r\n          style={{\r\n            width: dimensions.width,\r\n            height: dimensions.height,\r\n            border: \"1px solid black\",\r\n          }}\r\n        >\r\n          {!graphData && <p>Graph will be displayed here after uploading a file.</p>}\r\n        </div> */}\r\n         <GraphVisualization // NEW LINE\r\n          graphData={graphData} // NEW LINE\r\n          dimensions={dimensions} // NEW LINE\r\n          setDimensions={setDimensions} // NEW LINE\r\n        /> {/* NEW LINE */}\r\n      </div>\r\n\r\n      {/* Popup Modal */}\r\n      {popup.isOpen && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            background: \"white\",\r\n            border: \"1px solid black\",\r\n            padding: \"20px\",\r\n            zIndex: 1000,\r\n          }}\r\n        >\r\n          <h3>Edit Label</h3>\r\n          <textarea\r\n            rows=\"5\"\r\n            cols=\"40\"\r\n            value={popup.value}\r\n            onChange={(e) => setPopup({ ...popup, value: e.target.value })}\r\n          />\r\n          <br />\r\n          <button onClick={savePopupChanges}>Save</button>\r\n          <button onClick={closePopup} style={{ marginLeft: \"10px\" }}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}