{"ast":null,"code":"var _s = $RefreshSig$();\n// Import the useAppState hook\nimport useAppState from './useAppState';\nconst useFileUpload = (setGraphData, showNotification) => {\n  _s();\n  // ... existing code\n\n  const {\n    showConfirmDialog,\n    startAIProcessing\n  } = useAppState();\n\n  // Modify handleFileUpload to use confirmation\n  const handleFileUpload = async (notification = null) => {\n    if (!file) {\n      if (notification) {\n        notification(\"Please select a file before uploading.\", \"error\");\n      }\n      return;\n    }\n    showConfirmDialog({\n      title: \"Upload and Analyze File?\",\n      message: \"The AI will analyze your data structure and prepare it for visualization. This process will take a moment.\",\n      confirmText: \"Upload and Analyze\",\n      onConfirm: async () => {\n        setIsLoading(true);\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        try {\n          // First upload the file\n          const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\"\n            }\n          });\n\n          // Then start AI processing\n          const aiProcess = startAIProcessing(\"Analyzing file structure...\");\n\n          // Simulate AI progress in stages\n          let progress = 0;\n          const interval = setInterval(() => {\n            progress += 5;\n\n            // Update message at certain thresholds\n            if (progress === 20) {\n              aiProcess.updateProgress(progress, \"Identifying data entities and relationships...\");\n            } else if (progress === 40) {\n              aiProcess.updateProgress(progress, \"Processing attribute characteristics...\");\n            } else if (progress === 60) {\n              aiProcess.updateProgress(progress, \"Analyzing semantic connections...\");\n            } else if (progress === 80) {\n              aiProcess.updateProgress(progress, \"Finalizing data structure...\");\n            }\n            aiProcess.updateProgress(progress);\n            if (progress >= 100) {\n              clearInterval(interval);\n              aiProcess.complete();\n\n              // Fetch graph data after AI processing completes\n              fetchGraphData();\n              if (notification) {\n                notification(response.data.message, \"success\");\n              }\n            }\n          }, 100);\n        } catch (error) {\n          console.error(\"Error uploading file:\", error);\n          let errorMessage = \"Error uploading file.\";\n          if (error.response && error.response.data) {\n            errorMessage += ` ${error.response.data.detail || error.response.data.message}`;\n          }\n          if (notification) {\n            notification(errorMessage, \"error\");\n          }\n          setIsLoading(false);\n        }\n      }\n    });\n  };\n\n  // ... rest of your code\n\n  return {\n    // ... existing returns\n  };\n};\n_s(useFileUpload, \"vAbeCt83y+ctlzJGzvryA9Rz26Y=\", false, function () {\n  return [useAppState];\n});","map":{"version":3,"names":["useAppState","useFileUpload","setGraphData","showNotification","_s","showConfirmDialog","startAIProcessing","handleFileUpload","notification","file","title","message","confirmText","onConfirm","setIsLoading","formData","FormData","append","response","axios","post","headers","aiProcess","progress","interval","setInterval","updateProgress","clearInterval","complete","fetchGraphData","data","error","console","errorMessage","detail"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useFileUpload.js"],"sourcesContent":["// Import the useAppState hook\r\nimport useAppState from './useAppState';\r\n\r\nconst useFileUpload = (setGraphData, showNotification) => {\r\n  // ... existing code\r\n  \r\n  const { showConfirmDialog, startAIProcessing } = useAppState();\r\n\r\n  // Modify handleFileUpload to use confirmation\r\n  const handleFileUpload = async (notification = null) => {\r\n    if (!file) {\r\n      if (notification) {\r\n        notification(\"Please select a file before uploading.\", \"error\");\r\n      }\r\n      return;\r\n    }\r\n\r\n    showConfirmDialog({\r\n      title: \"Upload and Analyze File?\",\r\n      message: \"The AI will analyze your data structure and prepare it for visualization. This process will take a moment.\",\r\n      confirmText: \"Upload and Analyze\",\r\n      onConfirm: async () => {\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        \r\n        try {\r\n          // First upload the file\r\n          const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          });\r\n          \r\n          // Then start AI processing\r\n          const aiProcess = startAIProcessing(\"Analyzing file structure...\");\r\n          \r\n          // Simulate AI progress in stages\r\n          let progress = 0;\r\n          const interval = setInterval(() => {\r\n            progress += 5;\r\n            \r\n            // Update message at certain thresholds\r\n            if (progress === 20) {\r\n              aiProcess.updateProgress(progress, \"Identifying data entities and relationships...\");\r\n            } else if (progress === 40) {\r\n              aiProcess.updateProgress(progress, \"Processing attribute characteristics...\");\r\n            } else if (progress === 60) {\r\n              aiProcess.updateProgress(progress, \"Analyzing semantic connections...\");\r\n            } else if (progress === 80) {\r\n              aiProcess.updateProgress(progress, \"Finalizing data structure...\");\r\n            }\r\n            \r\n            aiProcess.updateProgress(progress);\r\n            \r\n            if (progress >= 100) {\r\n              clearInterval(interval);\r\n              aiProcess.complete();\r\n              \r\n              // Fetch graph data after AI processing completes\r\n              fetchGraphData();\r\n              \r\n              if (notification) {\r\n                notification(response.data.message, \"success\");\r\n              }\r\n            }\r\n          }, 100);\r\n          \r\n        } catch (error) {\r\n          console.error(\"Error uploading file:\", error);\r\n          let errorMessage = \"Error uploading file.\";\r\n          if (error.response && error.response.data) {\r\n            errorMessage += ` ${error.response.data.detail || error.response.data.message}`;\r\n          }\r\n          if (notification) {\r\n            notification(errorMessage, \"error\");\r\n          }\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  // ... rest of your code\r\n\r\n  return {\r\n    // ... existing returns\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}