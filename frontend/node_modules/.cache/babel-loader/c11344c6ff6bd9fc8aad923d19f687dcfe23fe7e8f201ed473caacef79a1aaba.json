{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nconst useDragDrop = (graphData, setGraphData, showNotification) => {\n  _s();\n  const [draggedItem, setDraggedItem] = useState(null);\n\n  // Handle drag start\n  const handleDragStart = (event, key, category) => {\n    event.dataTransfer.setData(\"text/plain\", key);\n    event.dataTransfer.setData(\"category\", category);\n    setDraggedItem(key);\n    if (event.target.classList) {\n      event.target.classList.add(\"dragging\");\n    }\n  };\n\n  // Handle drag end\n  const handleDragEnd = event => {\n    if (event.target.classList) {\n      event.target.classList.remove(\"dragging\");\n    }\n    setDraggedItem(null);\n  };\n\n  // Handle drag over\n  const handleDragOver = event => {\n    event.preventDefault();\n    if (event.currentTarget.classList) {\n      event.currentTarget.classList.add(\"drop-target\");\n    }\n  };\n\n  // Handle drag leave\n  const handleDragLeave = event => {\n    if (event.currentTarget.classList) {\n      event.currentTarget.classList.remove(\"drop-target\");\n    }\n  };\n\n  // Process drag drop\n  const processDragDrop = async (event, targetKey, targetCategory) => {\n    event.preventDefault();\n    if (event.currentTarget.classList) {\n      event.currentTarget.classList.remove(\"drop-target\");\n    }\n    const sourceKey = event.dataTransfer.getData(\"text/plain\");\n    const sourceCategory = event.dataTransfer.getData(\"category\");\n    if (sourceKey && sourceKey !== targetKey) {\n      setGraphData(prev => {\n        let updatedNodeDataArray = [...prev.nodeDataArray];\n        let updatedLinkDataArray = [...prev.linkDataArray];\n        const sourceNode = prev.nodeDataArray.find(node => node.key === sourceKey);\n        const targetNode = prev.nodeDataArray.find(node => node.key === targetKey);\n        if (sourceNode && targetNode) {\n          // Existing link removal and creation logic\n          updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\n          if (sourceNode.category === \"attribute\" && targetNode.category === \"object\") {\n            updatedLinkDataArray.push({\n              from: targetKey,\n              to: sourceKey\n            });\n          } else if (sourceNode.category === \"object\" && targetNode.category === \"system\") {\n            updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\n            updatedLinkDataArray.push({\n              from: targetKey,\n              to: sourceKey\n            });\n          }\n        }\n        return {\n          ...prev,\n          nodeDataArray: updatedNodeDataArray,\n          linkDataArray: updatedLinkDataArray\n        };\n      });\n\n      // Send drag-drop changes to backend\n      try {\n        const sourceNode = graphData.nodeDataArray.find(node => node.key === sourceKey);\n        const targetNode = graphData.nodeDataArray.find(node => node.key === targetKey);\n        if (sourceNode && targetNode) {\n          const response = await axios.post(\"http://localhost:8000/apply-drag-drop/\", {\n            source: sourceKey,\n            target: targetKey,\n            sourceType: sourceNode.category,\n            targetType: targetNode.category\n          });\n          if (response.data.message === \"Drag-and-drop operation completed successfully\") {\n            if (showNotification) {\n              showNotification(\"Item moved successfully\", \"success\");\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"Error applying drag and drop:\", error);\n        let errorMessage = \"Error moving item.\";\n        if (error.response && error.response.data) {\n          errorMessage += ` ${error.response.data.detail || ''}`;\n        }\n        if (showNotification) {\n          showNotification(errorMessage, \"error\");\n        }\n      }\n    }\n  };\n  return {\n    draggedItem,\n    handleDragStart,\n    handleDragEnd,\n    handleDragOver,\n    handleDragLeave,\n    processDragDrop\n  };\n};\n_s(useDragDrop, \"Jfi5gjROj2wfpildXdjJCksiokA=\");\nexport default useDragDrop;","map":{"version":3,"names":["useState","axios","useDragDrop","graphData","setGraphData","showNotification","_s","draggedItem","setDraggedItem","handleDragStart","event","key","category","dataTransfer","setData","target","classList","add","handleDragEnd","remove","handleDragOver","preventDefault","currentTarget","handleDragLeave","processDragDrop","targetKey","targetCategory","sourceKey","getData","sourceCategory","prev","updatedNodeDataArray","nodeDataArray","updatedLinkDataArray","linkDataArray","sourceNode","find","node","targetNode","filter","link","to","push","from","response","post","source","sourceType","targetType","data","message","error","console","errorMessage","detail"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useDragDrop.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useDragDrop = (graphData, setGraphData, showNotification) => {\r\n    const [draggedItem, setDraggedItem] = useState(null);\r\n\r\n    // Handle drag start\r\n    const handleDragStart = (event, key, category) => {\r\n        event.dataTransfer.setData(\"text/plain\", key);\r\n        event.dataTransfer.setData(\"category\", category);\r\n        setDraggedItem(key);\r\n        \r\n        if (event.target.classList) {\r\n            event.target.classList.add(\"dragging\");\r\n        }\r\n    };\r\n\r\n    // Handle drag end\r\n    const handleDragEnd = (event) => {\r\n        if (event.target.classList) {\r\n            event.target.classList.remove(\"dragging\");\r\n        }\r\n        setDraggedItem(null);\r\n    };\r\n\r\n    // Handle drag over\r\n    const handleDragOver = (event) => {\r\n        event.preventDefault();\r\n        if (event.currentTarget.classList) {\r\n            event.currentTarget.classList.add(\"drop-target\");\r\n        }\r\n    };\r\n\r\n    // Handle drag leave\r\n    const handleDragLeave = (event) => {\r\n        if (event.currentTarget.classList) {\r\n            event.currentTarget.classList.remove(\"drop-target\");\r\n        }\r\n    };\r\n\r\n    // Process drag drop\r\n    const processDragDrop = async (event, targetKey, targetCategory) => {\r\n        event.preventDefault();\r\n        \r\n        if (event.currentTarget.classList) {\r\n            event.currentTarget.classList.remove(\"drop-target\");\r\n        }\r\n        \r\n        const sourceKey = event.dataTransfer.getData(\"text/plain\");\r\n        const sourceCategory = event.dataTransfer.getData(\"category\");\r\n\r\n        if (sourceKey && sourceKey !== targetKey) {\r\n            setGraphData((prev) => {\r\n                let updatedNodeDataArray = [...prev.nodeDataArray];\r\n                let updatedLinkDataArray = [...prev.linkDataArray];\r\n\r\n                const sourceNode = prev.nodeDataArray.find(node => node.key === sourceKey);\r\n                const targetNode = prev.nodeDataArray.find(node => node.key === targetKey);\r\n                \r\n                if (sourceNode && targetNode) {\r\n                    // Existing link removal and creation logic\r\n                    updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\r\n\r\n                    if (sourceNode.category === \"attribute\" && targetNode.category === \"object\") {\r\n                        updatedLinkDataArray.push({ from: targetKey, to: sourceKey });\r\n                    }\r\n                    else if (sourceNode.category === \"object\" && targetNode.category === \"system\") {\r\n                        updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\r\n                        updatedLinkDataArray.push({ from: targetKey, to: sourceKey });\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    ...prev,\r\n                    nodeDataArray: updatedNodeDataArray,\r\n                    linkDataArray: updatedLinkDataArray,\r\n                };\r\n            });\r\n\r\n            // Send drag-drop changes to backend\r\n            try {\r\n                const sourceNode = graphData.nodeDataArray.find(node => node.key === sourceKey);\r\n                const targetNode = graphData.nodeDataArray.find(node => node.key === targetKey);\r\n                \r\n                if (sourceNode && targetNode) {\r\n                    const response = await axios.post(\"http://localhost:8000/apply-drag-drop/\", {\r\n                        source: sourceKey,\r\n                        target: targetKey,\r\n                        sourceType: sourceNode.category,\r\n                        targetType: targetNode.category\r\n                    });\r\n                    \r\n                    if (response.data.message === \"Drag-and-drop operation completed successfully\") {\r\n                        if (showNotification) {\r\n                            showNotification(\"Item moved successfully\", \"success\");\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error applying drag and drop:\", error);\r\n                let errorMessage = \"Error moving item.\";\r\n                if (error.response && error.response.data) {\r\n                    errorMessage += ` ${error.response.data.detail || ''}`;\r\n                }\r\n                if (showNotification) {\r\n                    showNotification(errorMessage, \"error\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        draggedItem,\r\n        handleDragStart,\r\n        handleDragEnd,\r\n        handleDragOver,\r\n        handleDragLeave,\r\n        processDragDrop\r\n    };\r\n};\r\n\r\nexport default useDragDrop;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}