{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nconst useAppState = () => {\n  _s();\n  const [graphData, setGraphData] = useState(null);\n  const [popup, setPopup] = useState({\n    isOpen: false,\n    key: null,\n    value: \"\",\n    name: \"\"\n  });\n  const [dimensions, setDimensions] = useState({\n    width: \"100%\",\n    height: \"600px\"\n  });\n  const [showHarmonisedColumn, setShowHarmonisedColumn] = useState(false);\n  const [showDiagram, setShowDiagram] = useState(false);\n  const [isDiagramMinimized, setIsDiagramMinimized] = useState(false);\n\n  // Popup management functions\n  const openPopup = (key, currentValue, currentName) => {\n    setPopup({\n      isOpen: true,\n      key,\n      value: currentValue || \"\",\n      name: currentName || \"\"\n    });\n  };\n  const closePopup = () => {\n    setPopup({\n      isOpen: false,\n      key: null,\n      value: \"\",\n      name: \"\"\n    });\n  };\n  const savePopupChanges = showNotification => {\n    const updatedValue = popup.value;\n    const updatedName = popup.name;\n    setGraphData(prev => ({\n      ...prev,\n      nodeDataArray: prev.nodeDataArray.map(node => node.key === popup.key ? {\n        ...node,\n        hoverLabel: updatedValue,\n        label: updatedName\n      } : node)\n    }));\n    closePopup();\n\n    // Show saving indicator\n    if (showNotification) {\n      showNotification(\"Changes saved successfully.\", \"success\");\n    }\n  };\n  const handleLabelChange = (event, key) => {\n    const updatedValue = event.target.value;\n    setGraphData(prev => ({\n      ...prev,\n      nodeDataArray: prev.nodeDataArray.map(node => node.key === key ? {\n        ...node,\n        hoverLabel: updatedValue\n      } : node)\n    }));\n  };\n\n  // Load attribute descriptions\n  const loadAttributeDescriptions = async (isLoading, showNotification) => {\n    if (isLoading) return;\n    try {\n      // First tell the backend to prepare descriptions\n      await axios.post(\"http://localhost:8000/load-descriptions/\");\n\n      // Then fetch the graph data with descriptions\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\n      setGraphData(response.data);\n      if (showNotification) {\n        showNotification(\"Definitions generated successfully!\", \"success\");\n      }\n    } catch (error) {\n      console.error(\"Error generating definitions:\", error);\n      if (showNotification) {\n        showNotification(\"Error generating definitions.\", \"error\");\n      }\n    }\n  };\n\n  // Toggle harmonised column visibility\n  const toggleHarmonisedColumn = () => {\n    setShowHarmonisedColumn(prev => !prev);\n  };\n\n  // Toggle diagram visibility\n  const toggleDiagram = showNotification => {\n    if (!graphData && showNotification) {\n      showNotification(\"Please upload data first.\", \"error\");\n      return;\n    }\n    setShowDiagram(prev => !prev);\n    setIsDiagramMinimized(false);\n  };\n\n  // Minimize/maximize diagram\n  const toggleMinimizeDiagram = () => {\n    setIsDiagramMinimized(prev => !prev);\n  };\n  return {\n    graphData,\n    setGraphData,\n    popup,\n    setPopup,\n    dimensions,\n    setDimensions,\n    showHarmonisedColumn,\n    setShowHarmonisedColumn,\n    showDiagram,\n    setShowDiagram,\n    isDiagramMinimized,\n    setIsDiagramMinimized,\n    handleLabelChange,\n    openPopup,\n    closePopup,\n    savePopupChanges,\n    loadAttributeDescriptions,\n    toggleHarmonisedColumn,\n    toggleDiagram,\n    toggleMinimizeDiagram\n  };\n};\n_s(useAppState, \"zEz+eVhskJUhh8tM9pHu9tfc7a4=\");\nexport default useAppState;","map":{"version":3,"names":["useState","axios","useAppState","_s","graphData","setGraphData","popup","setPopup","isOpen","key","value","name","dimensions","setDimensions","width","height","showHarmonisedColumn","setShowHarmonisedColumn","showDiagram","setShowDiagram","isDiagramMinimized","setIsDiagramMinimized","openPopup","currentValue","currentName","closePopup","savePopupChanges","showNotification","updatedValue","updatedName","prev","nodeDataArray","map","node","hoverLabel","label","handleLabelChange","event","target","loadAttributeDescriptions","isLoading","post","response","get","data","error","console","toggleHarmonisedColumn","toggleDiagram","toggleMinimizeDiagram"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useAppState.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useAppState = () => {\r\n    const [graphData, setGraphData] = useState(null);\r\n    const [popup, setPopup] = useState({ isOpen: false, key: null, value: \"\", name: \"\" });\r\n    const [dimensions, setDimensions] = useState({ width: \"100%\", height: \"600px\" });\r\n    const [showHarmonisedColumn, setShowHarmonisedColumn] = useState(false);\r\n    const [showDiagram, setShowDiagram] = useState(false);\r\n    const [isDiagramMinimized, setIsDiagramMinimized] = useState(false);\r\n\r\n    // Popup management functions\r\n    const openPopup = (key, currentValue, currentName) => {\r\n        setPopup({ isOpen: true, key, value: currentValue || \"\", name: currentName || \"\" });\r\n    };\r\n\r\n    const closePopup = () => {\r\n        setPopup({ isOpen: false, key: null, value: \"\", name: \"\" });\r\n    };\r\n\r\n    const savePopupChanges = (showNotification) => {\r\n        const updatedValue = popup.value;\r\n        const updatedName = popup.name;\r\n        \r\n        setGraphData((prev) => ({\r\n            ...prev,\r\n            nodeDataArray: prev.nodeDataArray.map((node) =>\r\n                node.key === popup.key ? { ...node, hoverLabel: updatedValue, label: updatedName } : node\r\n            ),\r\n        }));\r\n        \r\n        closePopup();\r\n        \r\n        // Show saving indicator\r\n        if (showNotification) {\r\n            showNotification(\"Changes saved successfully.\", \"success\");\r\n        }\r\n    };\r\n\r\n    const handleLabelChange = (event, key) => {\r\n        const updatedValue = event.target.value;\r\n        setGraphData((prev) => ({\r\n            ...prev,\r\n            nodeDataArray: prev.nodeDataArray.map((node) =>\r\n                node.key === key ? { ...node, hoverLabel: updatedValue } : node\r\n            ),\r\n        }));\r\n    };\r\n\r\n    // Load attribute descriptions\r\n    const loadAttributeDescriptions = async (isLoading, showNotification) => {\r\n        if (isLoading) return;\r\n        \r\n        try {\r\n            // First tell the backend to prepare descriptions\r\n            await axios.post(\"http://localhost:8000/load-descriptions/\");\r\n            \r\n            // Then fetch the graph data with descriptions\r\n            const response = await axios.get(\"http://localhost:8000/graph-data/\");\r\n            setGraphData(response.data);\r\n            \r\n            if (showNotification) {\r\n                showNotification(\"Definitions generated successfully!\", \"success\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error generating definitions:\", error);\r\n            if (showNotification) {\r\n                showNotification(\"Error generating definitions.\", \"error\");\r\n            }\r\n        }\r\n    };\r\n\r\n    // Toggle harmonised column visibility\r\n    const toggleHarmonisedColumn = () => {\r\n        setShowHarmonisedColumn(prev => !prev);\r\n    };\r\n\r\n    // Toggle diagram visibility\r\n    const toggleDiagram = (showNotification) => {\r\n        if (!graphData && showNotification) {\r\n            showNotification(\"Please upload data first.\", \"error\");\r\n            return;\r\n        }\r\n        setShowDiagram(prev => !prev);\r\n        setIsDiagramMinimized(false);\r\n    };\r\n\r\n    // Minimize/maximize diagram\r\n    const toggleMinimizeDiagram = () => {\r\n        setIsDiagramMinimized(prev => !prev);\r\n    };\r\n\r\n    return {\r\n        graphData, \r\n        setGraphData,\r\n        popup, \r\n        setPopup,\r\n        dimensions, \r\n        setDimensions,\r\n        showHarmonisedColumn, \r\n        setShowHarmonisedColumn,\r\n        showDiagram, \r\n        setShowDiagram,\r\n        isDiagramMinimized, \r\n        setIsDiagramMinimized,\r\n        handleLabelChange,\r\n        openPopup,\r\n        closePopup,\r\n        savePopupChanges,\r\n        loadAttributeDescriptions,\r\n        toggleHarmonisedColumn,\r\n        toggleDiagram,\r\n        toggleMinimizeDiagram\r\n    };\r\n};\r\n\r\nexport default useAppState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}