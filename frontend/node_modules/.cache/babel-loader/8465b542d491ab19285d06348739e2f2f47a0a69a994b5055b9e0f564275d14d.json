{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R40008\\\\Asset Model Server\\\\python\\\\bim-ai-poc\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport * as go from \"gojs\"; // Import GoJS for diagram visualization\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [graphData, setGraphData] = useState(null);\n  const [dimensions, setDimensions] = useState({\n    width: \"100%\",\n    height: \"600px\"\n  });\n  const diagramRef = useRef();\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleFileUpload = async () => {\n    if (!file) {\n      alert(\"Please select a file before uploading.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      alert(response.data.message);\n      fetchGraphData();\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      alert(\"Error uploading file. Please check the console for more details.\");\n    }\n  };\n  const fetchGraphData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\n      setGraphData(response.data);\n    } catch (error) {\n      console.error(\"Error fetching graph data:\", error);\n      alert(\"Error fetching graph data. Please check the console for more details.\");\n    }\n  };\n  useEffect(() => {\n    if (graphData) {\n      const $ = go.GraphObject.make;\n\n      // Initialize the GoJS diagram\n      const myDiagram = $(go.Diagram, diagramRef.current, {\n        \"undoManager.isEnabled\": true,\n        layout: $(go.TreeLayout, {\n          angle: 0,\n          layerSpacing: 35\n        }) // Left-to-right layout\n      });\n\n      // Define node template with dynamic width based on label length\n      myDiagram.nodeTemplate = $(go.Node, \"Auto\", $(go.Shape, \"RoundedRectangle\", {\n        fill: \"lightblue\"\n      }), $(go.Panel, \"Vertical\",\n      // Arrange the text blocks vertically\n      {\n        margin: 5\n      }, $(go.TextBlock, {\n        margin: 2,\n        editable: true,\n        font: \"bold 12pt sans-serif\",\n        width: NaN // Allow dynamic sizing\n      }, new go.Binding(\"text\", \"label\").makeTwoWay(),\n      // Main label (name)\n      new go.Binding(\"width\", \"label\", text => Math.min(text.length * 12 * 2, 300)) // Max width: twice the length in pixels, capped at 300px\n      ), $(go.TextBlock, {\n        margin: 2,\n        font: \"italic 10pt sans-serif\",\n        stroke: \"gray\",\n        wrap: go.TextBlock.WrapFit,\n        // Allow text wrapping if too long\n        textAlign: \"center\"\n      }, new go.Binding(\"text\", \"hoverLabel\") // Secondary label (e.g., description)\n      )));\n\n      // Set the diagram's model with nodes and links\n      myDiagram.model = new go.GraphLinksModel(graphData.nodeDataArray, graphData.linkDataArray);\n\n      // Adjust container size based on the graph dimensions\n      myDiagram.addDiagramListener(\"InitialLayoutCompleted\", () => {\n        const bounds = myDiagram.documentBounds;\n        setDimensions({\n          width: `${Math.ceil(bounds.width)}px`,\n          height: `${Math.ceil(bounds.height)}px`\n        });\n      });\n    }\n  }, [graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Graph Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFileUpload,\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: diagramRef,\n      style: {\n        width: dimensions.width,\n        height: dimensions.height,\n        border: \"1px solid black\",\n        overflow: \"auto\"\n      },\n      children: !graphData && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Graph will be displayed here after uploading a file.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"XXnwhM5wDGDDx4M9EUCZaWWqJQo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","go","jsxDEV","_jsxDEV","App","_s","file","setFile","graphData","setGraphData","dimensions","setDimensions","width","height","diagramRef","handleFileChange","event","target","files","handleFileUpload","alert","formData","FormData","append","response","post","headers","data","message","fetchGraphData","error","console","get","$","GraphObject","make","myDiagram","Diagram","current","layout","TreeLayout","angle","layerSpacing","nodeTemplate","Node","Shape","fill","Panel","margin","TextBlock","editable","font","NaN","Binding","makeTwoWay","text","Math","min","length","stroke","wrap","WrapFit","textAlign","model","GraphLinksModel","nodeDataArray","linkDataArray","addDiagramListener","bounds","documentBounds","ceil","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","ref","style","border","overflow","_c","$RefreshReg$"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport * as go from \"gojs\"; // Import GoJS for diagram visualization\r\n\r\nconst App = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [graphData, setGraphData] = useState(null);\r\n  const [dimensions, setDimensions] = useState({ width: \"100%\", height: \"600px\" });\r\n  const diagramRef = useRef();\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleFileUpload = async () => {\r\n    if (!file) {\r\n      alert(\"Please select a file before uploading.\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n      alert(response.data.message);\r\n      fetchGraphData();\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      alert(\"Error uploading file. Please check the console for more details.\");\r\n    }\r\n  };\r\n\r\n  const fetchGraphData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\r\n      setGraphData(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching graph data:\", error);\r\n      alert(\"Error fetching graph data. Please check the console for more details.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (graphData) {\r\n      const $ = go.GraphObject.make;\r\n\r\n      // Initialize the GoJS diagram\r\n      const myDiagram = $(go.Diagram, diagramRef.current, {\r\n        \"undoManager.isEnabled\": true,\r\n        layout: $(go.TreeLayout, { angle: 0, layerSpacing: 35 }), // Left-to-right layout\r\n      });\r\n\r\n      // Define node template with dynamic width based on label length\r\n      myDiagram.nodeTemplate = $(\r\n        go.Node,\r\n        \"Auto\",\r\n        $(go.Shape, \"RoundedRectangle\", {\r\n          fill: \"lightblue\",\r\n        }),\r\n        $(\r\n          go.Panel,\r\n          \"Vertical\", // Arrange the text blocks vertically\r\n          { margin: 5 },\r\n          $(\r\n            go.TextBlock,\r\n            {\r\n              margin: 2,\r\n              editable: true,\r\n              font: \"bold 12pt sans-serif\",\r\n              width: NaN, // Allow dynamic sizing\r\n            },\r\n            new go.Binding(\"text\", \"label\").makeTwoWay(), // Main label (name)\r\n            new go.Binding(\"width\", \"label\", (text) => Math.min(text.length * 12 * 2, 300)) // Max width: twice the length in pixels, capped at 300px\r\n          ),\r\n          $(\r\n            go.TextBlock,\r\n            {\r\n              margin: 2,\r\n              font: \"italic 10pt sans-serif\",\r\n              stroke: \"gray\",\r\n              wrap: go.TextBlock.WrapFit, // Allow text wrapping if too long\r\n              textAlign: \"center\",\r\n            },\r\n            new go.Binding(\"text\", \"hoverLabel\") // Secondary label (e.g., description)\r\n          )\r\n        )\r\n      );\r\n\r\n      // Set the diagram's model with nodes and links\r\n      myDiagram.model = new go.GraphLinksModel(graphData.nodeDataArray, graphData.linkDataArray);\r\n\r\n      // Adjust container size based on the graph dimensions\r\n      myDiagram.addDiagramListener(\"InitialLayoutCompleted\", () => {\r\n        const bounds = myDiagram.documentBounds;\r\n        setDimensions({\r\n          width: `${Math.ceil(bounds.width)}px`,\r\n          height: `${Math.ceil(bounds.height)}px`,\r\n        });\r\n      });\r\n    }\r\n  }, [graphData]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Graph Visualization</h1>\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      <button onClick={handleFileUpload}>Upload File</button>\r\n      <div\r\n        ref={diagramRef}\r\n        style={{\r\n          width: dimensions.width,\r\n          height: dimensions.height,\r\n          border: \"1px solid black\",\r\n          overflow: \"auto\",\r\n        }}\r\n      >\r\n        {!graphData && <p>Graph will be displayed here after uploading a file.</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}