{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport useAppState from './useAppState';\nconst useFileUpload = (setGraphData, showNotification) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    showConfirmDialog,\n    startAIProcessing\n  } = useAppState();\n  const handleFileChange = event => {\n    console.log(\"File selected:\", event.target.files[0]);\n    setFile(event.target.files[0]);\n  };\n\n  // Modify handleFileUpload to use confirmation and add debugging\n  const handleFileUpload = async (notification = null) => {\n    console.log(\"handleFileUpload called, file:\", file);\n    if (!file) {\n      console.log(\"No file selected\");\n      if (notification) {\n        notification(\"Please select a file before uploading.\", \"error\");\n      }\n      return;\n    }\n\n    // Debug showConfirmDialog\n    console.log(\"About to show confirmation dialog\");\n    try {\n      showConfirmDialog({\n        title: \"Upload and Analyze File?\",\n        message: \"The AI will analyze your data structure and prepare it for visualization. This process will take a moment.\",\n        confirmText: \"Upload and Analyze\",\n        onConfirm: async () => {\n          console.log(\"Confirm button clicked in dialog\");\n          setIsLoading(true);\n          const formData = new FormData();\n          formData.append(\"file\", file);\n          console.log(\"FormData created with file:\", file.name);\n          try {\n            console.log(\"Attempting to upload file to server...\");\n            // First upload the file\n            const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\n              headers: {\n                \"Content-Type\": \"multipart/form-data\"\n              }\n            });\n            console.log(\"File upload response:\", response.data);\n\n            // Then start AI processing\n            const aiProcess = startAIProcessing(\"Analyzing file structure...\");\n\n            // Simulate AI progress in stages\n            let progress = 0;\n            const interval = setInterval(() => {\n              progress += 5;\n              console.log(\"AI progress:\", progress);\n\n              // Update message at certain thresholds\n              if (progress === 20) {\n                aiProcess.updateProgress(progress, \"Identifying data entities and relationships...\");\n              } else if (progress === 40) {\n                aiProcess.updateProgress(progress, \"Processing attribute characteristics...\");\n              } else if (progress === 60) {\n                aiProcess.updateProgress(progress, \"Analyzing semantic connections...\");\n              } else if (progress === 80) {\n                aiProcess.updateProgress(progress, \"Finalizing data structure...\");\n              }\n              aiProcess.updateProgress(progress);\n              if (progress >= 100) {\n                clearInterval(interval);\n                aiProcess.complete();\n\n                // Fetch graph data after AI processing completes\n                fetchGraphData();\n                if (notification) {\n                  notification(response.data.message, \"success\");\n                }\n              }\n            }, 100);\n          } catch (error) {\n            console.error(\"Error uploading file:\", error);\n            console.error(\"Error details:\", error.response ? error.response.data : \"No response data\");\n            let errorMessage = \"Error uploading file.\";\n            if (error.response && error.response.data) {\n              errorMessage += ` ${error.response.data.detail || error.response.data.message || JSON.stringify(error.response.data)}`;\n            }\n            if (notification) {\n              notification(errorMessage, \"error\");\n            }\n            setIsLoading(false);\n          }\n        }\n      });\n      console.log(\"showConfirmDialog called successfully\");\n    } catch (dialogError) {\n      console.error(\"Error showing dialog:\", dialogError);\n      // Fallback direct upload without dialog\n      if (notification) {\n        notification(\"Error showing upload dialog. Please try again.\", \"error\");\n      }\n    }\n  };\n  const fetchGraphData = async (notification = null) => {\n    console.log(\"Fetching graph data...\");\n    try {\n      setIsLoading(true);\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\n      console.log(\"Graph data response:\", response.data);\n      setGraphData(response.data);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching graph data:\", error);\n      let errorMessage = \"Error fetching graph data.\";\n      if (error.response && error.response.data) {\n        errorMessage += ` ${error.response.data.detail || ''}`;\n      }\n      if (notification) {\n        notification(errorMessage, \"error\");\n      }\n      setIsLoading(false);\n    }\n  };\n  return {\n    file,\n    isLoading,\n    handleFileChange,\n    handleFileUpload,\n    fetchGraphData\n  };\n};\n_s(useFileUpload, \"As9Nr+s5azMowvOtcrWJ9hJFH1s=\", false, function () {\n  return [useAppState];\n});\nexport default useFileUpload;","map":{"version":3,"names":["useState","axios","useAppState","useFileUpload","setGraphData","showNotification","_s","file","setFile","isLoading","setIsLoading","showConfirmDialog","startAIProcessing","handleFileChange","event","console","log","target","files","handleFileUpload","notification","title","message","confirmText","onConfirm","formData","FormData","append","name","response","post","headers","data","aiProcess","progress","interval","setInterval","updateProgress","clearInterval","complete","fetchGraphData","error","errorMessage","detail","JSON","stringify","dialogError","get"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useFileUpload.js"],"sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport useAppState from './useAppState';\r\n\r\nconst useFileUpload = (setGraphData, showNotification) => {\r\n  const [file, setFile] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  const { showConfirmDialog, startAIProcessing } = useAppState();\r\n\r\n  const handleFileChange = (event) => {\r\n    console.log(\"File selected:\", event.target.files[0]);\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  // Modify handleFileUpload to use confirmation and add debugging\r\n  const handleFileUpload = async (notification = null) => {\r\n    console.log(\"handleFileUpload called, file:\", file);\r\n    \r\n    if (!file) {\r\n      console.log(\"No file selected\");\r\n      if (notification) {\r\n        notification(\"Please select a file before uploading.\", \"error\");\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Debug showConfirmDialog\r\n    console.log(\"About to show confirmation dialog\");\r\n    \r\n    try {\r\n      showConfirmDialog({\r\n        title: \"Upload and Analyze File?\",\r\n        message: \"The AI will analyze your data structure and prepare it for visualization. This process will take a moment.\",\r\n        confirmText: \"Upload and Analyze\",\r\n        onConfirm: async () => {\r\n          console.log(\"Confirm button clicked in dialog\");\r\n          setIsLoading(true);\r\n          const formData = new FormData();\r\n          formData.append(\"file\", file);\r\n          \r\n          console.log(\"FormData created with file:\", file.name);\r\n          \r\n          try {\r\n            console.log(\"Attempting to upload file to server...\");\r\n            // First upload the file\r\n            const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\r\n              headers: { \"Content-Type\": \"multipart/form-data\" },\r\n            });\r\n            \r\n            console.log(\"File upload response:\", response.data);\r\n            \r\n            // Then start AI processing\r\n            const aiProcess = startAIProcessing(\"Analyzing file structure...\");\r\n            \r\n            // Simulate AI progress in stages\r\n            let progress = 0;\r\n            const interval = setInterval(() => {\r\n              progress += 5;\r\n              console.log(\"AI progress:\", progress);\r\n              \r\n              // Update message at certain thresholds\r\n              if (progress === 20) {\r\n                aiProcess.updateProgress(progress, \"Identifying data entities and relationships...\");\r\n              } else if (progress === 40) {\r\n                aiProcess.updateProgress(progress, \"Processing attribute characteristics...\");\r\n              } else if (progress === 60) {\r\n                aiProcess.updateProgress(progress, \"Analyzing semantic connections...\");\r\n              } else if (progress === 80) {\r\n                aiProcess.updateProgress(progress, \"Finalizing data structure...\");\r\n              }\r\n              \r\n              aiProcess.updateProgress(progress);\r\n              \r\n              if (progress >= 100) {\r\n                clearInterval(interval);\r\n                aiProcess.complete();\r\n                \r\n                // Fetch graph data after AI processing completes\r\n                fetchGraphData();\r\n                \r\n                if (notification) {\r\n                  notification(response.data.message, \"success\");\r\n                }\r\n              }\r\n            }, 100);\r\n            \r\n          } catch (error) {\r\n            console.error(\"Error uploading file:\", error);\r\n            console.error(\"Error details:\", error.response ? error.response.data : \"No response data\");\r\n            let errorMessage = \"Error uploading file.\";\r\n            if (error.response && error.response.data) {\r\n              errorMessage += ` ${error.response.data.detail || error.response.data.message || JSON.stringify(error.response.data)}`;\r\n            }\r\n            if (notification) {\r\n              notification(errorMessage, \"error\");\r\n            }\r\n            setIsLoading(false);\r\n          }\r\n        }\r\n      });\r\n      console.log(\"showConfirmDialog called successfully\");\r\n    } catch (dialogError) {\r\n      console.error(\"Error showing dialog:\", dialogError);\r\n      // Fallback direct upload without dialog\r\n      if (notification) {\r\n        notification(\"Error showing upload dialog. Please try again.\", \"error\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchGraphData = async (notification = null) => {\r\n    console.log(\"Fetching graph data...\");\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\r\n      console.log(\"Graph data response:\", response.data);\r\n      setGraphData(response.data);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching graph data:\", error);\r\n      let errorMessage = \"Error fetching graph data.\";\r\n      if (error.response && error.response.data) {\r\n        errorMessage += ` ${error.response.data.detail || ''}`;\r\n      }\r\n      if (notification) {\r\n        notification(errorMessage, \"error\");\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    file,\r\n    isLoading,\r\n    handleFileChange,\r\n    handleFileUpload,\r\n    fetchGraphData\r\n  };\r\n};\r\n\r\nexport default useFileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}