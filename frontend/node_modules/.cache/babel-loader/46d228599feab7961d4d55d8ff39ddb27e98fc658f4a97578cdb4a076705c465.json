{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport axios from \"axios\";\nconst useAppState = () => {\n  _s();\n  // Main state\n  const [graphData, setGraphData] = useState(null);\n  const [popup, setPopup] = useState({\n    isOpen: false,\n    key: null,\n    value: \"\",\n    name: \"\"\n  });\n  const [dimensions, setDimensions] = useState({\n    width: \"100%\",\n    height: \"600px\"\n  });\n  const [showHarmonisedColumn, setShowHarmonisedColumn] = useState(false);\n  const [showDiagram, setShowDiagram] = useState(false);\n  const [isDiagramMinimized, setIsDiagramMinimized] = useState(false);\n\n  // Track if harmonization and diagram generation have been performed\n  const [hasHarmonisedData, setHasHarmonisedData] = useState(false);\n  const [hasDiagramData, setHasDiagramData] = useState(false);\n\n  // Confirmation dialog state\n  const [confirmDialog, setConfirmDialog] = useState({\n    isOpen: false,\n    title: \"\",\n    message: \"\",\n    confirmText: \"\",\n    cancelText: \"\",\n    onConfirm: () => {}\n  });\n\n  // AI thinking state\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [aiProgress, setAIProgress] = useState(0);\n  const [aiMessage, setAIMessage] = useState(\"Analyzing data...\");\n\n  // Safely sanitize node data\n  const sanitizeNodeData = node => {\n    // Ensure we're only working with primitive values\n    return {\n      key: String(node.key || ''),\n      category: String(node.category || ''),\n      label: String(node.label || ''),\n      hoverLabel: String(node.hoverLabel || ''),\n      harmonisedAttribute: String(node.harmonisedAttribute || '')\n    };\n  };\n\n  // Popup management functions\n  const openPopup = (key, currentValue, currentName) => {\n    setPopup({\n      isOpen: true,\n      key: String(key),\n      value: String(currentValue || \"\"),\n      name: String(currentName || \"\")\n    });\n  };\n  const closePopup = () => {\n    setPopup({\n      isOpen: false,\n      key: null,\n      value: \"\",\n      name: \"\"\n    });\n  };\n  const savePopupChanges = showNotification => {\n    const updatedValue = String(popup.value || '');\n    const updatedName = String(popup.name || '');\n    setGraphData(prev => {\n      // Ensure prev is an object and has nodeDataArray\n      if (!prev || !Array.isArray(prev.nodeDataArray)) {\n        console.warn('Invalid graph data structure');\n        return prev;\n      }\n\n      // Create a new array with sanitized nodes\n      const updatedNodeDataArray = prev.nodeDataArray.map(node => node.key === popup.key ? {\n        ...sanitizeNodeData(node),\n        hoverLabel: updatedValue,\n        label: updatedName\n      } : sanitizeNodeData(node));\n      return {\n        ...prev,\n        nodeDataArray: updatedNodeDataArray\n      };\n    });\n    closePopup();\n\n    // Show saving indicator\n    if (showNotification) {\n      showNotification(\"Changes saved successfully.\", \"success\");\n    }\n  };\n  const handleLabelChange = (event, key) => {\n    const updatedValue = String(event.target.value || '');\n    setGraphData(prev => {\n      // Ensure prev is an object and has nodeDataArray\n      if (!prev || !Array.isArray(prev.nodeDataArray)) {\n        console.warn('Invalid graph data structure');\n        return prev;\n      }\n\n      // Create a new array with sanitized nodes\n      const updatedNodeDataArray = prev.nodeDataArray.map(node => node.key === key ? {\n        ...sanitizeNodeData(node),\n        hoverLabel: updatedValue\n      } : sanitizeNodeData(node));\n      return {\n        ...prev,\n        nodeDataArray: updatedNodeDataArray\n      };\n    });\n  };\n\n  // Confirmation dialog functions\n  const showConfirmDialog = config => {\n    console.log(\"showConfirmDialog called with config:\", config);\n    setConfirmDialog({\n      isOpen: true,\n      title: config.title || \"Confirm Action\",\n      message: config.message || \"Are you sure you want to proceed?\",\n      confirmText: config.confirmText || \"Confirm\",\n      cancelText: config.cancelText || \"Cancel\",\n      onConfirm: config.onConfirm || (() => {\n        console.log(\"Default confirm action\");\n      })\n    });\n    console.log(\"confirmDialog state set:\", {\n      isOpen: true,\n      title: config.title || \"Confirm Action\"\n      // Log other properties\n    });\n  };\n  const hideConfirmDialog = () => {\n    console.log(\"hideConfirmDialog called\");\n    setConfirmDialog({\n      ...confirmDialog,\n      isOpen: false\n    });\n  };\n\n  // AI thinking functions\n  const startAIProcessing = (initialMessage = \"Analyzing data...\") => {\n    console.log(\"startAIProcessing called with message:\", initialMessage);\n    setIsAIThinking(true);\n    setAIMessage(initialMessage);\n    setAIProgress(0);\n    return {\n      updateProgress: (progress, message) => {\n        setAIProgress(progress);\n        if (message) setAIMessage(message);\n      },\n      complete: () => {\n        setAIProgress(100);\n        setTimeout(() => setIsAIThinking(false), 500);\n      }\n    };\n  };\n\n  // Load attribute descriptions\n  const loadAttributeDescriptions = async (isLoading, showNotification) => {\n    if (isLoading) return;\n    showConfirmDialog({\n      title: \"Generate Attribute Definitions?\",\n      message: \"This will use AI to analyze your attributes and generate meaningful definitions based on relationships and naming patterns.\",\n      confirmText: \"Generate Definitions\",\n      onConfirm: async () => {\n        // Hide confirmation dialog immediately after confirming\n        hideConfirmDialog();\n\n        // Start AI processing animation\n        const aiProcess = startAIProcessing(\"Analyzing attribute patterns...\");\n        try {\n          // First tell the backend to prepare descriptions\n          await axios.post(\"http://localhost:8000/load-descriptions/\");\n\n          // Simulate AI progress with different stages\n          const stages = [\"Analyzing attribute patterns...\", \"Extracting semantic meaning from names...\", \"Correlating with known domain concepts...\", \"Generating natural language definitions...\", \"Finalizing harmonized attributes...\"];\n          let currentStage = 0;\n          let progress = 0;\n          const interval = setInterval(() => {\n            progress += 2;\n\n            // Update message at certain thresholds\n            if (progress % 20 === 0 && currentStage < stages.length - 1) {\n              currentStage++;\n              aiProcess.updateProgress(progress, stages[currentStage]);\n            }\n            if (progress >= 100) {\n              clearInterval(interval);\n\n              // Call the real API endpoint\n              axios.get(\"http://localhost:8000/graph-data/\").then(response => {\n                // Sanitize the received data\n                const sanitizedData = {\n                  nodeDataArray: (response.data.nodeDataArray || []).map(sanitizeNodeData),\n                  linkDataArray: response.data.linkDataArray || []\n                };\n                setGraphData(sanitizedData);\n                aiProcess.complete();\n                if (showNotification) {\n                  showNotification(\"Definitions generated successfully!\", \"success\");\n                }\n              }).catch(error => {\n                console.error(\"Error generating definitions:\", error);\n                aiProcess.complete();\n                if (showNotification) {\n                  showNotification(\"Error generating definitions.\", \"error\");\n                }\n              });\n            } else {\n              aiProcess.updateProgress(progress);\n            }\n          }, 50);\n        } catch (error) {\n          console.error(\"Error generating definitions:\", error);\n          aiProcess.complete();\n          if (showNotification) {\n            showNotification(\"Error generating definitions.\", \"error\");\n          }\n        }\n      }\n    });\n  };\n\n  // Harmonize attributes with similar confirmation and loading screens\n  const harmonizeAttributes = async (isLoading, showNotification) => {\n    if (isLoading) return;\n    showConfirmDialog({\n      title: \"Harmonise Attributes?\",\n      message: \"This will analyze your attributes and generate harmonised versions based on semantic similarities and naming patterns.\",\n      confirmText: \"Harmonise Attributes\",\n      onConfirm: async () => {\n        // Hide confirmation dialog immediately after confirming\n        hideConfirmDialog();\n\n        // Start AI processing animation\n        const aiProcess = startAIProcessing(\"Analyzing attribute relationships...\");\n        try {\n          // Simulate AI progress with different stages\n          const stages = [\"Analyzing attribute relationships...\", \"Identifying semantic groupings...\", \"Detecting similar patterns...\", \"Harmonising attribute names...\", \"Validating consistency...\"];\n          let currentStage = 0;\n          let progress = 0;\n          const interval = setInterval(async () => {\n            progress += 2;\n\n            // Update message at certain thresholds\n            if (progress % 20 === 0 && currentStage < stages.length - 1) {\n              currentStage++;\n              aiProcess.updateProgress(progress, stages[currentStage]);\n            }\n            if (progress >= 100) {\n              clearInterval(interval);\n              try {\n                // Mark that harmonization has been performed\n                setHasHarmonisedData(true);\n\n                // Show the harmonised column\n                setShowHarmonisedColumn(true);\n\n                // Optionally fetch updated data if your backend modifies it\n                const response = await axios.get(\"http://localhost:8000/graph-data/\");\n                const sanitizedData = {\n                  nodeDataArray: (response.data.nodeDataArray || []).map(sanitizeNodeData),\n                  linkDataArray: response.data.linkDataArray || []\n                };\n                setGraphData(sanitizedData);\n                aiProcess.complete();\n                if (showNotification) {\n                  showNotification(\"Attributes harmonised successfully!\", \"success\");\n                }\n              } catch (error) {\n                console.error(\"Error harmonising attributes:\", error);\n                aiProcess.complete();\n\n                // Still mark harmonization as done and show harmonised column\n                setHasHarmonisedData(true);\n                setShowHarmonisedColumn(true);\n                if (showNotification) {\n                  showNotification(\"Error harmonising attributes, but showing harmonised view.\", \"warning\");\n                }\n              }\n            } else {\n              aiProcess.updateProgress(progress);\n            }\n          }, 50);\n        } catch (error) {\n          console.error(\"Error in harmonisation process:\", error);\n          aiProcess.complete();\n          if (showNotification) {\n            showNotification(\"Error harmonising attributes.\", \"error\");\n          }\n        }\n      }\n    });\n  };\n\n  // Generate diagram with confirmation and loading screen\n  const generateDiagram = async (isLoading, showNotification) => {\n    if (isLoading) return;\n    if (!graphData) {\n      if (showNotification) {\n        showNotification(\"Please upload data first.\", \"error\");\n      }\n      return;\n    }\n    showConfirmDialog({\n      title: \"Generate Relationship Diagram?\",\n      message: \"This will analyze your data structure and generate a visual diagram showing relationships between entities.\",\n      confirmText: \"Generate Diagram\",\n      onConfirm: async () => {\n        // Hide confirmation dialog immediately after confirming\n        hideConfirmDialog();\n\n        // Start AI processing animation\n        const aiProcess = startAIProcessing(\"Analyzing data structure...\");\n        try {\n          // Simulate AI progress with different stages\n          const stages = [\"Analyzing data structure...\", \"Identifying entity relationships...\", \"Calculating optimal layout...\", \"Rendering relationship diagram...\", \"Finalizing visualization...\"];\n          let currentStage = 0;\n          let progress = 0;\n          const interval = setInterval(() => {\n            progress += 2;\n\n            // Update message at certain thresholds\n            if (progress % 20 === 0 && currentStage < stages.length - 1) {\n              currentStage++;\n              aiProcess.updateProgress(progress, stages[currentStage]);\n            }\n            if (progress >= 100) {\n              clearInterval(interval);\n              try {\n                // Mark that diagram has been generated\n                setHasDiagramData(true);\n\n                // Show diagram and ensure it's not minimized\n                setShowDiagram(true);\n                setIsDiagramMinimized(false);\n                aiProcess.complete();\n                if (showNotification) {\n                  showNotification(\"Diagram generated successfully!\", \"success\");\n                }\n              } catch (error) {\n                console.error(\"Error generating diagram:\", error);\n                aiProcess.complete();\n                if (showNotification) {\n                  showNotification(\"Error generating diagram.\", \"error\");\n                }\n              }\n            } else {\n              aiProcess.updateProgress(progress);\n            }\n          }, 50);\n        } catch (error) {\n          console.error(\"Error in diagram generation:\", error);\n          aiProcess.complete();\n          if (showNotification) {\n            showNotification(\"Error generating diagram.\", \"error\");\n          }\n        }\n      }\n    });\n  };\n\n  // Toggle harmonised column visibility\n  const toggleHarmonisedColumn = () => {\n    // Only allow toggling if harmonisation has been performed\n    if (hasHarmonisedData) {\n      setShowHarmonisedColumn(prev => !prev);\n    }\n  };\n\n  // Toggle diagram visibility\n  const toggleDiagram = showNotification => {\n    // Only allow toggling if diagram has been generated\n    if (hasDiagramData) {\n      setShowDiagram(prev => !prev);\n      if (!showDiagram) {\n        setIsDiagramMinimized(false); // Ensure it's not minimized when showing\n      }\n    } else if (showNotification) {\n      showNotification(\"Please generate a diagram first.\", \"error\");\n    }\n  };\n\n  // Minimize/maximize diagram\n  const toggleMinimizeDiagram = () => {\n    setIsDiagramMinimized(prev => !prev);\n  };\n  return {\n    graphData,\n    setGraphData,\n    popup,\n    setPopup,\n    dimensions,\n    setDimensions,\n    showHarmonisedColumn,\n    setShowHarmonisedColumn,\n    showDiagram,\n    setShowDiagram,\n    isDiagramMinimized,\n    setIsDiagramMinimized,\n    hasHarmonisedData,\n    hasDiagramData,\n    confirmDialog,\n    showConfirmDialog,\n    hideConfirmDialog,\n    isAIThinking,\n    aiProgress,\n    aiMessage,\n    startAIProcessing,\n    handleLabelChange,\n    openPopup,\n    closePopup,\n    savePopupChanges,\n    loadAttributeDescriptions,\n    harmonizeAttributes,\n    generateDiagram,\n    toggleHarmonisedColumn,\n    toggleDiagram,\n    toggleMinimizeDiagram\n  };\n};\n_s(useAppState, \"guQkQKPDE7hPSjfTCQ+50+feC7c=\");\nexport default useAppState;","map":{"version":3,"names":["useState","useRef","axios","useAppState","_s","graphData","setGraphData","popup","setPopup","isOpen","key","value","name","dimensions","setDimensions","width","height","showHarmonisedColumn","setShowHarmonisedColumn","showDiagram","setShowDiagram","isDiagramMinimized","setIsDiagramMinimized","hasHarmonisedData","setHasHarmonisedData","hasDiagramData","setHasDiagramData","confirmDialog","setConfirmDialog","title","message","confirmText","cancelText","onConfirm","isAIThinking","setIsAIThinking","aiProgress","setAIProgress","aiMessage","setAIMessage","sanitizeNodeData","node","String","category","label","hoverLabel","harmonisedAttribute","openPopup","currentValue","currentName","closePopup","savePopupChanges","showNotification","updatedValue","updatedName","prev","Array","isArray","nodeDataArray","console","warn","updatedNodeDataArray","map","handleLabelChange","event","target","showConfirmDialog","config","log","hideConfirmDialog","startAIProcessing","initialMessage","updateProgress","progress","complete","setTimeout","loadAttributeDescriptions","isLoading","aiProcess","post","stages","currentStage","interval","setInterval","length","clearInterval","get","then","response","sanitizedData","data","linkDataArray","catch","error","harmonizeAttributes","generateDiagram","toggleHarmonisedColumn","toggleDiagram","toggleMinimizeDiagram"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useAppState.js"],"sourcesContent":["import { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useAppState = () => {\r\n    // Main state\r\n    const [graphData, setGraphData] = useState(null);\r\n    const [popup, setPopup] = useState({ isOpen: false, key: null, value: \"\", name: \"\" });\r\n    const [dimensions, setDimensions] = useState({ width: \"100%\", height: \"600px\" });\r\n    const [showHarmonisedColumn, setShowHarmonisedColumn] = useState(false);\r\n    const [showDiagram, setShowDiagram] = useState(false);\r\n    const [isDiagramMinimized, setIsDiagramMinimized] = useState(false);\r\n    \r\n    // Track if harmonization and diagram generation have been performed\r\n    const [hasHarmonisedData, setHasHarmonisedData] = useState(false);\r\n    const [hasDiagramData, setHasDiagramData] = useState(false);\r\n\r\n    // Confirmation dialog state\r\n    const [confirmDialog, setConfirmDialog] = useState({ \r\n        isOpen: false, \r\n        title: \"\", \r\n        message: \"\", \r\n        confirmText: \"\", \r\n        cancelText: \"\", \r\n        onConfirm: () => {} \r\n    });\r\n\r\n    // AI thinking state\r\n    const [isAIThinking, setIsAIThinking] = useState(false);\r\n    const [aiProgress, setAIProgress] = useState(0);\r\n    const [aiMessage, setAIMessage] = useState(\"Analyzing data...\");\r\n\r\n    // Safely sanitize node data\r\n    const sanitizeNodeData = (node) => {\r\n        // Ensure we're only working with primitive values\r\n        return {\r\n            key: String(node.key || ''),\r\n            category: String(node.category || ''),\r\n            label: String(node.label || ''),\r\n            hoverLabel: String(node.hoverLabel || ''),\r\n            harmonisedAttribute: String(node.harmonisedAttribute || '')\r\n        };\r\n    };\r\n\r\n    // Popup management functions\r\n    const openPopup = (key, currentValue, currentName) => {\r\n        setPopup({ \r\n            isOpen: true, \r\n            key: String(key), \r\n            value: String(currentValue || \"\"), \r\n            name: String(currentName || \"\") \r\n        });\r\n    };\r\n\r\n    const closePopup = () => {\r\n        setPopup({ isOpen: false, key: null, value: \"\", name: \"\" });\r\n    };\r\n\r\n    const savePopupChanges = (showNotification) => {\r\n        const updatedValue = String(popup.value || '');\r\n        const updatedName = String(popup.name || '');\r\n        \r\n        setGraphData((prev) => {\r\n            // Ensure prev is an object and has nodeDataArray\r\n            if (!prev || !Array.isArray(prev.nodeDataArray)) {\r\n                console.warn('Invalid graph data structure');\r\n                return prev;\r\n            }\r\n\r\n            // Create a new array with sanitized nodes\r\n            const updatedNodeDataArray = prev.nodeDataArray.map((node) => \r\n                node.key === popup.key \r\n                    ? { \r\n                        ...sanitizeNodeData(node), \r\n                        hoverLabel: updatedValue,\r\n                        label: updatedName \r\n                      }\r\n                    : sanitizeNodeData(node)\r\n            );\r\n\r\n            return {\r\n                ...prev,\r\n                nodeDataArray: updatedNodeDataArray\r\n            };\r\n        });\r\n        \r\n        closePopup();\r\n        \r\n        // Show saving indicator\r\n        if (showNotification) {\r\n            showNotification(\"Changes saved successfully.\", \"success\");\r\n        }\r\n    };\r\n\r\n    const handleLabelChange = (event, key) => {\r\n        const updatedValue = String(event.target.value || '');\r\n        \r\n        setGraphData((prev) => {\r\n            // Ensure prev is an object and has nodeDataArray\r\n            if (!prev || !Array.isArray(prev.nodeDataArray)) {\r\n                console.warn('Invalid graph data structure');\r\n                return prev;\r\n            }\r\n\r\n            // Create a new array with sanitized nodes\r\n            const updatedNodeDataArray = prev.nodeDataArray.map((node) => \r\n                node.key === key \r\n                    ? { \r\n                        ...sanitizeNodeData(node), \r\n                        hoverLabel: updatedValue \r\n                      }\r\n                    : sanitizeNodeData(node)\r\n            );\r\n\r\n            return {\r\n                ...prev,\r\n                nodeDataArray: updatedNodeDataArray\r\n            };\r\n        });\r\n    };\r\n\r\n    // Confirmation dialog functions\r\n    const showConfirmDialog = (config) => {\r\n        console.log(\"showConfirmDialog called with config:\", config);\r\n        setConfirmDialog({\r\n            isOpen: true,\r\n            title: config.title || \"Confirm Action\",\r\n            message: config.message || \"Are you sure you want to proceed?\",\r\n            confirmText: config.confirmText || \"Confirm\",\r\n            cancelText: config.cancelText || \"Cancel\",\r\n            onConfirm: config.onConfirm || (() => {\r\n                console.log(\"Default confirm action\");\r\n            }),\r\n        });\r\n        console.log(\"confirmDialog state set:\", {\r\n            isOpen: true,\r\n            title: config.title || \"Confirm Action\",\r\n            // Log other properties\r\n        });\r\n    };\r\n\r\n    const hideConfirmDialog = () => {\r\n        console.log(\"hideConfirmDialog called\");\r\n        setConfirmDialog({ ...confirmDialog, isOpen: false });\r\n    };\r\n\r\n    // AI thinking functions\r\n    const startAIProcessing = (initialMessage = \"Analyzing data...\") => {\r\n        console.log(\"startAIProcessing called with message:\", initialMessage);\r\n        setIsAIThinking(true);\r\n        setAIMessage(initialMessage);\r\n        setAIProgress(0);\r\n        \r\n        return {\r\n            updateProgress: (progress, message) => {\r\n                setAIProgress(progress);\r\n                if (message) setAIMessage(message);\r\n            },\r\n            complete: () => {\r\n                setAIProgress(100);\r\n                setTimeout(() => setIsAIThinking(false), 500);\r\n            }\r\n        };\r\n    };\r\n\r\n    // Load attribute descriptions\r\n    const loadAttributeDescriptions = async (isLoading, showNotification) => {\r\n        if (isLoading) return;\r\n        \r\n        showConfirmDialog({\r\n            title: \"Generate Attribute Definitions?\",\r\n            message: \"This will use AI to analyze your attributes and generate meaningful definitions based on relationships and naming patterns.\",\r\n            confirmText: \"Generate Definitions\",\r\n            onConfirm: async () => {\r\n                // Hide confirmation dialog immediately after confirming\r\n                hideConfirmDialog();\r\n                \r\n                // Start AI processing animation\r\n                const aiProcess = startAIProcessing(\"Analyzing attribute patterns...\");\r\n                \r\n                try {\r\n                    // First tell the backend to prepare descriptions\r\n                    await axios.post(\"http://localhost:8000/load-descriptions/\");\r\n                    \r\n                    // Simulate AI progress with different stages\r\n                    const stages = [\r\n                        \"Analyzing attribute patterns...\",\r\n                        \"Extracting semantic meaning from names...\",\r\n                        \"Correlating with known domain concepts...\",\r\n                        \"Generating natural language definitions...\",\r\n                        \"Finalizing harmonized attributes...\"\r\n                    ];\r\n                    \r\n                    let currentStage = 0;\r\n                    let progress = 0;\r\n                    \r\n                    const interval = setInterval(() => {\r\n                        progress += 2;\r\n                        \r\n                        // Update message at certain thresholds\r\n                        if (progress % 20 === 0 && currentStage < stages.length - 1) {\r\n                            currentStage++;\r\n                            aiProcess.updateProgress(progress, stages[currentStage]);\r\n                        }\r\n                        \r\n                        if (progress >= 100) {\r\n                            clearInterval(interval);\r\n                            \r\n                            // Call the real API endpoint\r\n                            axios.get(\"http://localhost:8000/graph-data/\")\r\n                                .then(response => {\r\n                                    // Sanitize the received data\r\n                                    const sanitizedData = {\r\n                                        nodeDataArray: (response.data.nodeDataArray || []).map(sanitizeNodeData),\r\n                                        linkDataArray: response.data.linkDataArray || []\r\n                                    };\r\n\r\n                                    setGraphData(sanitizedData);\r\n                                    aiProcess.complete();\r\n                                    \r\n                                    if (showNotification) {\r\n                                        showNotification(\"Definitions generated successfully!\", \"success\");\r\n                                    }\r\n                                })\r\n                                .catch(error => {\r\n                                    console.error(\"Error generating definitions:\", error);\r\n                                    aiProcess.complete();\r\n                                    if (showNotification) {\r\n                                        showNotification(\"Error generating definitions.\", \"error\");\r\n                                    }\r\n                                });\r\n                        } else {\r\n                            aiProcess.updateProgress(progress);\r\n                        }\r\n                    }, 50);\r\n                } catch (error) {\r\n                    console.error(\"Error generating definitions:\", error);\r\n                    aiProcess.complete();\r\n                    if (showNotification) {\r\n                        showNotification(\"Error generating definitions.\", \"error\");\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // Harmonize attributes with similar confirmation and loading screens\r\n    const harmonizeAttributes = async (isLoading, showNotification) => {\r\n        if (isLoading) return;\r\n        \r\n        showConfirmDialog({\r\n            title: \"Harmonise Attributes?\",\r\n            message: \"This will analyze your attributes and generate harmonised versions based on semantic similarities and naming patterns.\",\r\n            confirmText: \"Harmonise Attributes\",\r\n            onConfirm: async () => {\r\n                // Hide confirmation dialog immediately after confirming\r\n                hideConfirmDialog();\r\n                \r\n                // Start AI processing animation\r\n                const aiProcess = startAIProcessing(\"Analyzing attribute relationships...\");\r\n                \r\n                try {\r\n                    // Simulate AI progress with different stages\r\n                    const stages = [\r\n                        \"Analyzing attribute relationships...\",\r\n                        \"Identifying semantic groupings...\",\r\n                        \"Detecting similar patterns...\",\r\n                        \"Harmonising attribute names...\",\r\n                        \"Validating consistency...\"\r\n                    ];\r\n                    \r\n                    let currentStage = 0;\r\n                    let progress = 0;\r\n                    \r\n                    const interval = setInterval(async () => {\r\n                        progress += 2;\r\n                        \r\n                        // Update message at certain thresholds\r\n                        if (progress % 20 === 0 && currentStage < stages.length - 1) {\r\n                            currentStage++;\r\n                            aiProcess.updateProgress(progress, stages[currentStage]);\r\n                        }\r\n                        \r\n                        if (progress >= 100) {\r\n                            clearInterval(interval);\r\n                            \r\n                            try {\r\n                                // Mark that harmonization has been performed\r\n                                setHasHarmonisedData(true);\r\n                                \r\n                                // Show the harmonised column\r\n                                setShowHarmonisedColumn(true);\r\n                                \r\n                                // Optionally fetch updated data if your backend modifies it\r\n                                const response = await axios.get(\"http://localhost:8000/graph-data/\");\r\n                                const sanitizedData = {\r\n                                    nodeDataArray: (response.data.nodeDataArray || []).map(sanitizeNodeData),\r\n                                    linkDataArray: response.data.linkDataArray || []\r\n                                };\r\n                                \r\n                                setGraphData(sanitizedData);\r\n                                aiProcess.complete();\r\n                                \r\n                                if (showNotification) {\r\n                                    showNotification(\"Attributes harmonised successfully!\", \"success\");\r\n                                }\r\n                            } catch (error) {\r\n                                console.error(\"Error harmonising attributes:\", error);\r\n                                aiProcess.complete();\r\n                                \r\n                                // Still mark harmonization as done and show harmonised column\r\n                                setHasHarmonisedData(true);\r\n                                setShowHarmonisedColumn(true);\r\n                                \r\n                                if (showNotification) {\r\n                                    showNotification(\"Error harmonising attributes, but showing harmonised view.\", \"warning\");\r\n                                }\r\n                            }\r\n                        } else {\r\n                            aiProcess.updateProgress(progress);\r\n                        }\r\n                    }, 50);\r\n                } catch (error) {\r\n                    console.error(\"Error in harmonisation process:\", error);\r\n                    aiProcess.complete();\r\n                    if (showNotification) {\r\n                        showNotification(\"Error harmonising attributes.\", \"error\");\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // Generate diagram with confirmation and loading screen\r\n    const generateDiagram = async (isLoading, showNotification) => {\r\n        if (isLoading) return;\r\n        \r\n        if (!graphData) {\r\n            if (showNotification) {\r\n                showNotification(\"Please upload data first.\", \"error\");\r\n            }\r\n            return;\r\n        }\r\n        \r\n        showConfirmDialog({\r\n            title: \"Generate Relationship Diagram?\",\r\n            message: \"This will analyze your data structure and generate a visual diagram showing relationships between entities.\",\r\n            confirmText: \"Generate Diagram\",\r\n            onConfirm: async () => {\r\n                // Hide confirmation dialog immediately after confirming\r\n                hideConfirmDialog();\r\n                \r\n                // Start AI processing animation\r\n                const aiProcess = startAIProcessing(\"Analyzing data structure...\");\r\n                \r\n                try {\r\n                    // Simulate AI progress with different stages\r\n                    const stages = [\r\n                        \"Analyzing data structure...\",\r\n                        \"Identifying entity relationships...\",\r\n                        \"Calculating optimal layout...\",\r\n                        \"Rendering relationship diagram...\",\r\n                        \"Finalizing visualization...\"\r\n                    ];\r\n                    \r\n                    let currentStage = 0;\r\n                    let progress = 0;\r\n                    \r\n                    const interval = setInterval(() => {\r\n                        progress += 2;\r\n                        \r\n                        // Update message at certain thresholds\r\n                        if (progress % 20 === 0 && currentStage < stages.length - 1) {\r\n                            currentStage++;\r\n                            aiProcess.updateProgress(progress, stages[currentStage]);\r\n                        }\r\n                        \r\n                        if (progress >= 100) {\r\n                            clearInterval(interval);\r\n                            \r\n                            try {\r\n                                // Mark that diagram has been generated\r\n                                setHasDiagramData(true);\r\n                                \r\n                                // Show diagram and ensure it's not minimized\r\n                                setShowDiagram(true);\r\n                                setIsDiagramMinimized(false);\r\n                                \r\n                                aiProcess.complete();\r\n                                \r\n                                if (showNotification) {\r\n                                    showNotification(\"Diagram generated successfully!\", \"success\");\r\n                                }\r\n                            } catch (error) {\r\n                                console.error(\"Error generating diagram:\", error);\r\n                                aiProcess.complete();\r\n                                if (showNotification) {\r\n                                    showNotification(\"Error generating diagram.\", \"error\");\r\n                                }\r\n                            }\r\n                        } else {\r\n                            aiProcess.updateProgress(progress);\r\n                        }\r\n                    }, 50);\r\n                } catch (error) {\r\n                    console.error(\"Error in diagram generation:\", error);\r\n                    aiProcess.complete();\r\n                    if (showNotification) {\r\n                        showNotification(\"Error generating diagram.\", \"error\");\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // Toggle harmonised column visibility\r\n    const toggleHarmonisedColumn = () => {\r\n        // Only allow toggling if harmonisation has been performed\r\n        if (hasHarmonisedData) {\r\n            setShowHarmonisedColumn(prev => !prev);\r\n        }\r\n    };\r\n\r\n    // Toggle diagram visibility\r\n    const toggleDiagram = (showNotification) => {\r\n        // Only allow toggling if diagram has been generated\r\n        if (hasDiagramData) {\r\n            setShowDiagram(prev => !prev);\r\n            if (!showDiagram) {\r\n                setIsDiagramMinimized(false); // Ensure it's not minimized when showing\r\n            }\r\n        } else if (showNotification) {\r\n            showNotification(\"Please generate a diagram first.\", \"error\");\r\n        }\r\n    };\r\n\r\n    // Minimize/maximize diagram\r\n    const toggleMinimizeDiagram = () => {\r\n        setIsDiagramMinimized(prev => !prev);\r\n    };\r\n\r\n    return {\r\n        graphData, \r\n        setGraphData,\r\n        popup, \r\n        setPopup,\r\n        dimensions, \r\n        setDimensions,\r\n        showHarmonisedColumn, \r\n        setShowHarmonisedColumn,\r\n        showDiagram, \r\n        setShowDiagram,\r\n        isDiagramMinimized, \r\n        setIsDiagramMinimized,\r\n        hasHarmonisedData,\r\n        hasDiagramData,\r\n        confirmDialog,\r\n        showConfirmDialog,\r\n        hideConfirmDialog,\r\n        isAIThinking,\r\n        aiProgress,\r\n        aiMessage,\r\n        startAIProcessing,\r\n        handleLabelChange,\r\n        openPopup,\r\n        closePopup,\r\n        savePopupChanges,\r\n        loadAttributeDescriptions,\r\n        harmonizeAttributes,\r\n        generateDiagram,\r\n        toggleHarmonisedColumn,\r\n        toggleDiagram,\r\n        toggleMinimizeDiagram\r\n    };\r\n};\r\n\r\nexport default useAppState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}