{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport useAppState from './useAppState';\nconst useDragDrop = (graphData, setGraphData, showNotification) => {\n  _s();\n  const [draggedItem, setDraggedItem] = useState(null);\n  const {\n    showConfirmDialog\n  } = useAppState();\n\n  // ... existing code\n\n  // Process drag drop - update to add confirmation\n  const processDragDrop = async (event, targetKey, targetCategory) => {\n    event.preventDefault();\n    if (event.currentTarget.classList) {\n      event.currentTarget.classList.remove(\"drop-target\");\n    }\n    const sourceKey = event.dataTransfer.getData(\"text/plain\");\n    const sourceCategory = event.dataTransfer.getData(\"category\");\n    if (sourceKey && sourceKey !== targetKey) {\n      const sourceNode = graphData.nodeDataArray.find(node => node.key === sourceKey);\n      const targetNode = graphData.nodeDataArray.find(node => node.key === targetKey);\n      if (sourceNode && targetNode) {\n        showConfirmDialog({\n          title: \"Change Relationship?\",\n          message: `Are you sure you want to move this ${sourceNode.category} to ${targetNode.category} \"${targetNode.label}\"?`,\n          confirmText: \"Move\",\n          onConfirm: async () => {\n            // Update local state\n            setGraphData(prev => {\n              let updatedNodeDataArray = [...prev.nodeDataArray];\n              let updatedLinkDataArray = [...prev.linkDataArray];\n\n              // Existing link removal and creation logic\n              updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\n              if (sourceNode.category === \"attribute\" && targetNode.category === \"object\") {\n                updatedLinkDataArray.push({\n                  from: targetKey,\n                  to: sourceKey\n                });\n              } else if (sourceNode.category === \"object\" && targetNode.category === \"system\") {\n                updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\n                updatedLinkDataArray.push({\n                  from: targetKey,\n                  to: sourceKey\n                });\n              }\n              return {\n                ...prev,\n                nodeDataArray: updatedNodeDataArray,\n                linkDataArray: updatedLinkDataArray\n              };\n            });\n\n            // Send drag-drop changes to backend\n            try {\n              const response = await axios.post(\"http://localhost:8000/apply-drag-drop/\", {\n                source: sourceKey,\n                target: targetKey,\n                sourceType: sourceNode.category,\n                targetType: targetNode.category\n              });\n              if (response.data.message === \"Drag-and-drop operation completed successfully\") {\n                if (showNotification) {\n                  showNotification(\"Item moved successfully\", \"success\");\n                }\n              }\n            } catch (error) {\n              console.error(\"Error applying drag and drop:\", error);\n              let errorMessage = \"Error moving item.\";\n              if (error.response && error.response.data) {\n                errorMessage += ` ${error.response.data.detail || ''}`;\n              }\n              if (showNotification) {\n                showNotification(errorMessage, \"error\");\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  return {\n    draggedItem,\n    handleDragStart,\n    handleDragEnd,\n    handleDragOver,\n    handleDragLeave,\n    processDragDrop\n  };\n};\n_s(useDragDrop, \"dwb+QrkKIYB9ZtOmF1WppS3Z8oU=\", false, function () {\n  return [useAppState];\n});\nexport default useDragDrop;","map":{"version":3,"names":["useState","axios","useAppState","useDragDrop","graphData","setGraphData","showNotification","_s","draggedItem","setDraggedItem","showConfirmDialog","processDragDrop","event","targetKey","targetCategory","preventDefault","currentTarget","classList","remove","sourceKey","dataTransfer","getData","sourceCategory","sourceNode","nodeDataArray","find","node","key","targetNode","title","message","category","label","confirmText","onConfirm","prev","updatedNodeDataArray","updatedLinkDataArray","linkDataArray","filter","link","to","push","from","response","post","source","target","sourceType","targetType","data","error","console","errorMessage","detail","handleDragStart","handleDragEnd","handleDragOver","handleDragLeave"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useDragDrop.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport useAppState from './useAppState';\r\n\r\nconst useDragDrop = (graphData, setGraphData, showNotification) => {\r\n    const [draggedItem, setDraggedItem] = useState(null);\r\n    const { showConfirmDialog } = useAppState();\r\n\r\n    // ... existing code\r\n    \r\n    // Process drag drop - update to add confirmation\r\n    const processDragDrop = async (event, targetKey, targetCategory) => {\r\n        event.preventDefault();\r\n        \r\n        if (event.currentTarget.classList) {\r\n            event.currentTarget.classList.remove(\"drop-target\");\r\n        }\r\n        \r\n        const sourceKey = event.dataTransfer.getData(\"text/plain\");\r\n        const sourceCategory = event.dataTransfer.getData(\"category\");\r\n\r\n        if (sourceKey && sourceKey !== targetKey) {\r\n            const sourceNode = graphData.nodeDataArray.find(node => node.key === sourceKey);\r\n            const targetNode = graphData.nodeDataArray.find(node => node.key === targetKey);\r\n            \r\n            if (sourceNode && targetNode) {\r\n                showConfirmDialog({\r\n                    title: \"Change Relationship?\",\r\n                    message: `Are you sure you want to move this ${sourceNode.category} to ${targetNode.category} \"${targetNode.label}\"?`,\r\n                    confirmText: \"Move\",\r\n                    onConfirm: async () => {\r\n                        // Update local state\r\n                        setGraphData((prev) => {\r\n                            let updatedNodeDataArray = [...prev.nodeDataArray];\r\n                            let updatedLinkDataArray = [...prev.linkDataArray];\r\n                            \r\n                            // Existing link removal and creation logic\r\n                            updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\r\n\r\n                            if (sourceNode.category === \"attribute\" && targetNode.category === \"object\") {\r\n                                updatedLinkDataArray.push({ from: targetKey, to: sourceKey });\r\n                            }\r\n                            else if (sourceNode.category === \"object\" && targetNode.category === \"system\") {\r\n                                updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\r\n                                updatedLinkDataArray.push({ from: targetKey, to: sourceKey });\r\n                            }\r\n\r\n                            return {\r\n                                ...prev,\r\n                                nodeDataArray: updatedNodeDataArray,\r\n                                linkDataArray: updatedLinkDataArray,\r\n                            };\r\n                        });\r\n\r\n                        // Send drag-drop changes to backend\r\n                        try {\r\n                            const response = await axios.post(\"http://localhost:8000/apply-drag-drop/\", {\r\n                                source: sourceKey,\r\n                                target: targetKey,\r\n                                sourceType: sourceNode.category,\r\n                                targetType: targetNode.category\r\n                            });\r\n                            \r\n                            if (response.data.message === \"Drag-and-drop operation completed successfully\") {\r\n                                if (showNotification) {\r\n                                    showNotification(\"Item moved successfully\", \"success\");\r\n                                }\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(\"Error applying drag and drop:\", error);\r\n                            let errorMessage = \"Error moving item.\";\r\n                            if (error.response && error.response.data) {\r\n                                errorMessage += ` ${error.response.data.detail || ''}`;\r\n                            }\r\n                            if (showNotification) {\r\n                                showNotification(errorMessage, \"error\");\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return {\r\n        draggedItem,\r\n        handleDragStart,\r\n        handleDragEnd,\r\n        handleDragOver,\r\n        handleDragLeave,\r\n        processDragDrop\r\n    };\r\n};\r\n\r\nexport default useDragDrop;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AAEvC,MAAMC,WAAW,GAAGA,CAACC,SAAS,EAAEC,YAAY,EAAEC,gBAAgB,KAAK;EAAAC,EAAA;EAC/D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM;IAAEU;EAAkB,CAAC,GAAGR,WAAW,CAAC,CAAC;;EAE3C;;EAEA;EACA,MAAMS,eAAe,GAAG,MAAAA,CAAOC,KAAK,EAAEC,SAAS,EAAEC,cAAc,KAAK;IAChEF,KAAK,CAACG,cAAc,CAAC,CAAC;IAEtB,IAAIH,KAAK,CAACI,aAAa,CAACC,SAAS,EAAE;MAC/BL,KAAK,CAACI,aAAa,CAACC,SAAS,CAACC,MAAM,CAAC,aAAa,CAAC;IACvD;IAEA,MAAMC,SAAS,GAAGP,KAAK,CAACQ,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAC1D,MAAMC,cAAc,GAAGV,KAAK,CAACQ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAE7D,IAAIF,SAAS,IAAIA,SAAS,KAAKN,SAAS,EAAE;MACtC,MAAMU,UAAU,GAAGnB,SAAS,CAACoB,aAAa,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKR,SAAS,CAAC;MAC/E,MAAMS,UAAU,GAAGxB,SAAS,CAACoB,aAAa,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKd,SAAS,CAAC;MAE/E,IAAIU,UAAU,IAAIK,UAAU,EAAE;QAC1BlB,iBAAiB,CAAC;UACdmB,KAAK,EAAE,sBAAsB;UAC7BC,OAAO,EAAE,sCAAsCP,UAAU,CAACQ,QAAQ,OAAOH,UAAU,CAACG,QAAQ,KAAKH,UAAU,CAACI,KAAK,IAAI;UACrHC,WAAW,EAAE,MAAM;UACnBC,SAAS,EAAE,MAAAA,CAAA,KAAY;YACnB;YACA7B,YAAY,CAAE8B,IAAI,IAAK;cACnB,IAAIC,oBAAoB,GAAG,CAAC,GAAGD,IAAI,CAACX,aAAa,CAAC;cAClD,IAAIa,oBAAoB,GAAG,CAAC,GAAGF,IAAI,CAACG,aAAa,CAAC;;cAElD;cACAD,oBAAoB,GAAGA,oBAAoB,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKtB,SAAS,CAAC;cAEjF,IAAII,UAAU,CAACQ,QAAQ,KAAK,WAAW,IAAIH,UAAU,CAACG,QAAQ,KAAK,QAAQ,EAAE;gBACzEM,oBAAoB,CAACK,IAAI,CAAC;kBAAEC,IAAI,EAAE9B,SAAS;kBAAE4B,EAAE,EAAEtB;gBAAU,CAAC,CAAC;cACjE,CAAC,MACI,IAAII,UAAU,CAACQ,QAAQ,KAAK,QAAQ,IAAIH,UAAU,CAACG,QAAQ,KAAK,QAAQ,EAAE;gBAC3EM,oBAAoB,GAAGA,oBAAoB,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKtB,SAAS,CAAC;gBACjFkB,oBAAoB,CAACK,IAAI,CAAC;kBAAEC,IAAI,EAAE9B,SAAS;kBAAE4B,EAAE,EAAEtB;gBAAU,CAAC,CAAC;cACjE;cAEA,OAAO;gBACH,GAAGgB,IAAI;gBACPX,aAAa,EAAEY,oBAAoB;gBACnCE,aAAa,EAAED;cACnB,CAAC;YACL,CAAC,CAAC;;YAEF;YACA,IAAI;cACA,MAAMO,QAAQ,GAAG,MAAM3C,KAAK,CAAC4C,IAAI,CAAC,wCAAwC,EAAE;gBACxEC,MAAM,EAAE3B,SAAS;gBACjB4B,MAAM,EAAElC,SAAS;gBACjBmC,UAAU,EAAEzB,UAAU,CAACQ,QAAQ;gBAC/BkB,UAAU,EAAErB,UAAU,CAACG;cAC3B,CAAC,CAAC;cAEF,IAAIa,QAAQ,CAACM,IAAI,CAACpB,OAAO,KAAK,gDAAgD,EAAE;gBAC5E,IAAIxB,gBAAgB,EAAE;kBAClBA,gBAAgB,CAAC,yBAAyB,EAAE,SAAS,CAAC;gBAC1D;cACJ;YACJ,CAAC,CAAC,OAAO6C,KAAK,EAAE;cACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;cACrD,IAAIE,YAAY,GAAG,oBAAoB;cACvC,IAAIF,KAAK,CAACP,QAAQ,IAAIO,KAAK,CAACP,QAAQ,CAACM,IAAI,EAAE;gBACvCG,YAAY,IAAI,IAAIF,KAAK,CAACP,QAAQ,CAACM,IAAI,CAACI,MAAM,IAAI,EAAE,EAAE;cAC1D;cACA,IAAIhD,gBAAgB,EAAE;gBAClBA,gBAAgB,CAAC+C,YAAY,EAAE,OAAO,CAAC;cAC3C;YACJ;UACJ;QACJ,CAAC,CAAC;MACN;IACJ;EACJ,CAAC;EAID,OAAO;IACH7C,WAAW;IACX+C,eAAe;IACfC,aAAa;IACbC,cAAc;IACdC,eAAe;IACf/C;EACJ,CAAC;AACL,CAAC;AAACJ,EAAA,CA1FIJ,WAAW;EAAA,QAEiBD,WAAW;AAAA;AA0F7C,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}