{"ast":null,"code":"import axios from 'axios';\nexport const handleDragStart = (event, key, category, setDraggedItem) => {\n  event.dataTransfer.setData(\"text/plain\", key);\n  event.dataTransfer.setData(\"category\", category);\n  setDraggedItem(key);\n  if (event.target.classList) {\n    event.target.classList.add(\"dragging\");\n  }\n};\nexport const handleDragEnd = (event, setDraggedItem) => {\n  if (event.target.classList) {\n    event.target.classList.remove(\"dragging\");\n  }\n  setDraggedItem(null);\n};\nexport const handleDragOver = event => {\n  event.preventDefault();\n  if (event.currentTarget.classList) {\n    event.currentTarget.classList.add(\"drop-target\");\n  }\n};\nexport const handleDragLeave = event => {\n  if (event.currentTarget.classList) {\n    event.currentTarget.classList.remove(\"drop-target\");\n  }\n};\nexport const processDragDrop = async (event, targetKey, targetCategory, graphData, setGraphData, fetchGraphData) => {\n  event.preventDefault();\n  if (event.currentTarget.classList) {\n    event.currentTarget.classList.remove(\"drop-target\");\n  }\n  const sourceKey = event.dataTransfer.getData(\"text/plain\");\n  const sourceCategory = event.dataTransfer.getData(\"category\");\n  if (sourceKey && sourceKey !== targetKey) {\n    setGraphData(prev => {\n      let updatedNodeDataArray = [...prev.nodeDataArray];\n      let updatedLinkDataArray = [...prev.linkDataArray];\n      const sourceNode = prev.nodeDataArray.find(node => node.key === sourceKey);\n      const targetNode = prev.nodeDataArray.find(node => node.key === targetKey);\n      if (sourceNode && targetNode) {\n        // Existing link removal and creation logic\n        updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\n        if (sourceNode.category === \"attribute\") {\n          if (targetNode.category === \"object\") {\n            updatedLinkDataArray.push({\n              from: targetKey,\n              to: sourceKey\n            });\n          } else if (targetNode.category === \"system\") {\n            const linkedObject = updatedNodeDataArray.find(node => prev.linkDataArray.some(link => link.from === node.key && link.to === sourceKey));\n            if (linkedObject) {\n              updatedLinkDataArray = updatedLinkDataArray.filter(link => link.from !== linkedObject.key && link.to !== sourceKey);\n            }\n            const objects = updatedNodeDataArray.filter(node => node.category === \"object\");\n            const objectLinks = updatedLinkDataArray.filter(link => link.to !== sourceKey && objects.some(obj => obj.key === link.from));\n            if (objectLinks.length > 0) {\n              const parentObject = objects.find(obj => objectLinks.some(l => l.from === obj.key));\n              if (parentObject) {\n                updatedLinkDataArray.push({\n                  from: targetKey,\n                  to: parentObject.key\n                });\n                updatedLinkDataArray.push({\n                  from: parentObject.key,\n                  to: sourceKey\n                });\n              }\n            }\n          }\n        } else if (sourceNode.category === \"object\") {\n          if (targetNode.category === \"system\") {\n            updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\n            updatedLinkDataArray.push({\n              from: targetKey,\n              to: sourceKey\n            });\n          }\n        }\n      }\n      return {\n        ...prev,\n        nodeDataArray: updatedNodeDataArray,\n        linkDataArray: updatedLinkDataArray\n      };\n    });\n\n    // Send drag-drop changes to backend\n    try {\n      const sourceNode = graphData.nodeDataArray.find(node => node.key === sourceKey);\n      const targetNode = graphData.nodeDataArray.find(node => node.key === targetKey);\n      const response = await axios.post(\"http://localhost:8000/apply-drag-drop/\", {\n        source: sourceKey,\n        target: targetKey,\n        sourceType: sourceNode.category,\n        targetType: targetNode.category\n      });\n      if (response.data.message === \"Drag-and-drop operation completed successfully\") {\n        await fetchGraphData();\n      }\n    } catch (error) {\n      console.error(\"Error applying drag and drop:\", error);\n      let errorMessage = \"Error applying drag and drop.\";\n      if (error.response && error.response.data) {\n        errorMessage += ` ${error.response.data.detail || ''}`;\n      }\n      alert(errorMessage);\n    }\n  }\n};","map":{"version":3,"names":["axios","handleDragStart","event","key","category","setDraggedItem","dataTransfer","setData","target","classList","add","handleDragEnd","remove","handleDragOver","preventDefault","currentTarget","handleDragLeave","processDragDrop","targetKey","targetCategory","graphData","setGraphData","fetchGraphData","sourceKey","getData","sourceCategory","prev","updatedNodeDataArray","nodeDataArray","updatedLinkDataArray","linkDataArray","sourceNode","find","node","targetNode","filter","link","to","push","from","linkedObject","some","objects","objectLinks","obj","length","parentObject","l","response","post","source","sourceType","targetType","data","message","error","console","errorMessage","detail","alert"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/TableVisualization/DragDropUtils.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const handleDragStart = (event, key, category, setDraggedItem) => {\r\n    event.dataTransfer.setData(\"text/plain\", key);\r\n    event.dataTransfer.setData(\"category\", category);\r\n    setDraggedItem(key);\r\n    \r\n    if (event.target.classList) {\r\n        event.target.classList.add(\"dragging\");\r\n    }\r\n};\r\n\r\nexport const handleDragEnd = (event, setDraggedItem) => {\r\n    if (event.target.classList) {\r\n        event.target.classList.remove(\"dragging\");\r\n    }\r\n    setDraggedItem(null);\r\n};\r\n\r\nexport const handleDragOver = (event) => {\r\n    event.preventDefault();\r\n    if (event.currentTarget.classList) {\r\n        event.currentTarget.classList.add(\"drop-target\");\r\n    }\r\n};\r\n\r\nexport const handleDragLeave = (event) => {\r\n    if (event.currentTarget.classList) {\r\n        event.currentTarget.classList.remove(\"drop-target\");\r\n    }\r\n};\r\n\r\nexport const processDragDrop = async (\r\n    event, \r\n    targetKey, \r\n    targetCategory, \r\n    graphData, \r\n    setGraphData, \r\n    fetchGraphData\r\n) => {\r\n    event.preventDefault();\r\n    \r\n    if (event.currentTarget.classList) {\r\n        event.currentTarget.classList.remove(\"drop-target\");\r\n    }\r\n    \r\n    const sourceKey = event.dataTransfer.getData(\"text/plain\");\r\n    const sourceCategory = event.dataTransfer.getData(\"category\");\r\n\r\n    if (sourceKey && sourceKey !== targetKey) {\r\n        setGraphData((prev) => {\r\n            let updatedNodeDataArray = [...prev.nodeDataArray];\r\n            let updatedLinkDataArray = [...prev.linkDataArray];\r\n\r\n            const sourceNode = prev.nodeDataArray.find(node => node.key === sourceKey);\r\n            const targetNode = prev.nodeDataArray.find(node => node.key === targetKey);\r\n            \r\n            if (sourceNode && targetNode) {\r\n                // Existing link removal and creation logic\r\n                updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\r\n\r\n                if (sourceNode.category === \"attribute\") {\r\n                    if (targetNode.category === \"object\") {\r\n                        updatedLinkDataArray.push({ from: targetKey, to: sourceKey });\r\n                    }\r\n                    else if (targetNode.category === \"system\") {\r\n                        const linkedObject = updatedNodeDataArray.find(node =>\r\n                            prev.linkDataArray.some(link => link.from === node.key && link.to === sourceKey)\r\n                        );\r\n                        if (linkedObject) {\r\n                            updatedLinkDataArray = updatedLinkDataArray.filter(link => \r\n                                link.from !== linkedObject.key && link.to !== sourceKey\r\n                            );\r\n                        }\r\n\r\n                        const objects = updatedNodeDataArray.filter(node => node.category === \"object\");\r\n                        const objectLinks = updatedLinkDataArray.filter(link => \r\n                            link.to !== sourceKey && objects.some(obj => obj.key === link.from)\r\n                        );\r\n                        \r\n                        if (objectLinks.length > 0) {\r\n                            const parentObject = objects.find(obj => \r\n                                objectLinks.some(l => l.from === obj.key)\r\n                            );\r\n                            if (parentObject) {\r\n                                updatedLinkDataArray.push({ from: targetKey, to: parentObject.key });\r\n                                updatedLinkDataArray.push({ from: parentObject.key, to: sourceKey });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (sourceNode.category === \"object\") {\r\n                    if (targetNode.category === \"system\") {\r\n                        updatedLinkDataArray = updatedLinkDataArray.filter(link => link.to !== sourceKey);\r\n                        updatedLinkDataArray.push({ from: targetKey, to: sourceKey });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...prev,\r\n                nodeDataArray: updatedNodeDataArray,\r\n                linkDataArray: updatedLinkDataArray,\r\n            };\r\n        });\r\n\r\n        // Send drag-drop changes to backend\r\n        try {\r\n            const sourceNode = graphData.nodeDataArray.find(node => node.key === sourceKey);\r\n            const targetNode = graphData.nodeDataArray.find(node => node.key === targetKey);\r\n            \r\n            const response = await axios.post(\"http://localhost:8000/apply-drag-drop/\", {\r\n                source: sourceKey,\r\n                target: targetKey,\r\n                sourceType: sourceNode.category,\r\n                targetType: targetNode.category\r\n            });\r\n            \r\n            if (response.data.message === \"Drag-and-drop operation completed successfully\") {\r\n                await fetchGraphData();\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error applying drag and drop:\", error);\r\n            let errorMessage = \"Error applying drag and drop.\";\r\n            if (error.response && error.response.data) {\r\n                errorMessage += ` ${error.response.data.detail || ''}`;\r\n            }\r\n            alert(errorMessage);\r\n        }\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}