{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport axios from \"axios\";\nconst useAppState = () => {\n  _s();\n  // Main state\n  const [graphData, setGraphData] = useState(null);\n  const [popup, setPopup] = useState({\n    isOpen: false,\n    key: null,\n    value: \"\",\n    name: \"\"\n  });\n  const [dimensions, setDimensions] = useState({\n    width: \"100%\",\n    height: \"600px\"\n  });\n  const [showHarmonisedColumn, setShowHarmonisedColumn] = useState(false);\n  const [showDiagram, setShowDiagram] = useState(false);\n  const [isDiagramMinimized, setIsDiagramMinimized] = useState(false);\n\n  // Confirmation dialog state\n  const [confirmDialog, setConfirmDialog] = useState({\n    isOpen: false,\n    title: \"\",\n    message: \"\",\n    confirmText: \"\",\n    cancelText: \"\",\n    onConfirm: () => {}\n  });\n\n  // AI thinking state\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [aiProgress, setAIProgress] = useState(0);\n  const [aiMessage, setAIMessage] = useState(\"Analyzing data...\");\n\n  // Safely sanitize node data\n  const sanitizeNodeData = node => {\n    // Ensure we're only working with primitive values\n    return {\n      key: String(node.key || ''),\n      category: String(node.category || ''),\n      label: String(node.label || ''),\n      hoverLabel: String(node.hoverLabel || ''),\n      harmonisedAttribute: String(node.harmonisedAttribute || '')\n    };\n  };\n\n  // Popup management functions\n  const openPopup = (key, currentValue, currentName) => {\n    setPopup({\n      isOpen: true,\n      key: String(key),\n      value: String(currentValue || \"\"),\n      name: String(currentName || \"\")\n    });\n  };\n  const closePopup = () => {\n    setPopup({\n      isOpen: false,\n      key: null,\n      value: \"\",\n      name: \"\"\n    });\n  };\n  const savePopupChanges = showNotification => {\n    const updatedValue = String(popup.value || '');\n    const updatedName = String(popup.name || '');\n    setGraphData(prev => {\n      // Ensure prev is an object and has nodeDataArray\n      if (!prev || !Array.isArray(prev.nodeDataArray)) {\n        console.warn('Invalid graph data structure');\n        return prev;\n      }\n\n      // Create a new array with sanitized nodes\n      const updatedNodeDataArray = prev.nodeDataArray.map(node => node.key === popup.key ? {\n        ...sanitizeNodeData(node),\n        hoverLabel: updatedValue,\n        label: updatedName\n      } : sanitizeNodeData(node));\n      return {\n        ...prev,\n        nodeDataArray: updatedNodeDataArray\n      };\n    });\n    closePopup();\n\n    // Show saving indicator\n    if (showNotification) {\n      showNotification(\"Changes saved successfully.\", \"success\");\n    }\n  };\n  const handleLabelChange = (event, key) => {\n    const updatedValue = String(event.target.value || '');\n    setGraphData(prev => {\n      // Ensure prev is an object and has nodeDataArray\n      if (!prev || !Array.isArray(prev.nodeDataArray)) {\n        console.warn('Invalid graph data structure');\n        return prev;\n      }\n\n      // Create a new array with sanitized nodes\n      const updatedNodeDataArray = prev.nodeDataArray.map(node => node.key === key ? {\n        ...sanitizeNodeData(node),\n        hoverLabel: updatedValue\n      } : sanitizeNodeData(node));\n      return {\n        ...prev,\n        nodeDataArray: updatedNodeDataArray\n      };\n    });\n  };\n\n  // Confirmation dialog functions\n  const showConfirmDialog = config => {\n    setConfirmDialog({\n      isOpen: true,\n      title: config.title || \"Confirm Action\",\n      message: config.message || \"Are you sure you want to proceed?\",\n      confirmText: config.confirmText || \"Confirm\",\n      cancelText: config.cancelText || \"Cancel\",\n      onConfirm: config.onConfirm || (() => {})\n    });\n  };\n  const hideConfirmDialog = () => {\n    setConfirmDialog({\n      ...confirmDialog,\n      isOpen: false\n    });\n  };\n\n  // AI thinking functions\n  const startAIProcessing = (initialMessage = \"Analyzing data...\") => {\n    setIsAIThinking(true);\n    setAIMessage(initialMessage);\n    setAIProgress(0);\n    return {\n      updateProgress: (progress, message) => {\n        setAIProgress(progress);\n        if (message) setAIMessage(message);\n      },\n      complete: () => {\n        setAIProgress(100);\n        setTimeout(() => setIsAIThinking(false), 500);\n      }\n    };\n  };\n\n  // Load attribute descriptions\n  const loadAttributeDescriptions = async (isLoading, showNotification) => {\n    if (isLoading) return;\n    showConfirmDialog({\n      title: \"Generate Attribute Definitions?\",\n      message: \"This will use AI to analyze your attributes and generate meaningful definitions based on relationships and naming patterns.\",\n      confirmText: \"Generate Definitions\",\n      onConfirm: async () => {\n        // Start AI processing animation\n        const aiProcess = startAIProcessing(\"Analyzing attribute patterns...\");\n        try {\n          // First tell the backend to prepare descriptions\n          await axios.post(\"http://localhost:8000/load-descriptions/\");\n\n          // Simulate AI progress with different stages\n          const stages = [\"Analyzing attribute patterns...\", \"Extracting semantic meaning from names...\", \"Correlating with known domain concepts...\", \"Generating natural language definitions...\", \"Finalizing harmonized attributes...\"];\n          let currentStage = 0;\n          let progress = 0;\n          const interval = setInterval(() => {\n            progress += 2;\n\n            // Update message at certain thresholds\n            if (progress % 20 === 0 && currentStage < stages.length - 1) {\n              currentStage++;\n              aiProcess.updateProgress(progress, stages[currentStage]);\n            }\n            if (progress >= 100) {\n              clearInterval(interval);\n\n              // Call the real API endpoint\n              axios.get(\"http://localhost:8000/graph-data/\").then(response => {\n                // Sanitize the received data\n                const sanitizedData = {\n                  nodeDataArray: (response.data.nodeDataArray || []).map(sanitizeNodeData),\n                  linkDataArray: response.data.linkDataArray || []\n                };\n                setGraphData(sanitizedData);\n                aiProcess.complete();\n                if (showNotification) {\n                  showNotification(\"Definitions generated successfully!\", \"success\");\n                }\n              }).catch(error => {\n                console.error(\"Error generating definitions:\", error);\n                aiProcess.complete();\n                if (showNotification) {\n                  showNotification(\"Error generating definitions.\", \"error\");\n                }\n              });\n            } else {\n              aiProcess.updateProgress(progress);\n            }\n          }, 50);\n        } catch (error) {\n          console.error(\"Error generating definitions:\", error);\n          aiProcess.complete();\n          if (showNotification) {\n            showNotification(\"Error generating definitions.\", \"error\");\n          }\n        }\n      }\n    });\n  };\n\n  // Toggle harmonised column visibility\n  const toggleHarmonisedColumn = () => {\n    setShowHarmonisedColumn(prev => !prev);\n  };\n\n  // Toggle diagram visibility\n  const toggleDiagram = showNotification => {\n    if (!graphData && showNotification) {\n      showNotification(\"Please upload data first.\", \"error\");\n      return;\n    }\n    setShowDiagram(prev => !prev);\n    setIsDiagramMinimized(false);\n  };\n\n  // Minimize/maximize diagram\n  const toggleMinimizeDiagram = () => {\n    setIsDiagramMinimized(prev => !prev);\n  };\n  return {\n    graphData,\n    setGraphData,\n    popup,\n    setPopup,\n    dimensions,\n    setDimensions,\n    showHarmonisedColumn,\n    setShowHarmonisedColumn,\n    showDiagram,\n    setShowDiagram,\n    isDiagramMinimized,\n    setIsDiagramMinimized,\n    confirmDialog,\n    showConfirmDialog,\n    hideConfirmDialog,\n    isAIThinking,\n    aiProgress,\n    aiMessage,\n    startAIProcessing,\n    handleLabelChange,\n    openPopup,\n    closePopup,\n    savePopupChanges,\n    loadAttributeDescriptions,\n    toggleHarmonisedColumn,\n    toggleDiagram,\n    toggleMinimizeDiagram\n  };\n};\n_s(useAppState, \"1Lu4n4U2tOKdmByJBN7BfvNuXjE=\");\nexport default useAppState;","map":{"version":3,"names":["useState","useRef","axios","useAppState","_s","graphData","setGraphData","popup","setPopup","isOpen","key","value","name","dimensions","setDimensions","width","height","showHarmonisedColumn","setShowHarmonisedColumn","showDiagram","setShowDiagram","isDiagramMinimized","setIsDiagramMinimized","confirmDialog","setConfirmDialog","title","message","confirmText","cancelText","onConfirm","isAIThinking","setIsAIThinking","aiProgress","setAIProgress","aiMessage","setAIMessage","sanitizeNodeData","node","String","category","label","hoverLabel","harmonisedAttribute","openPopup","currentValue","currentName","closePopup","savePopupChanges","showNotification","updatedValue","updatedName","prev","Array","isArray","nodeDataArray","console","warn","updatedNodeDataArray","map","handleLabelChange","event","target","showConfirmDialog","config","hideConfirmDialog","startAIProcessing","initialMessage","updateProgress","progress","complete","setTimeout","loadAttributeDescriptions","isLoading","aiProcess","post","stages","currentStage","interval","setInterval","length","clearInterval","get","then","response","sanitizedData","data","linkDataArray","catch","error","toggleHarmonisedColumn","toggleDiagram","toggleMinimizeDiagram"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useAppState.js"],"sourcesContent":["import { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useAppState = () => {\r\n    // Main state\r\n    const [graphData, setGraphData] = useState(null);\r\n    const [popup, setPopup] = useState({ isOpen: false, key: null, value: \"\", name: \"\" });\r\n    const [dimensions, setDimensions] = useState({ width: \"100%\", height: \"600px\" });\r\n    const [showHarmonisedColumn, setShowHarmonisedColumn] = useState(false);\r\n    const [showDiagram, setShowDiagram] = useState(false);\r\n    const [isDiagramMinimized, setIsDiagramMinimized] = useState(false);\r\n\r\n    // Confirmation dialog state\r\n    const [confirmDialog, setConfirmDialog] = useState({ \r\n        isOpen: false, \r\n        title: \"\", \r\n        message: \"\", \r\n        confirmText: \"\", \r\n        cancelText: \"\", \r\n        onConfirm: () => {} \r\n    });\r\n\r\n    // AI thinking state\r\n    const [isAIThinking, setIsAIThinking] = useState(false);\r\n    const [aiProgress, setAIProgress] = useState(0);\r\n    const [aiMessage, setAIMessage] = useState(\"Analyzing data...\");\r\n\r\n    // Safely sanitize node data\r\n    const sanitizeNodeData = (node) => {\r\n        // Ensure we're only working with primitive values\r\n        return {\r\n            key: String(node.key || ''),\r\n            category: String(node.category || ''),\r\n            label: String(node.label || ''),\r\n            hoverLabel: String(node.hoverLabel || ''),\r\n            harmonisedAttribute: String(node.harmonisedAttribute || '')\r\n        };\r\n    };\r\n\r\n    // Popup management functions\r\n    const openPopup = (key, currentValue, currentName) => {\r\n        setPopup({ \r\n            isOpen: true, \r\n            key: String(key), \r\n            value: String(currentValue || \"\"), \r\n            name: String(currentName || \"\") \r\n        });\r\n    };\r\n\r\n    const closePopup = () => {\r\n        setPopup({ isOpen: false, key: null, value: \"\", name: \"\" });\r\n    };\r\n\r\n    const savePopupChanges = (showNotification) => {\r\n        const updatedValue = String(popup.value || '');\r\n        const updatedName = String(popup.name || '');\r\n        \r\n        setGraphData((prev) => {\r\n            // Ensure prev is an object and has nodeDataArray\r\n            if (!prev || !Array.isArray(prev.nodeDataArray)) {\r\n                console.warn('Invalid graph data structure');\r\n                return prev;\r\n            }\r\n\r\n            // Create a new array with sanitized nodes\r\n            const updatedNodeDataArray = prev.nodeDataArray.map((node) => \r\n                node.key === popup.key \r\n                    ? { \r\n                        ...sanitizeNodeData(node), \r\n                        hoverLabel: updatedValue,\r\n                        label: updatedName \r\n                      }\r\n                    : sanitizeNodeData(node)\r\n            );\r\n\r\n            return {\r\n                ...prev,\r\n                nodeDataArray: updatedNodeDataArray\r\n            };\r\n        });\r\n        \r\n        closePopup();\r\n        \r\n        // Show saving indicator\r\n        if (showNotification) {\r\n            showNotification(\"Changes saved successfully.\", \"success\");\r\n        }\r\n    };\r\n\r\n    const handleLabelChange = (event, key) => {\r\n        const updatedValue = String(event.target.value || '');\r\n        \r\n        setGraphData((prev) => {\r\n            // Ensure prev is an object and has nodeDataArray\r\n            if (!prev || !Array.isArray(prev.nodeDataArray)) {\r\n                console.warn('Invalid graph data structure');\r\n                return prev;\r\n            }\r\n\r\n            // Create a new array with sanitized nodes\r\n            const updatedNodeDataArray = prev.nodeDataArray.map((node) => \r\n                node.key === key \r\n                    ? { \r\n                        ...sanitizeNodeData(node), \r\n                        hoverLabel: updatedValue \r\n                      }\r\n                    : sanitizeNodeData(node)\r\n            );\r\n\r\n            return {\r\n                ...prev,\r\n                nodeDataArray: updatedNodeDataArray\r\n            };\r\n        });\r\n    };\r\n\r\n    // Confirmation dialog functions\r\n    const showConfirmDialog = (config) => {\r\n        setConfirmDialog({\r\n            isOpen: true,\r\n            title: config.title || \"Confirm Action\",\r\n            message: config.message || \"Are you sure you want to proceed?\",\r\n            confirmText: config.confirmText || \"Confirm\",\r\n            cancelText: config.cancelText || \"Cancel\",\r\n            onConfirm: config.onConfirm || (() => {}),\r\n        });\r\n    };\r\n\r\n    const hideConfirmDialog = () => {\r\n        setConfirmDialog({ ...confirmDialog, isOpen: false });\r\n    };\r\n\r\n    // AI thinking functions\r\n    const startAIProcessing = (initialMessage = \"Analyzing data...\") => {\r\n        setIsAIThinking(true);\r\n        setAIMessage(initialMessage);\r\n        setAIProgress(0);\r\n        \r\n        return {\r\n            updateProgress: (progress, message) => {\r\n                setAIProgress(progress);\r\n                if (message) setAIMessage(message);\r\n            },\r\n            complete: () => {\r\n                setAIProgress(100);\r\n                setTimeout(() => setIsAIThinking(false), 500);\r\n            }\r\n        };\r\n    };\r\n\r\n    // Load attribute descriptions\r\n    const loadAttributeDescriptions = async (isLoading, showNotification) => {\r\n        if (isLoading) return;\r\n        \r\n        showConfirmDialog({\r\n            title: \"Generate Attribute Definitions?\",\r\n            message: \"This will use AI to analyze your attributes and generate meaningful definitions based on relationships and naming patterns.\",\r\n            confirmText: \"Generate Definitions\",\r\n            onConfirm: async () => {\r\n                // Start AI processing animation\r\n                const aiProcess = startAIProcessing(\"Analyzing attribute patterns...\");\r\n                \r\n                try {\r\n                    // First tell the backend to prepare descriptions\r\n                    await axios.post(\"http://localhost:8000/load-descriptions/\");\r\n                    \r\n                    // Simulate AI progress with different stages\r\n                    const stages = [\r\n                        \"Analyzing attribute patterns...\",\r\n                        \"Extracting semantic meaning from names...\",\r\n                        \"Correlating with known domain concepts...\",\r\n                        \"Generating natural language definitions...\",\r\n                        \"Finalizing harmonized attributes...\"\r\n                    ];\r\n                    \r\n                    let currentStage = 0;\r\n                    let progress = 0;\r\n                    \r\n                    const interval = setInterval(() => {\r\n                        progress += 2;\r\n                        \r\n                        // Update message at certain thresholds\r\n                        if (progress % 20 === 0 && currentStage < stages.length - 1) {\r\n                            currentStage++;\r\n                            aiProcess.updateProgress(progress, stages[currentStage]);\r\n                        }\r\n                        \r\n                        if (progress >= 100) {\r\n                            clearInterval(interval);\r\n                            \r\n                            // Call the real API endpoint\r\n                            axios.get(\"http://localhost:8000/graph-data/\")\r\n                                .then(response => {\r\n                                    // Sanitize the received data\r\n                                    const sanitizedData = {\r\n                                        nodeDataArray: (response.data.nodeDataArray || []).map(sanitizeNodeData),\r\n                                        linkDataArray: response.data.linkDataArray || []\r\n                                    };\r\n\r\n                                    setGraphData(sanitizedData);\r\n                                    aiProcess.complete();\r\n                                    \r\n                                    if (showNotification) {\r\n                                        showNotification(\"Definitions generated successfully!\", \"success\");\r\n                                    }\r\n                                })\r\n                                .catch(error => {\r\n                                    console.error(\"Error generating definitions:\", error);\r\n                                    aiProcess.complete();\r\n                                    if (showNotification) {\r\n                                        showNotification(\"Error generating definitions.\", \"error\");\r\n                                    }\r\n                                });\r\n                        } else {\r\n                            aiProcess.updateProgress(progress);\r\n                        }\r\n                    }, 50);\r\n                } catch (error) {\r\n                    console.error(\"Error generating definitions:\", error);\r\n                    aiProcess.complete();\r\n                    if (showNotification) {\r\n                        showNotification(\"Error generating definitions.\", \"error\");\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // Toggle harmonised column visibility\r\n    const toggleHarmonisedColumn = () => {\r\n        setShowHarmonisedColumn(prev => !prev);\r\n    };\r\n\r\n    // Toggle diagram visibility\r\n    const toggleDiagram = (showNotification) => {\r\n        if (!graphData && showNotification) {\r\n            showNotification(\"Please upload data first.\", \"error\");\r\n            return;\r\n        }\r\n        setShowDiagram(prev => !prev);\r\n        setIsDiagramMinimized(false);\r\n    };\r\n\r\n    // Minimize/maximize diagram\r\n    const toggleMinimizeDiagram = () => {\r\n        setIsDiagramMinimized(prev => !prev);\r\n    };\r\n\r\n    return {\r\n        graphData, \r\n        setGraphData,\r\n        popup, \r\n        setPopup,\r\n        dimensions, \r\n        setDimensions,\r\n        showHarmonisedColumn, \r\n        setShowHarmonisedColumn,\r\n        showDiagram, \r\n        setShowDiagram,\r\n        isDiagramMinimized, \r\n        setIsDiagramMinimized,\r\n        confirmDialog,\r\n        showConfirmDialog,\r\n        hideConfirmDialog,\r\n        isAIThinking,\r\n        aiProgress,\r\n        aiMessage,\r\n        startAIProcessing,\r\n        handleLabelChange,\r\n        openPopup,\r\n        closePopup,\r\n        savePopupChanges,\r\n        loadAttributeDescriptions,\r\n        toggleHarmonisedColumn,\r\n        toggleDiagram,\r\n        toggleMinimizeDiagram\r\n    };\r\n};\r\n\r\nexport default useAppState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}