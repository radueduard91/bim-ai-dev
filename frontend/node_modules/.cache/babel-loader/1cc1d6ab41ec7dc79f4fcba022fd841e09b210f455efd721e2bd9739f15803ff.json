{"ast":null,"code":"export const filterAndSortRows = (sortedRows, searchTerm, filterCategory, sortConfig) => {\n  let result = [...sortedRows];\n\n  // Search filter\n  if (searchTerm) {\n    const searchTermLower = searchTerm.toLowerCase();\n    result = result.filter(row => {\n      var _row$attr$hoverLabel, _row$parentObject, _row$parentObject$lab, _row$parentCluster, _row$parentCluster$la;\n      return row.attr.label.toLowerCase().includes(searchTermLower) || ((_row$attr$hoverLabel = row.attr.hoverLabel) === null || _row$attr$hoverLabel === void 0 ? void 0 : _row$attr$hoverLabel.toLowerCase().includes(searchTermLower)) || ((_row$parentObject = row.parentObject) === null || _row$parentObject === void 0 ? void 0 : (_row$parentObject$lab = _row$parentObject.label) === null || _row$parentObject$lab === void 0 ? void 0 : _row$parentObject$lab.toLowerCase().includes(searchTermLower)) || ((_row$parentCluster = row.parentCluster) === null || _row$parentCluster === void 0 ? void 0 : (_row$parentCluster$la = _row$parentCluster.label) === null || _row$parentCluster$la === void 0 ? void 0 : _row$parentCluster$la.toLowerCase().includes(searchTermLower));\n    });\n  }\n\n  // Category filter\n  if (filterCategory !== \"all\") {\n    result = result.filter(row => {\n      var _row$parentCluster2, _row$parentObject2;\n      if (filterCategory === \"unlinked\") {\n        return !row.parentCluster && !row.parentObject;\n      }\n      return ((_row$parentCluster2 = row.parentCluster) === null || _row$parentCluster2 === void 0 ? void 0 : _row$parentCluster2.label) === filterCategory || ((_row$parentObject2 = row.parentObject) === null || _row$parentObject2 === void 0 ? void 0 : _row$parentObject2.label) === filterCategory;\n    });\n  }\n\n  // Sorting\n  if (sortConfig.key) {\n    result.sort((a, b) => {\n      var _a$parentCluster, _b$parentCluster, _a$parentObject, _b$parentObject;\n      let aValue, bValue;\n      switch (sortConfig.key) {\n        case 'cluster':\n          aValue = ((_a$parentCluster = a.parentCluster) === null || _a$parentCluster === void 0 ? void 0 : _a$parentCluster.label) || 'Unlinked';\n          bValue = ((_b$parentCluster = b.parentCluster) === null || _b$parentCluster === void 0 ? void 0 : _b$parentCluster.label) || 'Unlinked';\n          break;\n        case 'object':\n          aValue = ((_a$parentObject = a.parentObject) === null || _a$parentObject === void 0 ? void 0 : _a$parentObject.label) || 'Unlinked';\n          bValue = ((_b$parentObject = b.parentObject) === null || _b$parentObject === void 0 ? void 0 : _b$parentObject.label) || 'Unlinked';\n          break;\n        case 'attribute':\n          aValue = a.attr.label;\n          bValue = b.attr.label;\n          break;\n        default:\n          return 0;\n      }\n      if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }\n  return result;\n};\nexport const getUniqueCategories = sortedRows => {\n  const clusters = new Set();\n  const objects = new Set();\n  sortedRows.forEach(row => {\n    if (row.parentCluster) {\n      clusters.add(row.parentCluster.label);\n    }\n    if (row.parentObject) {\n      objects.add(row.parentObject.label);\n    }\n  });\n  return {\n    clusters: Array.from(clusters),\n    objects: Array.from(objects)\n  };\n};\nexport const getCellColor = (category, isHovered) => {\n  if (isHovered) {\n    switch (category) {\n      case \"system\":\n        return \"#dbeafe\";\n      // Light blue\n      case \"object\":\n        return \"#dcfce7\";\n      // Light green\n      case \"attribute\":\n        return \"#fce7f3\";\n      // Light pink\n      default:\n        return \"#f8fafc\";\n      // Light gray\n    }\n  }\n  return \"transparent\";\n};\nexport const getCellBorderStyle = (rowIndex, isFirst = false, isLast = false) => {\n  return {\n    borderBottom: \"1px solid #e2e8f0\",\n    borderRight: \"1px solid #e2e8f0\",\n    borderLeft: isFirst ? \"1px solid #e2e8f0\" : \"none\",\n    borderTop: rowIndex === 0 ? \"1px solid #e2e8f0\" : \"none\"\n  };\n};","map":{"version":3,"names":["filterAndSortRows","sortedRows","searchTerm","filterCategory","sortConfig","result","searchTermLower","toLowerCase","filter","row","_row$attr$hoverLabel","_row$parentObject","_row$parentObject$lab","_row$parentCluster","_row$parentCluster$la","attr","label","includes","hoverLabel","parentObject","parentCluster","_row$parentCluster2","_row$parentObject2","key","sort","a","b","_a$parentCluster","_b$parentCluster","_a$parentObject","_b$parentObject","aValue","bValue","direction","getUniqueCategories","clusters","Set","objects","forEach","add","Array","from","getCellColor","category","isHovered","getCellBorderStyle","rowIndex","isFirst","isLast","borderBottom","borderRight","borderLeft","borderTop"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/TableVisualization/FilterSortUtils.js"],"sourcesContent":["export const filterAndSortRows = (\r\n    sortedRows, \r\n    searchTerm, \r\n    filterCategory, \r\n    sortConfig\r\n) => {\r\n    let result = [...sortedRows];\r\n\r\n    // Search filter\r\n    if (searchTerm) {\r\n        const searchTermLower = searchTerm.toLowerCase();\r\n        result = result.filter(row => \r\n            row.attr.label.toLowerCase().includes(searchTermLower) ||\r\n            row.attr.hoverLabel?.toLowerCase().includes(searchTermLower) ||\r\n            row.parentObject?.label?.toLowerCase().includes(searchTermLower) ||\r\n            row.parentCluster?.label?.toLowerCase().includes(searchTermLower)\r\n        );\r\n    }\r\n\r\n    // Category filter\r\n    if (filterCategory !== \"all\") {\r\n        result = result.filter(row => {\r\n            if (filterCategory === \"unlinked\") {\r\n                return !row.parentCluster && !row.parentObject;\r\n            }\r\n            return row.parentCluster?.label === filterCategory || \r\n                   row.parentObject?.label === filterCategory;\r\n        });\r\n    }\r\n\r\n    // Sorting\r\n    if (sortConfig.key) {\r\n        result.sort((a, b) => {\r\n            let aValue, bValue;\r\n            switch (sortConfig.key) {\r\n                case 'cluster':\r\n                    aValue = a.parentCluster?.label || 'Unlinked';\r\n                    bValue = b.parentCluster?.label || 'Unlinked';\r\n                    break;\r\n                case 'object':\r\n                    aValue = a.parentObject?.label || 'Unlinked';\r\n                    bValue = b.parentObject?.label || 'Unlinked';\r\n                    break;\r\n                case 'attribute':\r\n                    aValue = a.attr.label;\r\n                    bValue = b.attr.label;\r\n                    break;\r\n                default:\r\n                    return 0;\r\n            }\r\n\r\n            if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;\r\n            if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const getUniqueCategories = (sortedRows) => {\r\n    const clusters = new Set();\r\n    const objects = new Set();\r\n\r\n    sortedRows.forEach(row => {\r\n        if (row.parentCluster) {\r\n            clusters.add(row.parentCluster.label);\r\n        }\r\n        if (row.parentObject) {\r\n            objects.add(row.parentObject.label);\r\n        }\r\n    });\r\n\r\n    return {\r\n        clusters: Array.from(clusters),\r\n        objects: Array.from(objects)\r\n    };\r\n};\r\n\r\nexport const getCellColor = (category, isHovered) => {\r\n    if (isHovered) {\r\n        switch (category) {\r\n            case \"system\": return \"#dbeafe\"; // Light blue\r\n            case \"object\": return \"#dcfce7\"; // Light green\r\n            case \"attribute\": return \"#fce7f3\"; // Light pink\r\n            default: return \"#f8fafc\"; // Light gray\r\n        }\r\n    }\r\n    \r\n    return \"transparent\";\r\n};\r\n\r\nexport const getCellBorderStyle = (rowIndex, isFirst = false, isLast = false) => {\r\n    return {\r\n        borderBottom: \"1px solid #e2e8f0\",\r\n        borderRight: \"1px solid #e2e8f0\", \r\n        borderLeft: isFirst ? \"1px solid #e2e8f0\" : \"none\",\r\n        borderTop: rowIndex === 0 ? \"1px solid #e2e8f0\" : \"none\"\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}