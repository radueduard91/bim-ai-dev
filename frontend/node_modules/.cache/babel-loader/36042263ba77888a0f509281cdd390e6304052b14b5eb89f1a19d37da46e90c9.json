{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R40008\\\\Asset Model Server\\\\python\\\\bim-ai-poc\\\\frontend\\\\src\\\\components\\\\DiagramPopup.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo } from \"react\";\nimport GraphVisualization from \"./GraphVisualization\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiagramPopup = ({\n  graphData,\n  dimensions,\n  setDimensions,\n  isDiagramMinimized,\n  toggleMinimizeDiagram,\n  toggleDiagram\n}) => {\n  _s();\n  const [isMaximized, setIsMaximized] = useState(false);\n  const [rfInstance, setRfInstance] = useState(null);\n  const containerRef = useRef(null);\n\n  // Safely process graph data\n  const safeGraphData = useMemo(() => {\n    // Ensure graphData is a valid object\n    if (!graphData || typeof graphData !== 'object') {\n      console.warn('Invalid graph data received:', graphData);\n      return null;\n    }\n\n    // Validate and sanitize node data array\n    const sanitizedNodeDataArray = Array.isArray(graphData.nodeDataArray) ? graphData.nodeDataArray.filter(node => {\n      // Ensure each node has required properties\n      const isValid = node && typeof node === 'object' && node.key && node.category && node.label;\n      if (!isValid) {\n        console.warn('Invalid node filtered out:', node);\n      }\n      return isValid;\n    }).map(node => ({\n      key: String(node.key),\n      category: String(node.category),\n      label: String(node.label),\n      hoverLabel: node.hoverLabel ? String(node.hoverLabel) : '',\n      harmonisedAttribute: node.harmonisedAttribute ? String(node.harmonisedAttribute) : ''\n    })) : [];\n\n    // Validate and sanitize link data array\n    const sanitizedLinkDataArray = Array.isArray(graphData.linkDataArray) ? graphData.linkDataArray.filter(link => {\n      // Ensure each link has from and to properties\n      const isValid = link && typeof link === 'object' && link.from && link.to;\n      if (!isValid) {\n        console.warn('Invalid link filtered out:', link);\n      }\n      return isValid;\n    }).map(link => ({\n      from: String(link.from),\n      to: String(link.to)\n    })) : [];\n    return {\n      nodeDataArray: sanitizedNodeDataArray,\n      linkDataArray: sanitizedLinkDataArray\n    };\n  }, [graphData]);\n\n  // Handle React Flow instance reference\n  const onInitReactFlow = instance => {\n    setRfInstance(instance);\n  };\n  const toggleMaximize = () => {\n    setIsMaximized(prev => !prev);\n  };\n\n  // Adjust flow instance when maximized state changes\n  useEffect(() => {\n    if (rfInstance && !isDiagramMinimized) {\n      // Give the component time to resize before fitting view\n      setTimeout(() => {\n        rfInstance.fitView({\n          padding: 0.2\n        });\n      }, 150);\n    }\n  }, [isMaximized, isDiagramMinimized, rfInstance]);\n\n  // Calculate dimensions based on container size\n  useEffect(() => {\n    if (containerRef.current && !isDiagramMinimized) {\n      const resizeObserver = new ResizeObserver(entries => {\n        const {\n          width,\n          height\n        } = entries[0].contentRect;\n        if (width > 0 && height > 0) {\n          setDimensions({\n            width: `${width}px`,\n            height: `${height - 50}px`\n          });\n        }\n      });\n      resizeObserver.observe(containerRef.current);\n      return () => resizeObserver.disconnect();\n    }\n  }, [isDiagramMinimized, setDimensions]);\n\n  // Safely compute dimensions\n  const computedDimensions = useMemo(() => {\n    // Validate and compute dimensions\n    const computeWidth = () => {\n      if (isMaximized) return \"100%\";\n      if (isDiagramMinimized) return \"300px\";\n      return (dimensions === null || dimensions === void 0 ? void 0 : dimensions.width) || \"800px\";\n    };\n    const computeHeight = () => {\n      if (isMaximized) return \"100%\";\n      if (isDiagramMinimized) return \"40px\";\n      return (dimensions === null || dimensions === void 0 ? void 0 : dimensions.height) || \"600px\";\n    };\n    return {\n      width: computeWidth(),\n      height: computeHeight()\n    };\n  }, [isMaximized, isDiagramMinimized, dimensions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: \"fixed\",\n      bottom: isDiagramMinimized ? \"0\" : \"20px\",\n      right: isDiagramMinimized ? \"0\" : \"20px\",\n      width: computedDimensions.width,\n      height: computedDimensions.height,\n      backgroundColor: \"white\",\n      borderRadius: isMaximized ? \"0\" : \"8px\",\n      boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.15)\",\n      overflow: \"hidden\",\n      zIndex: 1000,\n      transition: \"all 0.3s ease\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      left: isMaximized ? \"0\" : \"auto\",\n      top: isMaximized ? \"0\" : \"auto\"\n    },\n    children: !isDiagramMinimized && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: 1,\n        padding: \"0\",\n        overflow: \"hidden\",\n        height: \"calc(100% - 50px)\"\n      },\n      children: /*#__PURE__*/_jsxDEV(GraphVisualization, {\n        graphData: safeGraphData,\n        dimensions: isMaximized ? {\n          width: \"100%\",\n          height: \"calc(100vh - 80px)\"\n        } : computedDimensions,\n        setDimensions: setDimensions,\n        onInit: onInitReactFlow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n_s(DiagramPopup, \"N23OjOfrpO8xEkg2rKSrJCZfT4s=\");\n_c = DiagramPopup;\nexport default DiagramPopup;\nvar _c;\n$RefreshReg$(_c, \"DiagramPopup\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","GraphVisualization","jsxDEV","_jsxDEV","DiagramPopup","graphData","dimensions","setDimensions","isDiagramMinimized","toggleMinimizeDiagram","toggleDiagram","_s","isMaximized","setIsMaximized","rfInstance","setRfInstance","containerRef","safeGraphData","console","warn","sanitizedNodeDataArray","Array","isArray","nodeDataArray","filter","node","isValid","key","category","label","map","String","hoverLabel","harmonisedAttribute","sanitizedLinkDataArray","linkDataArray","link","from","to","onInitReactFlow","instance","toggleMaximize","prev","setTimeout","fitView","padding","current","resizeObserver","ResizeObserver","entries","width","height","contentRect","observe","disconnect","computedDimensions","computeWidth","computeHeight","ref","style","position","bottom","right","backgroundColor","borderRadius","boxShadow","overflow","zIndex","transition","display","flexDirection","left","top","children","flexGrow","onInit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/DiagramPopup.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from \"react\";\r\nimport GraphVisualization from \"./GraphVisualization\";\r\n\r\nconst DiagramPopup = ({ \r\n    graphData, \r\n    dimensions, \r\n    setDimensions, \r\n    isDiagramMinimized, \r\n    toggleMinimizeDiagram, \r\n    toggleDiagram \r\n}) => {\r\n    const [isMaximized, setIsMaximized] = useState(false);\r\n    const [rfInstance, setRfInstance] = useState(null);\r\n    const containerRef = useRef(null);\r\n    \r\n    // Safely process graph data\r\n    const safeGraphData = useMemo(() => {\r\n        // Ensure graphData is a valid object\r\n        if (!graphData || typeof graphData !== 'object') {\r\n            console.warn('Invalid graph data received:', graphData);\r\n            return null;\r\n        }\r\n\r\n        // Validate and sanitize node data array\r\n        const sanitizedNodeDataArray = Array.isArray(graphData.nodeDataArray)\r\n            ? graphData.nodeDataArray.filter(node => {\r\n                // Ensure each node has required properties\r\n                const isValid = node && \r\n                    typeof node === 'object' && \r\n                    node.key && \r\n                    node.category && \r\n                    node.label;\r\n                \r\n                if (!isValid) {\r\n                    console.warn('Invalid node filtered out:', node);\r\n                }\r\n                \r\n                return isValid;\r\n            }).map(node => ({\r\n                key: String(node.key),\r\n                category: String(node.category),\r\n                label: String(node.label),\r\n                hoverLabel: node.hoverLabel ? String(node.hoverLabel) : '',\r\n                harmonisedAttribute: node.harmonisedAttribute ? String(node.harmonisedAttribute) : ''\r\n            }))\r\n            : [];\r\n\r\n        // Validate and sanitize link data array\r\n        const sanitizedLinkDataArray = Array.isArray(graphData.linkDataArray)\r\n            ? graphData.linkDataArray.filter(link => {\r\n                // Ensure each link has from and to properties\r\n                const isValid = link && \r\n                    typeof link === 'object' && \r\n                    link.from && \r\n                    link.to;\r\n                \r\n                if (!isValid) {\r\n                    console.warn('Invalid link filtered out:', link);\r\n                }\r\n                \r\n                return isValid;\r\n            }).map(link => ({\r\n                from: String(link.from),\r\n                to: String(link.to)\r\n            }))\r\n            : [];\r\n\r\n        return {\r\n            nodeDataArray: sanitizedNodeDataArray,\r\n            linkDataArray: sanitizedLinkDataArray\r\n        };\r\n    }, [graphData]);\r\n    \r\n    // Handle React Flow instance reference\r\n    const onInitReactFlow = (instance) => {\r\n        setRfInstance(instance);\r\n    };\r\n    \r\n    const toggleMaximize = () => {\r\n        setIsMaximized(prev => !prev);\r\n    };\r\n    \r\n    // Adjust flow instance when maximized state changes\r\n    useEffect(() => {\r\n        if (rfInstance && !isDiagramMinimized) {\r\n            // Give the component time to resize before fitting view\r\n            setTimeout(() => {\r\n                rfInstance.fitView({ padding: 0.2 });\r\n            }, 150);\r\n        }\r\n    }, [isMaximized, isDiagramMinimized, rfInstance]);\r\n    \r\n    // Calculate dimensions based on container size\r\n    useEffect(() => {\r\n        if (containerRef.current && !isDiagramMinimized) {\r\n            const resizeObserver = new ResizeObserver(entries => {\r\n                const { width, height } = entries[0].contentRect;\r\n                if (width > 0 && height > 0) {\r\n                    setDimensions({ width: `${width}px`, height: `${height - 50}px` });\r\n                }\r\n            });\r\n            \r\n            resizeObserver.observe(containerRef.current);\r\n            return () => resizeObserver.disconnect();\r\n        }\r\n    }, [isDiagramMinimized, setDimensions]);\r\n    \r\n    // Safely compute dimensions\r\n    const computedDimensions = useMemo(() => {\r\n        // Validate and compute dimensions\r\n        const computeWidth = () => {\r\n            if (isMaximized) return \"100%\";\r\n            if (isDiagramMinimized) return \"300px\";\r\n            return dimensions?.width || \"800px\";\r\n        };\r\n\r\n        const computeHeight = () => {\r\n            if (isMaximized) return \"100%\";\r\n            if (isDiagramMinimized) return \"40px\";\r\n            return dimensions?.height || \"600px\";\r\n        };\r\n\r\n        return {\r\n            width: computeWidth(),\r\n            height: computeHeight()\r\n        };\r\n    }, [isMaximized, isDiagramMinimized, dimensions]);\r\n    \r\n    return (\r\n        <div \r\n            ref={containerRef}\r\n            style={{\r\n                position: \"fixed\",\r\n                bottom: isDiagramMinimized ? \"0\" : \"20px\",\r\n                right: isDiagramMinimized ? \"0\" : \"20px\",\r\n                width: computedDimensions.width,\r\n                height: computedDimensions.height,\r\n                backgroundColor: \"white\",\r\n                borderRadius: isMaximized ? \"0\" : \"8px\",\r\n                boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.15)\",\r\n                overflow: \"hidden\",\r\n                zIndex: 1000,\r\n                transition: \"all 0.3s ease\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                left: isMaximized ? \"0\" : \"auto\",\r\n                top: isMaximized ? \"0\" : \"auto\"\r\n            }}\r\n        >\r\n            {/* Existing Header Code Remains the Same */}\r\n            {/* Popup Content */}\r\n            {!isDiagramMinimized && (\r\n                <div style={{ \r\n                    flexGrow: 1,\r\n                    padding: \"0\",\r\n                    overflow: \"hidden\",\r\n                    height: \"calc(100% - 50px)\"\r\n                }}>\r\n                    <GraphVisualization\r\n                        graphData={safeGraphData}\r\n                        dimensions={\r\n                            isMaximized \r\n                                ? { width: \"100%\", height: \"calc(100vh - 80px)\" } \r\n                                : computedDimensions\r\n                        }\r\n                        setDimensions={setDimensions}\r\n                        onInit={onInitReactFlow}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DiagramPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}