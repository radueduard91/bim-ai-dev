{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R40008\\\\Asset Model Server\\\\python\\\\bim-ai-poc\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport * as go from \"gojs\"; // Import GoJS for diagram visualization\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [graphData, setGraphData] = useState(null);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleFileUpload = async () => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      alert(response.data.message);\n      fetchGraphData();\n    } catch (error) {\n      alert(\"Error uploading file\");\n    }\n  };\n  const fetchGraphData = async () => {\n    // Fetch graph data from your backend or generate dynamically\n    setGraphData({\n      nodeDataArray: [{\n        key: \"System1\",\n        category: \"system\",\n        label: \"System 1\"\n      }, {\n        key: \"Object1\",\n        category: \"object\",\n        label: \"Object 1\"\n      }, {\n        key: \"Attribute1\",\n        category: \"attribute\",\n        label: \"Attribute 1\"\n      }],\n      linkDataArray: [{\n        from: \"System1\",\n        to: \"Object1\"\n      }, {\n        from: \"Object1\",\n        to: \"Attribute1\"\n      }]\n    });\n  };\n  const diagramRef = React.useRef();\n  React.useEffect(() => {\n    if (graphData) {\n      const $ = go.GraphObject.make;\n      const myDiagram = $(go.Diagram, diagramRef.current, {\n        \"undoManager.isEnabled\": true\n      });\n      myDiagram.model = new go.GraphLinksModel(graphData.nodeDataArray, graphData.linkDataArray);\n    }\n  }, [graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFileUpload,\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: diagramRef,\n      style: {\n        width: \"800px\",\n        height: \"600px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"gwRTxMTRSw5xS8O+Ysy6axKvbYY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","go","jsxDEV","_jsxDEV","App","_s","file","setFile","graphData","setGraphData","handleFileChange","event","target","files","handleFileUpload","formData","FormData","append","response","post","headers","alert","data","message","fetchGraphData","error","nodeDataArray","key","category","label","linkDataArray","from","to","diagramRef","useRef","useEffect","$","GraphObject","make","myDiagram","Diagram","current","model","GraphLinksModel","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","style","width","height","_c","$RefreshReg$"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport * as go from \"gojs\";  // Import GoJS for diagram visualization\r\n\r\nconst App = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [graphData, setGraphData] = useState(null);\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleFileUpload = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n      alert(response.data.message);\r\n      fetchGraphData();\r\n    } catch (error) {\r\n      alert(\"Error uploading file\");\r\n    }\r\n  };\r\n\r\n  const fetchGraphData = async () => {\r\n    // Fetch graph data from your backend or generate dynamically\r\n    setGraphData({\r\n      nodeDataArray: [\r\n        { key: \"System1\", category: \"system\", label: \"System 1\" },\r\n        { key: \"Object1\", category: \"object\", label: \"Object 1\" },\r\n        { key: \"Attribute1\", category: \"attribute\", label: \"Attribute 1\" },\r\n      ],\r\n      linkDataArray: [\r\n        { from: \"System1\", to: \"Object1\" },\r\n        { from: \"Object1\", to: \"Attribute1\" },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const diagramRef = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    if (graphData) {\r\n      const $ = go.GraphObject.make;\r\n      const myDiagram = $(go.Diagram, diagramRef.current, {\r\n        \"undoManager.isEnabled\": true,\r\n      });\r\n\r\n      myDiagram.model = new go.GraphLinksModel(graphData.nodeDataArray, graphData.linkDataArray);\r\n    }\r\n  }, [graphData]);\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      <button onClick={handleFileUpload}>Upload File</button>\r\n      <div ref={diagramRef} style={{ width: \"800px\", height: \"600px\" }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,EAAE,MAAM,MAAM,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMW,gBAAgB,GAAIC,KAAK,IAAK;IAClCJ,OAAO,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEX,IAAI,CAAC;IAE7B,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,+BAA+B,EAAEJ,QAAQ,EAAE;QAC3EK,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CAAC,CAAC;MACFC,KAAK,CAACH,QAAQ,CAACI,IAAI,CAACC,OAAO,CAAC;MAC5BC,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF,CAAC;EAED,MAAMG,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC;IACAf,YAAY,CAAC;MACXiB,aAAa,EAAE,CACb;QAAEC,GAAG,EAAE,SAAS;QAAEC,QAAQ,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAW,CAAC,EACzD;QAAEF,GAAG,EAAE,SAAS;QAAEC,QAAQ,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAW,CAAC,EACzD;QAAEF,GAAG,EAAE,YAAY;QAAEC,QAAQ,EAAE,WAAW;QAAEC,KAAK,EAAE;MAAc,CAAC,CACnE;MACDC,aAAa,EAAE,CACb;QAAEC,IAAI,EAAE,SAAS;QAAEC,EAAE,EAAE;MAAU,CAAC,EAClC;QAAED,IAAI,EAAE,SAAS;QAAEC,EAAE,EAAE;MAAa,CAAC;IAEzC,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,UAAU,GAAGnC,KAAK,CAACoC,MAAM,CAAC,CAAC;EAEjCpC,KAAK,CAACqC,SAAS,CAAC,MAAM;IACpB,IAAI3B,SAAS,EAAE;MACb,MAAM4B,CAAC,GAAGnC,EAAE,CAACoC,WAAW,CAACC,IAAI;MAC7B,MAAMC,SAAS,GAAGH,CAAC,CAACnC,EAAE,CAACuC,OAAO,EAAEP,UAAU,CAACQ,OAAO,EAAE;QAClD,uBAAuB,EAAE;MAC3B,CAAC,CAAC;MAEFF,SAAS,CAACG,KAAK,GAAG,IAAIzC,EAAE,CAAC0C,eAAe,CAACnC,SAAS,CAACkB,aAAa,EAAElB,SAAS,CAACsB,aAAa,CAAC;IAC5F;EACF,CAAC,EAAE,CAACtB,SAAS,CAAC,CAAC;EAEf,oBACEL,OAAA;IAAAyC,QAAA,gBACEzC,OAAA;MAAO0C,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEpC;IAAiB;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjD/C,OAAA;MAAQgD,OAAO,EAAErC,gBAAiB;MAAA8B,QAAA,EAAC;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvD/C,OAAA;MAAKiD,GAAG,EAAEnB,UAAW;MAACoB,KAAK,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV,CAAC;AAAC7C,EAAA,CA1DID,GAAG;AAAAoD,EAAA,GAAHpD,GAAG;AA4DT,eAAeA,GAAG;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}