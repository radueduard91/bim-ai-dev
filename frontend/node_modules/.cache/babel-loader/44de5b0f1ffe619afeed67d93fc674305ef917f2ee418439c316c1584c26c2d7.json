{"ast":null,"code":"/**\r\n * Reorganizes the graph data based on \"new_object\" attribute in CSV\r\n * @param {Object} data - The raw graph data\r\n * @returns {Array} - Array of reorganized objects\r\n */\nexport function organizeDataForAIRearrangement(data) {\n  if (!data || !data.nodeDataArray || !data.linkDataArray) {\n    console.log(\"No data available for AI rearrangement\");\n    return [];\n  }\n  const {\n    nodeDataArray: nodes,\n    linkDataArray: links\n  } = data;\n  const attributes = nodes.filter(node => node.category === \"attribute\");\n  console.log(`Total number of attributes: ${attributes.length}`);\n\n  // Create a map of new objects based on the new_object field in attributes\n  const newObjectsMap = {};\n\n  // For debugging - check what properties are available in the first few attributes\n  if (attributes.length > 0) {\n    console.log(\"First attribute properties:\", Object.keys(attributes[0]));\n    console.log(\"First attribute sample:\", attributes[0]);\n  } else {\n    console.log(\"No attributes found in data\");\n  }\n\n  // Check for various forms of the new_object column\n  const newObjectKeys = [\"new_object\", \"new_object \", \"newobject\", \"NewObject\"];\n  let foundNewObjectKey = null;\n\n  // Find which key is present in the attributes\n  if (attributes.length > 0) {\n    const sampleAttr = attributes[0];\n    for (const key of newObjectKeys) {\n      if (sampleAttr.hasOwnProperty(key)) {\n        foundNewObjectKey = key;\n        console.log(`Found new_object key as: \"${key}\" with value: \"${sampleAttr[key]}\"`);\n        break;\n      }\n    }\n    if (!foundNewObjectKey) {\n      console.log(\"Could not find any new_object key. Available keys:\", Object.keys(sampleAttr));\n    }\n  }\n\n  // Count attributes with new_object values\n  let attributesWithNewObject = 0;\n  const newObjectValues = new Set();\n  attributes.forEach((attr, index) => {\n    let newObjectValue = null;\n\n    // Try the found key first\n    if (foundNewObjectKey && attr[foundNewObjectKey]) {\n      newObjectValue = attr[foundNewObjectKey];\n    } else {\n      // Otherwise try all possible variations\n      for (const key of newObjectKeys) {\n        if (attr.hasOwnProperty(key) && attr[key] && attr[key].trim() !== '') {\n          newObjectValue = attr[key];\n          if (!foundNewObjectKey) foundNewObjectKey = key;\n          break;\n        }\n      }\n    }\n    if (newObjectValue && typeof newObjectValue === 'string' && newObjectValue.trim() !== '') {\n      // Sample the first few values for debugging\n      if (index < 5) {\n        console.log(`Attribute ${index} (${attr.label}) has \"${foundNewObjectKey}\" value: \"${newObjectValue}\"`);\n      }\n      attributesWithNewObject++;\n      newObjectValues.add(newObjectValue.trim());\n      const newObjectName = newObjectValue.trim();\n      if (!newObjectsMap[newObjectName]) {\n        const objectKey = `new-object-${Object.keys(newObjectsMap).length + 1}`;\n        newObjectsMap[newObjectName] = {\n          key: objectKey,\n          label: newObjectName,\n          hoverLabel: `AI-organized attributes for ${newObjectName}`,\n          category: \"object\",\n          harmonizedAttributes: []\n        };\n      }\n    } else if (index < 5) {\n      // Debug the first few attributes without values\n      console.log(`Attribute ${index} (${attr.label}) has no new_object value`);\n      if (foundNewObjectKey) {\n        console.log(`  Value for \"${foundNewObjectKey}\": \"${attr[foundNewObjectKey]}\"`);\n      }\n    }\n  });\n  console.log(`Found ${attributesWithNewObject} attributes with new_object values out of ${attributes.length} total`);\n  console.log(`Unique new_object values: ${Array.from(newObjectValues).join(\", \")}`);\n  console.log(`Created objects based on new_object values: ${Object.keys(newObjectsMap).join(\", \")}`);\n\n  // If no new objects found, create fallback groupings\n  if (Object.keys(newObjectsMap).length === 0) {\n    console.log(\"No new object mappings found in data. Creating default fallback groups.\");\n\n    // Default fallback groups\n    const defaultGroups = [\"Core Entity\", \"Properties\", \"Dimensions\", \"References\"];\n    defaultGroups.forEach((groupName, index) => {\n      const objectKey = `fallback-object-${index}`;\n      newObjectsMap[groupName] = {\n        key: objectKey,\n        label: groupName,\n        hoverLabel: `Default AI grouping for ${groupName.toLowerCase()} attributes`,\n        category: \"object\",\n        harmonizedAttributes: []\n      };\n    });\n\n    // Assign attributes to default groups\n    attributes.forEach((attr, index) => {\n      // Simple distribution algorithm\n      const targetGroup = defaultGroups[index % defaultGroups.length];\n      const harmonizedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\n\n      // Find original object\n      const originalObjectKey = links.filter(link => link.to === attr.key).map(link => link.from)[0];\n      const originalObjects = nodes.filter(node => node.category === \"object\");\n      const originalObject = originalObjectKey ? originalObjects.find(obj => obj.key === originalObjectKey) : null;\n      addAttributeToNewObject(newObjectsMap[targetGroup], attr, harmonizedName, (originalObject === null || originalObject === void 0 ? void 0 : originalObject.label) || \"Unknown\");\n    });\n  } else {\n    // Process attributes and add them to their appropriate new objects\n    attributes.forEach(attr => {\n      const harmonizedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\n\n      // Find original object the attribute belonged to\n      const originalObjectKey = links.filter(link => link.to === attr.key).map(link => link.from)[0];\n      const originalObjects = nodes.filter(node => node.category === \"object\");\n      const originalObject = originalObjectKey ? originalObjects.find(obj => obj.key === originalObjectKey) : null;\n\n      // Get new_object value using the previously found key\n      let newObjectValue = null;\n      if (foundNewObjectKey && attr[foundNewObjectKey]) {\n        newObjectValue = attr[foundNewObjectKey];\n      } else {\n        for (const key of newObjectKeys) {\n          if (attr.hasOwnProperty(key) && attr[key] && attr[key].trim() !== '') {\n            newObjectValue = attr[key];\n            break;\n          }\n        }\n      }\n\n      // Determine target object (use new_object field or fallback)\n      const targetObjectName = newObjectValue && typeof newObjectValue === 'string' && newObjectValue.trim() !== '' ? newObjectValue.trim() : \"Other\";\n\n      // Ensure \"Other\" category exists if needed\n      if (targetObjectName === \"Other\" && !newObjectsMap[\"Other\"]) {\n        const objectKey = `new-object-other`;\n        newObjectsMap[\"Other\"] = {\n          key: objectKey,\n          label: \"Other\",\n          hoverLabel: \"Attributes not assigned to a specific object\",\n          category: \"object\",\n          harmonizedAttributes: []\n        };\n      }\n\n      // Add to appropriate new object\n      const targetObject = newObjectsMap[targetObjectName] || newObjectsMap[\"Other\"];\n      if (targetObject) {\n        addAttributeToNewObject(targetObject, attr, harmonizedName, (originalObject === null || originalObject === void 0 ? void 0 : originalObject.label) || \"Unknown\");\n      }\n    });\n  }\n\n  // Convert objects map to array and filter out empty objects\n  const objectsArray = Object.values(newObjectsMap).filter(obj => obj.harmonizedAttributes.length > 0);\n\n  // Sort objects and their attributes\n  objectsArray.sort((a, b) => a.label.localeCompare(b.label));\n  objectsArray.forEach(obj => {\n    obj.harmonizedAttributes.sort((a, b) => a.name.localeCompare(b.name));\n  });\n\n  // Create a single cluster containing all new objects\n  const aiGeneratedCluster = {\n    key: \"ai-generated-cluster\",\n    label: \"AI-Generated Structure\",\n    category: \"system\",\n    hoverLabel: \"Objects reorganized based on attribute relationships\",\n    objects: objectsArray\n  };\n  return objectsArray.length > 0 ? [aiGeneratedCluster] : [];\n}\n\n/**\r\n * Helper function to add an attribute to a new object\r\n * @param {Object} targetObject - The object to add the attribute to\r\n * @param {Object} attribute - The attribute to add\r\n * @param {string} harmonizedName - The harmonized name of the attribute\r\n * @param {string} originalObjectName - The name of the original object\r\n */\nfunction addAttributeToNewObject(targetObject, attribute, harmonizedName, originalObjectName) {\n  // Check if this harmonized attribute is already in the target object\n  const existingAttr = targetObject.harmonizedAttributes.find(attr => attr.name === harmonizedName);\n\n  // Check if this attribute is 3NF compliant\n  const is3NFCompliant = attribute.hasOwnProperty('3nf_marker') ? attribute['3nf_marker'] === 'yes' : Math.random() > 0.5; // Simulate for demo if field is missing\n\n  if (existingAttr) {\n    // Add the original attribute name if not already present\n    if (!existingAttr.originalAttributes.includes(attribute.label)) {\n      existingAttr.originalAttributes.push(attribute.label);\n    }\n\n    // If any attribute is not 3NF compliant, mark the harmonized attribute as not 3NF\n    if (!is3NFCompliant) {\n      existingAttr.is3NF = false;\n    }\n\n    // Make sure we track that this was moved from its original object\n    existingAttr.moved = true;\n\n    // Keep track of original object if not already set\n    if (!existingAttr.originalObject) {\n      existingAttr.originalObject = originalObjectName;\n    }\n  } else {\n    // Create a new harmonized attribute entry\n    targetObject.harmonizedAttributes.push({\n      name: harmonizedName,\n      count: 1,\n      originalAttributes: [attribute.label],\n      is3NF: is3NFCompliant,\n      moved: true,\n      originalObject: originalObjectName\n    });\n  }\n}","map":{"version":3,"names":["organizeDataForAIRearrangement","data","nodeDataArray","linkDataArray","console","log","nodes","links","attributes","filter","node","category","length","newObjectsMap","Object","keys","newObjectKeys","foundNewObjectKey","sampleAttr","key","hasOwnProperty","attributesWithNewObject","newObjectValues","Set","forEach","attr","index","newObjectValue","trim","label","add","newObjectName","objectKey","hoverLabel","harmonizedAttributes","Array","from","join","defaultGroups","groupName","toLowerCase","targetGroup","harmonizedName","harmonisedAttribute","originalObjectKey","link","to","map","originalObjects","originalObject","find","obj","addAttributeToNewObject","targetObjectName","targetObject","objectsArray","values","sort","a","b","localeCompare","name","aiGeneratedCluster","objects","attribute","originalObjectName","existingAttr","is3NFCompliant","Math","random","originalAttributes","includes","push","is3NF","moved","count"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/TableGraphVisualization/utils/dataOrganizer.js"],"sourcesContent":["/**\r\n * Reorganizes the graph data based on \"new_object\" attribute in CSV\r\n * @param {Object} data - The raw graph data\r\n * @returns {Array} - Array of reorganized objects\r\n */\r\nexport function organizeDataForAIRearrangement(data) {\r\n  if (!data || !data.nodeDataArray || !data.linkDataArray) {\r\n    console.log(\"No data available for AI rearrangement\");\r\n    return [];\r\n  }\r\n  \r\n  const { nodeDataArray: nodes, linkDataArray: links } = data;\r\n  const attributes = nodes.filter(node => node.category === \"attribute\");\r\n  \r\n  console.log(`Total number of attributes: ${attributes.length}`);\r\n  \r\n  // Create a map of new objects based on the new_object field in attributes\r\n  const newObjectsMap = {};\r\n  \r\n  // For debugging - check what properties are available in the first few attributes\r\n  if (attributes.length > 0) {\r\n    console.log(\"First attribute properties:\", Object.keys(attributes[0]));\r\n    console.log(\"First attribute sample:\", attributes[0]);\r\n  } else {\r\n    console.log(\"No attributes found in data\");\r\n  }\r\n  \r\n  // Check for various forms of the new_object column\r\n  const newObjectKeys = [\"new_object\", \"new_object \", \"newobject\", \"NewObject\"];\r\n  let foundNewObjectKey = null;\r\n  \r\n  // Find which key is present in the attributes\r\n  if (attributes.length > 0) {\r\n    const sampleAttr = attributes[0];\r\n    for (const key of newObjectKeys) {\r\n      if (sampleAttr.hasOwnProperty(key)) {\r\n        foundNewObjectKey = key;\r\n        console.log(`Found new_object key as: \"${key}\" with value: \"${sampleAttr[key]}\"`);\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!foundNewObjectKey) {\r\n      console.log(\"Could not find any new_object key. Available keys:\", Object.keys(sampleAttr));\r\n    }\r\n  }\r\n  \r\n  // Count attributes with new_object values\r\n  let attributesWithNewObject = 0;\r\n  const newObjectValues = new Set();\r\n  \r\n  attributes.forEach((attr, index) => {\r\n    let newObjectValue = null;\r\n    \r\n    // Try the found key first\r\n    if (foundNewObjectKey && attr[foundNewObjectKey]) {\r\n      newObjectValue = attr[foundNewObjectKey];\r\n    } else {\r\n      // Otherwise try all possible variations\r\n      for (const key of newObjectKeys) {\r\n        if (attr.hasOwnProperty(key) && attr[key] && attr[key].trim() !== '') {\r\n          newObjectValue = attr[key];\r\n          if (!foundNewObjectKey) foundNewObjectKey = key;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (newObjectValue && typeof newObjectValue === 'string' && newObjectValue.trim() !== '') {\r\n      // Sample the first few values for debugging\r\n      if (index < 5) {\r\n        console.log(`Attribute ${index} (${attr.label}) has \"${foundNewObjectKey}\" value: \"${newObjectValue}\"`);\r\n      }\r\n      \r\n      attributesWithNewObject++;\r\n      newObjectValues.add(newObjectValue.trim());\r\n      \r\n      const newObjectName = newObjectValue.trim();\r\n      \r\n      if (!newObjectsMap[newObjectName]) {\r\n        const objectKey = `new-object-${Object.keys(newObjectsMap).length + 1}`;\r\n        newObjectsMap[newObjectName] = {\r\n          key: objectKey,\r\n          label: newObjectName,\r\n          hoverLabel: `AI-organized attributes for ${newObjectName}`,\r\n          category: \"object\",\r\n          harmonizedAttributes: []\r\n        };\r\n      }\r\n    } else if (index < 5) {\r\n      // Debug the first few attributes without values\r\n      console.log(`Attribute ${index} (${attr.label}) has no new_object value`);\r\n      if (foundNewObjectKey) {\r\n        console.log(`  Value for \"${foundNewObjectKey}\": \"${attr[foundNewObjectKey]}\"`);\r\n      }\r\n    }\r\n  });\r\n  \r\n  console.log(`Found ${attributesWithNewObject} attributes with new_object values out of ${attributes.length} total`);\r\n  console.log(`Unique new_object values: ${Array.from(newObjectValues).join(\", \")}`);\r\n  console.log(`Created objects based on new_object values: ${Object.keys(newObjectsMap).join(\", \")}`);\r\n\r\n  // If no new objects found, create fallback groupings\r\n  if (Object.keys(newObjectsMap).length === 0) {\r\n    console.log(\"No new object mappings found in data. Creating default fallback groups.\");\r\n    \r\n    // Default fallback groups\r\n    const defaultGroups = [\"Core Entity\", \"Properties\", \"Dimensions\", \"References\"];\r\n    defaultGroups.forEach((groupName, index) => {\r\n      const objectKey = `fallback-object-${index}`;\r\n      newObjectsMap[groupName] = {\r\n        key: objectKey,\r\n        label: groupName,\r\n        hoverLabel: `Default AI grouping for ${groupName.toLowerCase()} attributes`,\r\n        category: \"object\",\r\n        harmonizedAttributes: []\r\n      };\r\n    });\r\n    \r\n    // Assign attributes to default groups\r\n    attributes.forEach((attr, index) => {\r\n      // Simple distribution algorithm\r\n      const targetGroup = defaultGroups[index % defaultGroups.length];\r\n      const harmonizedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\r\n      \r\n      // Find original object\r\n      const originalObjectKey = links\r\n        .filter(link => link.to === attr.key)\r\n        .map(link => link.from)[0];\r\n      \r\n      const originalObjects = nodes.filter(node => node.category === \"object\");\r\n      const originalObject = originalObjectKey ? \r\n        originalObjects.find(obj => obj.key === originalObjectKey) : null;\r\n      \r\n      addAttributeToNewObject(\r\n        newObjectsMap[targetGroup],\r\n        attr,\r\n        harmonizedName,\r\n        originalObject?.label || \"Unknown\"\r\n      );\r\n    });\r\n  } else {\r\n    // Process attributes and add them to their appropriate new objects\r\n    attributes.forEach(attr => {\r\n      const harmonizedName = attr.harmonisedAttribute || `Harmonised-${attr.label}`;\r\n      \r\n      // Find original object the attribute belonged to\r\n      const originalObjectKey = links\r\n        .filter(link => link.to === attr.key)\r\n        .map(link => link.from)[0];\r\n      \r\n      const originalObjects = nodes.filter(node => node.category === \"object\");\r\n      const originalObject = originalObjectKey ? \r\n        originalObjects.find(obj => obj.key === originalObjectKey) : null;\r\n      \r\n      // Get new_object value using the previously found key\r\n      let newObjectValue = null;\r\n      \r\n      if (foundNewObjectKey && attr[foundNewObjectKey]) {\r\n        newObjectValue = attr[foundNewObjectKey];\r\n      } else {\r\n        for (const key of newObjectKeys) {\r\n          if (attr.hasOwnProperty(key) && attr[key] && attr[key].trim() !== '') {\r\n            newObjectValue = attr[key];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Determine target object (use new_object field or fallback)\r\n      const targetObjectName = (newObjectValue && typeof newObjectValue === 'string' && newObjectValue.trim() !== '')\r\n        ? newObjectValue.trim()\r\n        : \"Other\";\r\n      \r\n      // Ensure \"Other\" category exists if needed\r\n      if (targetObjectName === \"Other\" && !newObjectsMap[\"Other\"]) {\r\n        const objectKey = `new-object-other`;\r\n        newObjectsMap[\"Other\"] = {\r\n          key: objectKey,\r\n          label: \"Other\",\r\n          hoverLabel: \"Attributes not assigned to a specific object\",\r\n          category: \"object\",\r\n          harmonizedAttributes: []\r\n        };\r\n      }\r\n      \r\n      // Add to appropriate new object\r\n      const targetObject = newObjectsMap[targetObjectName] || newObjectsMap[\"Other\"];\r\n      \r\n      if (targetObject) {\r\n        addAttributeToNewObject(\r\n          targetObject,\r\n          attr,\r\n          harmonizedName,\r\n          originalObject?.label || \"Unknown\"\r\n        );\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Convert objects map to array and filter out empty objects\r\n  const objectsArray = Object.values(newObjectsMap)\r\n    .filter(obj => obj.harmonizedAttributes.length > 0);\r\n  \r\n  // Sort objects and their attributes\r\n  objectsArray.sort((a, b) => a.label.localeCompare(b.label));\r\n  objectsArray.forEach(obj => {\r\n    obj.harmonizedAttributes.sort((a, b) => a.name.localeCompare(b.name));\r\n  });\r\n  \r\n  // Create a single cluster containing all new objects\r\n  const aiGeneratedCluster = {\r\n    key: \"ai-generated-cluster\",\r\n    label: \"AI-Generated Structure\",\r\n    category: \"system\",\r\n    hoverLabel: \"Objects reorganized based on attribute relationships\",\r\n    objects: objectsArray\r\n  };\r\n  \r\n  return objectsArray.length > 0 ? [aiGeneratedCluster] : [];\r\n}\r\n\r\n/**\r\n * Helper function to add an attribute to a new object\r\n * @param {Object} targetObject - The object to add the attribute to\r\n * @param {Object} attribute - The attribute to add\r\n * @param {string} harmonizedName - The harmonized name of the attribute\r\n * @param {string} originalObjectName - The name of the original object\r\n */\r\nfunction addAttributeToNewObject(targetObject, attribute, harmonizedName, originalObjectName) {\r\n  // Check if this harmonized attribute is already in the target object\r\n  const existingAttr = targetObject.harmonizedAttributes.find(attr => \r\n    attr.name === harmonizedName\r\n  );\r\n  \r\n  // Check if this attribute is 3NF compliant\r\n  const is3NFCompliant = attribute.hasOwnProperty('3nf_marker') \r\n    ? attribute['3nf_marker'] === 'yes'\r\n    : Math.random() > 0.5; // Simulate for demo if field is missing\r\n  \r\n  if (existingAttr) {\r\n    // Add the original attribute name if not already present\r\n    if (!existingAttr.originalAttributes.includes(attribute.label)) {\r\n      existingAttr.originalAttributes.push(attribute.label);\r\n    }\r\n    \r\n    // If any attribute is not 3NF compliant, mark the harmonized attribute as not 3NF\r\n    if (!is3NFCompliant) {\r\n      existingAttr.is3NF = false;\r\n    }\r\n    \r\n    // Make sure we track that this was moved from its original object\r\n    existingAttr.moved = true;\r\n    \r\n    // Keep track of original object if not already set\r\n    if (!existingAttr.originalObject) {\r\n      existingAttr.originalObject = originalObjectName;\r\n    }\r\n  } else {\r\n    // Create a new harmonized attribute entry\r\n    targetObject.harmonizedAttributes.push({\r\n      name: harmonizedName,\r\n      count: 1,\r\n      originalAttributes: [attribute.label],\r\n      is3NF: is3NFCompliant,\r\n      moved: true,\r\n      originalObject: originalObjectName\r\n    });\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}