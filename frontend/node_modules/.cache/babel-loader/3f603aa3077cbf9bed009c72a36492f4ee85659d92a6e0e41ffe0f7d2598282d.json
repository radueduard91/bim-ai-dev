{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R40008\\\\Asset Model Server\\\\python\\\\bim-ai-poc\\\\frontend\\\\src\\\\components\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as go from \"gojs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = ({\n  graphData,\n  dimensions,\n  setDimensions\n}) => {\n  _s();\n  const diagramRef = useRef();\n  useEffect(() => {\n    if (graphData) {\n      const $ = go.GraphObject.make;\n\n      // Dispose of the old diagram if it exists\n      if (diagramRef.current) {\n        const existingDiagram = go.Diagram.fromDiv(diagramRef.current);\n        if (existingDiagram) {\n          existingDiagram.div = null; // Clears the previous diagram instance\n        }\n      }\n      const myDiagram = $(go.Diagram, diagramRef.current, {\n        \"undoManager.isEnabled\": true,\n        layout: $(go.TreeLayout, {\n          angle: 0,\n          layerSpacing: 35\n        })\n      });\n\n      // Node template with hover functionality\n      myDiagram.nodeTemplate = $(go.Node, \"Auto\", $(go.Shape, \"RoundedRectangle\", {\n        fill: \"lightblue\"\n      }, new go.Binding(\"fill\", \"color\")), $(go.TextBlock, {\n        margin: 5\n      }, new go.Binding(\"text\", \"label\")), $(go.Panel, \"Auto\", {\n        name: \"HOVER_PANEL\",\n        visible: false,\n        maxSize: new go.Size(200, NaN),\n        alignment: go.Spot.BottomCenter\n      }, new go.Binding(\"maxSize\", \"\", obj => {\n        if (obj && obj.part) {\n          return new go.Size(obj.part.measuredBounds.width, NaN);\n        }\n        return new go.Size(200, NaN);\n      }), $(go.TextBlock, {\n        margin: 5,\n        font: \"italic 10pt sans-serif\",\n        stroke: \"gray\",\n        name: \"HOVER_LABEL\",\n        background: \"lightyellow\",\n        wrap: go.TextBlock.WrapFit\n      }, new go.Binding(\"text\", \"hoverLabel\"))), {\n        // Mouse enter: show hover label\n        mouseEnter: (e, obj) => {\n          const hoverPanel = obj.findObject(\"HOVER_PANEL\");\n          if (hoverPanel) hoverPanel.visible = true;\n        },\n        // Mouse leave: hide hover label\n        mouseLeave: (e, obj) => {\n          const hoverPanel = obj.findObject(\"HOVER_PANEL\");\n          if (hoverPanel) hoverPanel.visible = false;\n        }\n      });\n      myDiagram.model = new go.GraphLinksModel(graphData.nodeDataArray, graphData.linkDataArray);\n      myDiagram.addDiagramListener(\"InitialLayoutCompleted\", () => {\n        const bounds = myDiagram.documentBounds;\n        setDimensions({\n          width: `${Math.ceil(bounds.width)}px`,\n          height: `${Math.ceil(bounds.height)}px`\n        });\n      });\n    }\n  }, [graphData, setDimensions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: diagramRef,\n    style: {\n      width: \"100%\",\n      height: dimensions.height,\n      border: \"1px solid black\"\n    },\n    children: !graphData && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Graph will be displayed here after uploading a file.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"Iu16wR3n3MQey8BGIV6Jc19t6GQ=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","useEffect","useRef","go","jsxDEV","_jsxDEV","GraphVisualization","graphData","dimensions","setDimensions","_s","diagramRef","$","GraphObject","make","current","existingDiagram","Diagram","fromDiv","div","myDiagram","layout","TreeLayout","angle","layerSpacing","nodeTemplate","Node","Shape","fill","Binding","TextBlock","margin","Panel","name","visible","maxSize","Size","NaN","alignment","Spot","BottomCenter","obj","part","measuredBounds","width","font","stroke","background","wrap","WrapFit","mouseEnter","e","hoverPanel","findObject","mouseLeave","model","GraphLinksModel","nodeDataArray","linkDataArray","addDiagramListener","bounds","documentBounds","Math","ceil","height","ref","style","border","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/GraphVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as go from \"gojs\";\r\n\r\nconst GraphVisualization = ({ graphData, dimensions, setDimensions }) => {\r\n  const diagramRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (graphData) {\r\n      const $ = go.GraphObject.make;\r\n\r\n      // Dispose of the old diagram if it exists\r\n      if (diagramRef.current) {\r\n        const existingDiagram = go.Diagram.fromDiv(diagramRef.current);\r\n        if (existingDiagram) {\r\n          existingDiagram.div = null; // Clears the previous diagram instance\r\n        }\r\n      }\r\n\r\n      const myDiagram = $(go.Diagram, diagramRef.current, {\r\n        \"undoManager.isEnabled\": true,\r\n        layout: $(go.TreeLayout, { angle: 0, layerSpacing: 35 }),\r\n      });\r\n\r\n      // Node template with hover functionality\r\n       myDiagram.nodeTemplate = $(\r\n          go.Node,\r\n          \"Auto\",\r\n          $(go.Shape, \"RoundedRectangle\", { fill: \"lightblue\" }, new go.Binding(\"fill\", \"color\")),\r\n          $(go.TextBlock, { margin: 5 }, new go.Binding(\"text\", \"label\")),\r\n          $(\r\n             go.Panel,\r\n             \"Auto\",\r\n             {\r\n                  name: \"HOVER_PANEL\",\r\n                  visible: false,\r\n                  maxSize: new go.Size(200, NaN) ,\r\n                 alignment: go.Spot.BottomCenter\r\n              },\r\n              new go.Binding(\"maxSize\", \"\", (obj) => {\r\n                  if (obj && obj.part) {\r\n                      return new go.Size(obj.part.measuredBounds.width, NaN);\r\n                    }\r\n                      return new go.Size(200, NaN);\r\n                }),\r\n\r\n                $(\r\n                  go.TextBlock,\r\n                  {\r\n                      margin: 5,\r\n                      font: \"italic 10pt sans-serif\",\r\n                      stroke: \"gray\",\r\n                      name: \"HOVER_LABEL\",\r\n                      background: \"lightyellow\",\r\n                      wrap: go.TextBlock.WrapFit,\r\n                   },\r\n                  new go.Binding(\"text\", \"hoverLabel\")\r\n              ),\r\n          ),\r\n\r\n           {\r\n          // Mouse enter: show hover label\r\n              mouseEnter: (e, obj) => {\r\n                 const hoverPanel = obj.findObject(\"HOVER_PANEL\");\r\n                 if (hoverPanel) hoverPanel.visible = true;\r\n              },\r\n             // Mouse leave: hide hover label\r\n             mouseLeave: (e, obj) => {\r\n               const hoverPanel = obj.findObject(\"HOVER_PANEL\");\r\n                if (hoverPanel) hoverPanel.visible = false;\r\n            },\r\n          }\r\n        );\r\n\r\n      myDiagram.model = new go.GraphLinksModel(graphData.nodeDataArray, graphData.linkDataArray);\r\n\r\n      myDiagram.addDiagramListener(\"InitialLayoutCompleted\", () => {\r\n        const bounds = myDiagram.documentBounds;\r\n        setDimensions({\r\n          width: `${Math.ceil(bounds.width)}px`,\r\n          height: `${Math.ceil(bounds.height)}px`,\r\n        });\r\n      });\r\n    }\r\n  }, [graphData, setDimensions]);\r\n\r\n\r\n  return (\r\n    <div\r\n      ref={diagramRef}\r\n      style={{\r\n        width: \"100%\",\r\n        height: dimensions.height,\r\n        border: \"1px solid black\",\r\n      }}\r\n    >\r\n      {!graphData && <p>Graph will be displayed here after uploading a file.</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}