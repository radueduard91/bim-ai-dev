{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nconst useAppState = () => {\n  _s();\n  const [graphData, setGraphData] = useState(null);\n  const [popup, setPopup] = useState({\n    isOpen: false,\n    key: null,\n    value: \"\",\n    name: \"\"\n  });\n  const [dimensions, setDimensions] = useState({\n    width: \"100%\",\n    height: \"600px\"\n  });\n  const [showHarmonisedColumn, setShowHarmonisedColumn] = useState(false);\n  const [showDiagram, setShowDiagram] = useState(false);\n  const [isDiagramMinimized, setIsDiagramMinimized] = useState(false);\n\n  // Safely sanitize node data\n  const sanitizeNodeData = node => {\n    // Ensure we're only working with primitive values\n    return {\n      key: String(node.key || ''),\n      category: String(node.category || ''),\n      label: String(node.label || ''),\n      hoverLabel: String(node.hoverLabel || ''),\n      harmonisedAttribute: String(node.harmonisedAttribute || '')\n    };\n  };\n\n  // Popup management functions\n  const openPopup = (key, currentValue, currentName) => {\n    setPopup({\n      isOpen: true,\n      key: String(key),\n      value: String(currentValue || \"\"),\n      name: String(currentName || \"\")\n    });\n  };\n  const closePopup = () => {\n    setPopup({\n      isOpen: false,\n      key: null,\n      value: \"\",\n      name: \"\"\n    });\n  };\n  const savePopupChanges = showNotification => {\n    const updatedValue = String(popup.value || '');\n    const updatedName = String(popup.name || '');\n    setGraphData(prev => {\n      // Ensure prev is an object and has nodeDataArray\n      if (!prev || !Array.isArray(prev.nodeDataArray)) {\n        console.warn('Invalid graph data structure');\n        return prev;\n      }\n\n      // Create a new array with sanitized nodes\n      const updatedNodeDataArray = prev.nodeDataArray.map(node => node.key === popup.key ? {\n        ...sanitizeNodeData(node),\n        hoverLabel: updatedValue,\n        label: updatedName\n      } : sanitizeNodeData(node));\n      return {\n        ...prev,\n        nodeDataArray: updatedNodeDataArray\n      };\n    });\n    closePopup();\n\n    // Show saving indicator\n    if (showNotification) {\n      showNotification(\"Changes saved successfully.\", \"success\");\n    }\n  };\n  const handleLabelChange = (event, key) => {\n    const updatedValue = String(event.target.value || '');\n    setGraphData(prev => {\n      // Ensure prev is an object and has nodeDataArray\n      if (!prev || !Array.isArray(prev.nodeDataArray)) {\n        console.warn('Invalid graph data structure');\n        return prev;\n      }\n\n      // Create a new array with sanitized nodes\n      const updatedNodeDataArray = prev.nodeDataArray.map(node => node.key === key ? {\n        ...sanitizeNodeData(node),\n        hoverLabel: updatedValue\n      } : sanitizeNodeData(node));\n      return {\n        ...prev,\n        nodeDataArray: updatedNodeDataArray\n      };\n    });\n  };\n\n  // Load attribute descriptions\n  const loadAttributeDescriptions = async (isLoading, showNotification) => {\n    if (isLoading) return;\n    try {\n      // First tell the backend to prepare descriptions\n      await axios.post(\"http://localhost:8000/load-descriptions/\");\n\n      // Then fetch the graph data with descriptions\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\n\n      // Sanitize the received data\n      const sanitizedData = {\n        nodeDataArray: (response.data.nodeDataArray || []).map(sanitizeNodeData),\n        linkDataArray: response.data.linkDataArray || []\n      };\n      setGraphData(sanitizedData);\n      if (showNotification) {\n        showNotification(\"Definitions generated successfully!\", \"success\");\n      }\n    } catch (error) {\n      console.error(\"Error generating definitions:\", error);\n      if (showNotification) {\n        showNotification(\"Error generating definitions.\", \"error\");\n      }\n    }\n  };\n\n  // Toggle harmonised column visibility\n  const toggleHarmonisedColumn = () => {\n    setShowHarmonisedColumn(prev => !prev);\n  };\n\n  // Toggle diagram visibility\n  const toggleDiagram = showNotification => {\n    if (!graphData && showNotification) {\n      showNotification(\"Please upload data first.\", \"error\");\n      return;\n    }\n    setShowDiagram(prev => !prev);\n    setIsDiagramMinimized(false);\n  };\n\n  // Minimize/maximize diagram\n  const toggleMinimizeDiagram = () => {\n    setIsDiagramMinimized(prev => !prev);\n  };\n  return {\n    graphData,\n    setGraphData,\n    popup,\n    setPopup,\n    dimensions,\n    setDimensions,\n    showHarmonisedColumn,\n    setShowHarmonisedColumn,\n    showDiagram,\n    setShowDiagram,\n    isDiagramMinimized,\n    setIsDiagramMinimized,\n    handleLabelChange,\n    openPopup,\n    closePopup,\n    savePopupChanges,\n    loadAttributeDescriptions,\n    toggleHarmonisedColumn,\n    toggleDiagram,\n    toggleMinimizeDiagram\n  };\n};\n_s(useAppState, \"zEz+eVhskJUhh8tM9pHu9tfc7a4=\");\nexport default useAppState;","map":{"version":3,"names":["useState","axios","useAppState","_s","graphData","setGraphData","popup","setPopup","isOpen","key","value","name","dimensions","setDimensions","width","height","showHarmonisedColumn","setShowHarmonisedColumn","showDiagram","setShowDiagram","isDiagramMinimized","setIsDiagramMinimized","sanitizeNodeData","node","String","category","label","hoverLabel","harmonisedAttribute","openPopup","currentValue","currentName","closePopup","savePopupChanges","showNotification","updatedValue","updatedName","prev","Array","isArray","nodeDataArray","console","warn","updatedNodeDataArray","map","handleLabelChange","event","target","loadAttributeDescriptions","isLoading","post","response","get","sanitizedData","data","linkDataArray","error","toggleHarmonisedColumn","toggleDiagram","toggleMinimizeDiagram"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useAppState.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useAppState = () => {\r\n    const [graphData, setGraphData] = useState(null);\r\n    const [popup, setPopup] = useState({ isOpen: false, key: null, value: \"\", name: \"\" });\r\n    const [dimensions, setDimensions] = useState({ width: \"100%\", height: \"600px\" });\r\n    const [showHarmonisedColumn, setShowHarmonisedColumn] = useState(false);\r\n    const [showDiagram, setShowDiagram] = useState(false);\r\n    const [isDiagramMinimized, setIsDiagramMinimized] = useState(false);\r\n\r\n    // Safely sanitize node data\r\n    const sanitizeNodeData = (node) => {\r\n        // Ensure we're only working with primitive values\r\n        return {\r\n            key: String(node.key || ''),\r\n            category: String(node.category || ''),\r\n            label: String(node.label || ''),\r\n            hoverLabel: String(node.hoverLabel || ''),\r\n            harmonisedAttribute: String(node.harmonisedAttribute || '')\r\n        };\r\n    };\r\n\r\n    // Popup management functions\r\n    const openPopup = (key, currentValue, currentName) => {\r\n        setPopup({ \r\n            isOpen: true, \r\n            key: String(key), \r\n            value: String(currentValue || \"\"), \r\n            name: String(currentName || \"\") \r\n        });\r\n    };\r\n\r\n    const closePopup = () => {\r\n        setPopup({ isOpen: false, key: null, value: \"\", name: \"\" });\r\n    };\r\n\r\n    const savePopupChanges = (showNotification) => {\r\n        const updatedValue = String(popup.value || '');\r\n        const updatedName = String(popup.name || '');\r\n        \r\n        setGraphData((prev) => {\r\n            // Ensure prev is an object and has nodeDataArray\r\n            if (!prev || !Array.isArray(prev.nodeDataArray)) {\r\n                console.warn('Invalid graph data structure');\r\n                return prev;\r\n            }\r\n\r\n            // Create a new array with sanitized nodes\r\n            const updatedNodeDataArray = prev.nodeDataArray.map((node) => \r\n                node.key === popup.key \r\n                    ? { \r\n                        ...sanitizeNodeData(node), \r\n                        hoverLabel: updatedValue,\r\n                        label: updatedName \r\n                      }\r\n                    : sanitizeNodeData(node)\r\n            );\r\n\r\n            return {\r\n                ...prev,\r\n                nodeDataArray: updatedNodeDataArray\r\n            };\r\n        });\r\n        \r\n        closePopup();\r\n        \r\n        // Show saving indicator\r\n        if (showNotification) {\r\n            showNotification(\"Changes saved successfully.\", \"success\");\r\n        }\r\n    };\r\n\r\n    const handleLabelChange = (event, key) => {\r\n        const updatedValue = String(event.target.value || '');\r\n        \r\n        setGraphData((prev) => {\r\n            // Ensure prev is an object and has nodeDataArray\r\n            if (!prev || !Array.isArray(prev.nodeDataArray)) {\r\n                console.warn('Invalid graph data structure');\r\n                return prev;\r\n            }\r\n\r\n            // Create a new array with sanitized nodes\r\n            const updatedNodeDataArray = prev.nodeDataArray.map((node) => \r\n                node.key === key \r\n                    ? { \r\n                        ...sanitizeNodeData(node), \r\n                        hoverLabel: updatedValue \r\n                      }\r\n                    : sanitizeNodeData(node)\r\n            );\r\n\r\n            return {\r\n                ...prev,\r\n                nodeDataArray: updatedNodeDataArray\r\n            };\r\n        });\r\n    };\r\n\r\n    // Load attribute descriptions\r\n    const loadAttributeDescriptions = async (isLoading, showNotification) => {\r\n        if (isLoading) return;\r\n        \r\n        try {\r\n            // First tell the backend to prepare descriptions\r\n            await axios.post(\"http://localhost:8000/load-descriptions/\");\r\n            \r\n            // Then fetch the graph data with descriptions\r\n            const response = await axios.get(\"http://localhost:8000/graph-data/\");\r\n            \r\n            // Sanitize the received data\r\n            const sanitizedData = {\r\n                nodeDataArray: (response.data.nodeDataArray || []).map(sanitizeNodeData),\r\n                linkDataArray: response.data.linkDataArray || []\r\n            };\r\n\r\n            setGraphData(sanitizedData);\r\n            \r\n            if (showNotification) {\r\n                showNotification(\"Definitions generated successfully!\", \"success\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error generating definitions:\", error);\r\n            if (showNotification) {\r\n                showNotification(\"Error generating definitions.\", \"error\");\r\n            }\r\n        }\r\n    };\r\n\r\n    // Toggle harmonised column visibility\r\n    const toggleHarmonisedColumn = () => {\r\n        setShowHarmonisedColumn(prev => !prev);\r\n    };\r\n\r\n    // Toggle diagram visibility\r\n    const toggleDiagram = (showNotification) => {\r\n        if (!graphData && showNotification) {\r\n            showNotification(\"Please upload data first.\", \"error\");\r\n            return;\r\n        }\r\n        setShowDiagram(prev => !prev);\r\n        setIsDiagramMinimized(false);\r\n    };\r\n\r\n    // Minimize/maximize diagram\r\n    const toggleMinimizeDiagram = () => {\r\n        setIsDiagramMinimized(prev => !prev);\r\n    };\r\n\r\n    return {\r\n        graphData, \r\n        setGraphData,\r\n        popup, \r\n        setPopup,\r\n        dimensions, \r\n        setDimensions,\r\n        showHarmonisedColumn, \r\n        setShowHarmonisedColumn,\r\n        showDiagram, \r\n        setShowDiagram,\r\n        isDiagramMinimized, \r\n        setIsDiagramMinimized,\r\n        handleLabelChange,\r\n        openPopup,\r\n        closePopup,\r\n        savePopupChanges,\r\n        loadAttributeDescriptions,\r\n        toggleHarmonisedColumn,\r\n        toggleDiagram,\r\n        toggleMinimizeDiagram\r\n    };\r\n};\r\n\r\nexport default useAppState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}