{"ast":null,"code":"export const filterAndSortRows = (sortedRows, searchTerm, filterCategory, sortConfig) => {\n  let result = [...sortedRows];\n\n  // Search filter (expanded to include more fields)\n  if (searchTerm) {\n    const searchTermLower = searchTerm.toLowerCase();\n    result = result.filter(row => {\n      var _row$attr$hoverLabel, _row$parentObject, _row$parentObject$lab, _row$parentObject2, _row$parentObject2$ho, _row$parentCluster, _row$parentCluster$la, _row$parentCluster2, _row$parentCluster2$h;\n      // Search across multiple fields\n      const attributeNameMatch = row.attr.label.toLowerCase().includes(searchTermLower);\n      const attributeDescriptionMatch = (_row$attr$hoverLabel = row.attr.hoverLabel) === null || _row$attr$hoverLabel === void 0 ? void 0 : _row$attr$hoverLabel.toLowerCase().includes(searchTermLower);\n      const objectNameMatch = (_row$parentObject = row.parentObject) === null || _row$parentObject === void 0 ? void 0 : (_row$parentObject$lab = _row$parentObject.label) === null || _row$parentObject$lab === void 0 ? void 0 : _row$parentObject$lab.toLowerCase().includes(searchTermLower);\n      const objectDescriptionMatch = (_row$parentObject2 = row.parentObject) === null || _row$parentObject2 === void 0 ? void 0 : (_row$parentObject2$ho = _row$parentObject2.hoverLabel) === null || _row$parentObject2$ho === void 0 ? void 0 : _row$parentObject2$ho.toLowerCase().includes(searchTermLower);\n      const clusterNameMatch = (_row$parentCluster = row.parentCluster) === null || _row$parentCluster === void 0 ? void 0 : (_row$parentCluster$la = _row$parentCluster.label) === null || _row$parentCluster$la === void 0 ? void 0 : _row$parentCluster$la.toLowerCase().includes(searchTermLower);\n      const clusterDescriptionMatch = (_row$parentCluster2 = row.parentCluster) === null || _row$parentCluster2 === void 0 ? void 0 : (_row$parentCluster2$h = _row$parentCluster2.hoverLabel) === null || _row$parentCluster2$h === void 0 ? void 0 : _row$parentCluster2$h.toLowerCase().includes(searchTermLower);\n\n      // Return true if any field matches the search term\n      return attributeNameMatch || attributeDescriptionMatch || objectNameMatch || objectDescriptionMatch || clusterNameMatch || clusterDescriptionMatch;\n    });\n  }\n\n  // Rest of the existing filtering and sorting logic remains the same\n  // (Category filter and sorting code)\n  if (filterCategory !== \"all\") {\n    result = result.filter(row => {\n      var _row$parentCluster3, _row$parentObject3;\n      if (filterCategory === \"unlinked\") {\n        return !row.parentCluster && !row.parentObject;\n      }\n      return ((_row$parentCluster3 = row.parentCluster) === null || _row$parentCluster3 === void 0 ? void 0 : _row$parentCluster3.label) === filterCategory || ((_row$parentObject3 = row.parentObject) === null || _row$parentObject3 === void 0 ? void 0 : _row$parentObject3.label) === filterCategory;\n    });\n  }\n\n  // Sorting logic\n  if (sortConfig.key) {\n    result.sort((a, b) => {\n      var _a$parentCluster, _b$parentCluster, _a$parentObject, _b$parentObject;\n      let aValue, bValue;\n      switch (sortConfig.key) {\n        case 'cluster':\n          aValue = ((_a$parentCluster = a.parentCluster) === null || _a$parentCluster === void 0 ? void 0 : _a$parentCluster.label) || 'Unlinked';\n          bValue = ((_b$parentCluster = b.parentCluster) === null || _b$parentCluster === void 0 ? void 0 : _b$parentCluster.label) || 'Unlinked';\n          break;\n        case 'object':\n          aValue = ((_a$parentObject = a.parentObject) === null || _a$parentObject === void 0 ? void 0 : _a$parentObject.label) || 'Unlinked';\n          bValue = ((_b$parentObject = b.parentObject) === null || _b$parentObject === void 0 ? void 0 : _b$parentObject.label) || 'Unlinked';\n          break;\n        case 'attribute':\n          aValue = a.attr.label;\n          bValue = b.attr.label;\n          break;\n        default:\n          return 0;\n      }\n      if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }\n  return result;\n};\n\n// Unique Categories Extraction\nexport const getUniqueCategories = sortedRows => {\n  const clusters = new Set();\n  const objects = new Set();\n  sortedRows.forEach(row => {\n    if (row.parentCluster) {\n      clusters.add(row.parentCluster.label);\n    }\n    if (row.parentObject) {\n      objects.add(row.parentObject.label);\n    }\n  });\n  return {\n    clusters: Array.from(clusters),\n    objects: Array.from(objects)\n  };\n};\n\n// Cell Color Utility\nexport const getCellColor = (category, isHovered) => {\n  if (isHovered) {\n    switch (category) {\n      case \"system\":\n        return \"#dbeafe\";\n      // Light blue\n      case \"object\":\n        return \"#dcfce7\";\n      // Light green\n      case \"attribute\":\n        return \"#fce7f3\";\n      // Light pink\n      default:\n        return \"#f8fafc\";\n      // Light gray\n    }\n  }\n  return \"transparent\";\n};\n\n// Cell Border Style Utility\nexport const getCellBorderStyle = (rowIndex, isFirst = false, isLast = false) => {\n  return {\n    borderBottom: \"1px solid #e2e8f0\",\n    borderRight: \"1px solid #e2e8f0\",\n    borderLeft: isFirst ? \"1px solid #e2e8f0\" : \"none\",\n    borderTop: rowIndex === 0 ? \"1px solid #e2e8f0\" : \"none\"\n  };\n};","map":{"version":3,"names":["filterAndSortRows","sortedRows","searchTerm","filterCategory","sortConfig","result","searchTermLower","toLowerCase","filter","row","_row$attr$hoverLabel","_row$parentObject","_row$parentObject$lab","_row$parentObject2","_row$parentObject2$ho","_row$parentCluster","_row$parentCluster$la","_row$parentCluster2","_row$parentCluster2$h","attributeNameMatch","attr","label","includes","attributeDescriptionMatch","hoverLabel","objectNameMatch","parentObject","objectDescriptionMatch","clusterNameMatch","parentCluster","clusterDescriptionMatch","_row$parentCluster3","_row$parentObject3","key","sort","a","b","_a$parentCluster","_b$parentCluster","_a$parentObject","_b$parentObject","aValue","bValue","direction","getUniqueCategories","clusters","Set","objects","forEach","add","Array","from","getCellColor","category","isHovered","getCellBorderStyle","rowIndex","isFirst","isLast","borderBottom","borderRight","borderLeft","borderTop"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/components/TableVisualization/FilterSortUtils.js"],"sourcesContent":["export const filterAndSortRows = (\r\n    sortedRows, \r\n    searchTerm, \r\n    filterCategory, \r\n    sortConfig\r\n) => {\r\n    let result = [...sortedRows];\r\n\r\n    // Search filter (expanded to include more fields)\r\n    if (searchTerm) {\r\n        const searchTermLower = searchTerm.toLowerCase();\r\n        result = result.filter(row => {\r\n            // Search across multiple fields\r\n            const attributeNameMatch = row.attr.label.toLowerCase().includes(searchTermLower);\r\n            const attributeDescriptionMatch = row.attr.hoverLabel?.toLowerCase().includes(searchTermLower);\r\n            const objectNameMatch = row.parentObject?.label?.toLowerCase().includes(searchTermLower);\r\n            const objectDescriptionMatch = row.parentObject?.hoverLabel?.toLowerCase().includes(searchTermLower);\r\n            const clusterNameMatch = row.parentCluster?.label?.toLowerCase().includes(searchTermLower);\r\n            const clusterDescriptionMatch = row.parentCluster?.hoverLabel?.toLowerCase().includes(searchTermLower);\r\n\r\n            // Return true if any field matches the search term\r\n            return attributeNameMatch || \r\n                   attributeDescriptionMatch || \r\n                   objectNameMatch || \r\n                   objectDescriptionMatch || \r\n                   clusterNameMatch || \r\n                   clusterDescriptionMatch;\r\n        });\r\n    }\r\n\r\n    // Rest of the existing filtering and sorting logic remains the same\r\n    // (Category filter and sorting code)\r\n    if (filterCategory !== \"all\") {\r\n        result = result.filter(row => {\r\n            if (filterCategory === \"unlinked\") {\r\n                return !row.parentCluster && !row.parentObject;\r\n            }\r\n            return row.parentCluster?.label === filterCategory || \r\n                   row.parentObject?.label === filterCategory;\r\n        });\r\n    }\r\n\r\n    // Sorting logic\r\n    if (sortConfig.key) {\r\n        result.sort((a, b) => {\r\n            let aValue, bValue;\r\n            switch (sortConfig.key) {\r\n                case 'cluster':\r\n                    aValue = a.parentCluster?.label || 'Unlinked';\r\n                    bValue = b.parentCluster?.label || 'Unlinked';\r\n                    break;\r\n                case 'object':\r\n                    aValue = a.parentObject?.label || 'Unlinked';\r\n                    bValue = b.parentObject?.label || 'Unlinked';\r\n                    break;\r\n                case 'attribute':\r\n                    aValue = a.attr.label;\r\n                    bValue = b.attr.label;\r\n                    break;\r\n                default:\r\n                    return 0;\r\n            }\r\n\r\n            if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;\r\n            if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n// Unique Categories Extraction\r\nexport const getUniqueCategories = (sortedRows) => {\r\n    const clusters = new Set();\r\n    const objects = new Set();\r\n\r\n    sortedRows.forEach(row => {\r\n        if (row.parentCluster) {\r\n            clusters.add(row.parentCluster.label);\r\n        }\r\n        if (row.parentObject) {\r\n            objects.add(row.parentObject.label);\r\n        }\r\n    });\r\n\r\n    return {\r\n        clusters: Array.from(clusters),\r\n        objects: Array.from(objects)\r\n    };\r\n};\r\n\r\n// Cell Color Utility\r\nexport const getCellColor = (category, isHovered) => {\r\n    if (isHovered) {\r\n        switch (category) {\r\n            case \"system\": return \"#dbeafe\"; // Light blue\r\n            case \"object\": return \"#dcfce7\"; // Light green\r\n            case \"attribute\": return \"#fce7f3\"; // Light pink\r\n            default: return \"#f8fafc\"; // Light gray\r\n        }\r\n    }\r\n    \r\n    return \"transparent\";\r\n};\r\n\r\n// Cell Border Style Utility\r\nexport const getCellBorderStyle = (rowIndex, isFirst = false, isLast = false) => {\r\n    return {\r\n        borderBottom: \"1px solid #e2e8f0\",\r\n        borderRight: \"1px solid #e2e8f0\", \r\n        borderLeft: isFirst ? \"1px solid #e2e8f0\" : \"none\",\r\n        borderTop: rowIndex === 0 ? \"1px solid #e2e8f0\" : \"none\"\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}