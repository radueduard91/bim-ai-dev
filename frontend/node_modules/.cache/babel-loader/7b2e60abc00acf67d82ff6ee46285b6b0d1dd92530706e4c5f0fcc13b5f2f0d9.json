{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport useAppState from './useAppState';\nconst useFileUpload = (setGraphData, showNotification) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    showConfirmDialog,\n    startAIProcessing\n  } = useAppState();\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n\n  // Modify handleFileUpload to use confirmation\n  const handleFileUpload = async (notification = null) => {\n    if (!file) {\n      if (notification) {\n        notification(\"Please select a file before uploading.\", \"error\");\n      }\n      return;\n    }\n    showConfirmDialog({\n      title: \"Upload and Analyze File?\",\n      message: \"The AI will analyze your data structure and prepare it for visualization. This process will take a moment.\",\n      confirmText: \"Upload and Analyze\",\n      onConfirm: async () => {\n        setIsLoading(true);\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        try {\n          // First upload the file\n          const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\"\n            }\n          });\n\n          // Then start AI processing\n          const aiProcess = startAIProcessing(\"Analyzing file structure...\");\n\n          // Simulate AI progress in stages\n          let progress = 0;\n          const interval = setInterval(() => {\n            progress += 5;\n\n            // Update message at certain thresholds\n            if (progress === 20) {\n              aiProcess.updateProgress(progress, \"Identifying data entities and relationships...\");\n            } else if (progress === 40) {\n              aiProcess.updateProgress(progress, \"Processing attribute characteristics...\");\n            } else if (progress === 60) {\n              aiProcess.updateProgress(progress, \"Analyzing semantic connections...\");\n            } else if (progress === 80) {\n              aiProcess.updateProgress(progress, \"Finalizing data structure...\");\n            }\n            aiProcess.updateProgress(progress);\n            if (progress >= 100) {\n              clearInterval(interval);\n              aiProcess.complete();\n\n              // Fetch graph data after AI processing completes\n              fetchGraphData();\n              if (notification) {\n                notification(response.data.message, \"success\");\n              }\n            }\n          }, 100);\n        } catch (error) {\n          console.error(\"Error uploading file:\", error);\n          let errorMessage = \"Error uploading file.\";\n          if (error.response && error.response.data) {\n            errorMessage += ` ${error.response.data.detail || error.response.data.message}`;\n          }\n          if (notification) {\n            notification(errorMessage, \"error\");\n          }\n          setIsLoading(false);\n        }\n      }\n    });\n  };\n  const fetchGraphData = async (notification = null) => {\n    try {\n      setIsLoading(true);\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\n      setGraphData(response.data);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching graph data:\", error);\n      let errorMessage = \"Error fetching graph data.\";\n      if (error.response && error.response.data) {\n        errorMessage += ` ${error.response.data.detail || ''}`;\n      }\n      if (notification) {\n        notification(errorMessage, \"error\");\n      }\n      setIsLoading(false);\n    }\n  };\n  return {\n    file,\n    isLoading,\n    handleFileChange,\n    handleFileUpload,\n    fetchGraphData\n  };\n};\n_s(useFileUpload, \"As9Nr+s5azMowvOtcrWJ9hJFH1s=\", false, function () {\n  return [useAppState];\n});\nexport default useFileUpload;","map":{"version":3,"names":["useState","axios","useAppState","useFileUpload","setGraphData","showNotification","_s","file","setFile","isLoading","setIsLoading","showConfirmDialog","startAIProcessing","handleFileChange","event","target","files","handleFileUpload","notification","title","message","confirmText","onConfirm","formData","FormData","append","response","post","headers","aiProcess","progress","interval","setInterval","updateProgress","clearInterval","complete","fetchGraphData","data","error","console","errorMessage","detail","get"],"sources":["C:/Users/R40008/Asset Model Server/python/bim-ai-poc/frontend/src/hooks/useFileUpload.js"],"sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport useAppState from './useAppState';\r\n\r\nconst useFileUpload = (setGraphData, showNotification) => {\r\n  const [file, setFile] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  const { showConfirmDialog, startAIProcessing } = useAppState();\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  // Modify handleFileUpload to use confirmation\r\n  const handleFileUpload = async (notification = null) => {\r\n    if (!file) {\r\n      if (notification) {\r\n        notification(\"Please select a file before uploading.\", \"error\");\r\n      }\r\n      return;\r\n    }\r\n\r\n    showConfirmDialog({\r\n      title: \"Upload and Analyze File?\",\r\n      message: \"The AI will analyze your data structure and prepare it for visualization. This process will take a moment.\",\r\n      confirmText: \"Upload and Analyze\",\r\n      onConfirm: async () => {\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        \r\n        try {\r\n          // First upload the file\r\n          const response = await axios.post(\"http://localhost:8000/upload/\", formData, {\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          });\r\n          \r\n          // Then start AI processing\r\n          const aiProcess = startAIProcessing(\"Analyzing file structure...\");\r\n          \r\n          // Simulate AI progress in stages\r\n          let progress = 0;\r\n          const interval = setInterval(() => {\r\n            progress += 5;\r\n            \r\n            // Update message at certain thresholds\r\n            if (progress === 20) {\r\n              aiProcess.updateProgress(progress, \"Identifying data entities and relationships...\");\r\n            } else if (progress === 40) {\r\n              aiProcess.updateProgress(progress, \"Processing attribute characteristics...\");\r\n            } else if (progress === 60) {\r\n              aiProcess.updateProgress(progress, \"Analyzing semantic connections...\");\r\n            } else if (progress === 80) {\r\n              aiProcess.updateProgress(progress, \"Finalizing data structure...\");\r\n            }\r\n            \r\n            aiProcess.updateProgress(progress);\r\n            \r\n            if (progress >= 100) {\r\n              clearInterval(interval);\r\n              aiProcess.complete();\r\n              \r\n              // Fetch graph data after AI processing completes\r\n              fetchGraphData();\r\n              \r\n              if (notification) {\r\n                notification(response.data.message, \"success\");\r\n              }\r\n            }\r\n          }, 100);\r\n          \r\n        } catch (error) {\r\n          console.error(\"Error uploading file:\", error);\r\n          let errorMessage = \"Error uploading file.\";\r\n          if (error.response && error.response.data) {\r\n            errorMessage += ` ${error.response.data.detail || error.response.data.message}`;\r\n          }\r\n          if (notification) {\r\n            notification(errorMessage, \"error\");\r\n          }\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchGraphData = async (notification = null) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await axios.get(\"http://localhost:8000/graph-data/\");\r\n      setGraphData(response.data);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching graph data:\", error);\r\n      let errorMessage = \"Error fetching graph data.\";\r\n      if (error.response && error.response.data) {\r\n        errorMessage += ` ${error.response.data.detail || ''}`;\r\n      }\r\n      if (notification) {\r\n        notification(errorMessage, \"error\");\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    file,\r\n    isLoading,\r\n    handleFileChange,\r\n    handleFileUpload,\r\n    fetchGraphData\r\n  };\r\n};\r\n\r\nexport default useFileUpload;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AAEvC,MAAMC,aAAa,GAAGA,CAACC,YAAY,EAAEC,gBAAgB,KAAK;EAAAC,EAAA;EACxD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAM;IAAEW,iBAAiB;IAAEC;EAAkB,CAAC,GAAGV,WAAW,CAAC,CAAC;EAE9D,MAAMW,gBAAgB,GAAIC,KAAK,IAAK;IAClCN,OAAO,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,YAAY,GAAG,IAAI,KAAK;IACtD,IAAI,CAACX,IAAI,EAAE;MACT,IAAIW,YAAY,EAAE;QAChBA,YAAY,CAAC,wCAAwC,EAAE,OAAO,CAAC;MACjE;MACA;IACF;IAEAP,iBAAiB,CAAC;MAChBQ,KAAK,EAAE,0BAA0B;MACjCC,OAAO,EAAE,4GAA4G;MACrHC,WAAW,EAAE,oBAAoB;MACjCC,SAAS,EAAE,MAAAA,CAAA,KAAY;QACrBZ,YAAY,CAAC,IAAI,CAAC;QAClB,MAAMa,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAElB,IAAI,CAAC;QAE7B,IAAI;UACF;UACA,MAAMmB,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,+BAA+B,EAAEJ,QAAQ,EAAE;YAC3EK,OAAO,EAAE;cAAE,cAAc,EAAE;YAAsB;UACnD,CAAC,CAAC;;UAEF;UACA,MAAMC,SAAS,GAAGjB,iBAAiB,CAAC,6BAA6B,CAAC;;UAElE;UACA,IAAIkB,QAAQ,GAAG,CAAC;UAChB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;YACjCF,QAAQ,IAAI,CAAC;;YAEb;YACA,IAAIA,QAAQ,KAAK,EAAE,EAAE;cACnBD,SAAS,CAACI,cAAc,CAACH,QAAQ,EAAE,gDAAgD,CAAC;YACtF,CAAC,MAAM,IAAIA,QAAQ,KAAK,EAAE,EAAE;cAC1BD,SAAS,CAACI,cAAc,CAACH,QAAQ,EAAE,yCAAyC,CAAC;YAC/E,CAAC,MAAM,IAAIA,QAAQ,KAAK,EAAE,EAAE;cAC1BD,SAAS,CAACI,cAAc,CAACH,QAAQ,EAAE,mCAAmC,CAAC;YACzE,CAAC,MAAM,IAAIA,QAAQ,KAAK,EAAE,EAAE;cAC1BD,SAAS,CAACI,cAAc,CAACH,QAAQ,EAAE,8BAA8B,CAAC;YACpE;YAEAD,SAAS,CAACI,cAAc,CAACH,QAAQ,CAAC;YAElC,IAAIA,QAAQ,IAAI,GAAG,EAAE;cACnBI,aAAa,CAACH,QAAQ,CAAC;cACvBF,SAAS,CAACM,QAAQ,CAAC,CAAC;;cAEpB;cACAC,cAAc,CAAC,CAAC;cAEhB,IAAIlB,YAAY,EAAE;gBAChBA,YAAY,CAACQ,QAAQ,CAACW,IAAI,CAACjB,OAAO,EAAE,SAAS,CAAC;cAChD;YACF;UACF,CAAC,EAAE,GAAG,CAAC;QAET,CAAC,CAAC,OAAOkB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;UAC7C,IAAIE,YAAY,GAAG,uBAAuB;UAC1C,IAAIF,KAAK,CAACZ,QAAQ,IAAIY,KAAK,CAACZ,QAAQ,CAACW,IAAI,EAAE;YACzCG,YAAY,IAAI,IAAIF,KAAK,CAACZ,QAAQ,CAACW,IAAI,CAACI,MAAM,IAAIH,KAAK,CAACZ,QAAQ,CAACW,IAAI,CAACjB,OAAO,EAAE;UACjF;UACA,IAAIF,YAAY,EAAE;YAChBA,YAAY,CAACsB,YAAY,EAAE,OAAO,CAAC;UACrC;UACA9B,YAAY,CAAC,KAAK,CAAC;QACrB;MACF;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAM0B,cAAc,GAAG,MAAAA,CAAOlB,YAAY,GAAG,IAAI,KAAK;IACpD,IAAI;MACFR,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMgB,QAAQ,GAAG,MAAMzB,KAAK,CAACyC,GAAG,CAAC,mCAAmC,CAAC;MACrEtC,YAAY,CAACsB,QAAQ,CAACW,IAAI,CAAC;MAC3B3B,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,IAAIE,YAAY,GAAG,4BAA4B;MAC/C,IAAIF,KAAK,CAACZ,QAAQ,IAAIY,KAAK,CAACZ,QAAQ,CAACW,IAAI,EAAE;QACzCG,YAAY,IAAI,IAAIF,KAAK,CAACZ,QAAQ,CAACW,IAAI,CAACI,MAAM,IAAI,EAAE,EAAE;MACxD;MACA,IAAIvB,YAAY,EAAE;QAChBA,YAAY,CAACsB,YAAY,EAAE,OAAO,CAAC;MACrC;MACA9B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IACLH,IAAI;IACJE,SAAS;IACTI,gBAAgB;IAChBI,gBAAgB;IAChBmB;EACF,CAAC;AACH,CAAC;AAAC9B,EAAA,CA7GIH,aAAa;EAAA,QAIgCD,WAAW;AAAA;AA2G9D,eAAeC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}